<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lucene.Net.Contrib.Core</name>
    </assembly>
    <members>
        <member name="T:Lucene.Net.Analysis.Ext.SingleCharTokenAnalyzer">
            <summary>
            This analyzer targets short fields where *word* like searches are required.
            [SomeUser@GMAIL.com 1234567890] will be tokenized as
            [s.o.m.e.u.s.e.r..g.m.a.i.l..com..1.2.3.4.5.6.7.8.9.0] (read .'s as blank)
            
            Usage: 
            QueryParser p = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, "fieldName", new SingleCharTokenAnalyzer());
            p.SetDefaultOperator(QueryParser.Operator.AND);
            p.SetEnablePositionIncrements(true);
            
            TopDocs td = src.Search(p.Parse("678"), 10);
            or
            TopDocs td = src.Search(p.Parse("\"gmail.com 1234\""), 10);
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ext.SingleCharTokenAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            </summary>
        </member>
        <member name="T:Lucene.Net.Analysis.Ext.UnaccentedWordAnalyzer">
            <summary>
            Another Analyzer. Every char which is not a letter or digit is treated as a word separator.
            [Name.Surname@gmail.com 123.456 ğüşıöç%ĞÜŞİÖÇ$ΑΒΓΔΕΖ#АБВГДЕ SSß] will be tokenized as
            [name surname gmail com 123 456 gusioc gusioc αβγδεζ абвгде ssss]
            
            No problem with searches like someuser@gmail or 123.456 since they are
            converted to phrase-query as "someuser gmail" or "123 456".
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ext.UnaccentedWordAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            </summary>
        </member>
        <member name="T:Lucene.Net.Analysis.Ext.LetterOrDigitTokenizer">
            <summary>
            if a char is not a letter or digit, it is a word separator
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ext.LetterOrDigitTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            </summary>
        </member>
        <member name="M:Lucene.Net.Analysis.Ext.LetterOrDigitTokenizer.IsTokenChar(System.Char)">
            <summary>
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.FieldParser">
            <summary>
            The type of parser for the value of the term.
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.FieldEnumerator`1">
            <summary>
            <para>Base class for the typed enumerators.</para> 
            
            <para>
            There are five implementations of FieldEnumerator<typeparamref name="T"/> for
            strings, integers, longs, floats, and doubles. The numeric enumerators support both 
            standard Field and NumericField implementations.  The string and numeric enumerators
            have slightly different options, but both should be used within a using statment
            to close the underlying TermEnum/TermDocs. Refer to the unit tests for usage examples.
            </para>
            </summary>
            <typeparam name="T">The type of data being enumerated.</typeparam>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.includeDocs">
            <summary>
            Whether the enumerator will include TermDocs.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.termEnum">
            <summary>
            The underlying TermEnum;
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.termDocs">
            <summary>
            The optional TermDocs.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.tEnum">
            <summary>
            The specialized TermEnum enumerator.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.tdEnum">
            <summary>
            The specialized TermDoc enumerator.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.disposed">
            <summary>
            Whether or not the instance has been disposed.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.Init(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Initialization method called by subclasses to simulate a shared
            base constructor as generic classes cannot have a parameterized ctor.
            </summary>
            <param name="reader">The index reader to read from.</param>
            <param name="field">The field to enumerate.</param>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.Init(Lucene.Net.Index.IndexReader,System.String,System.Boolean)">
            <summary>
            Initialization method called by subclasses to simulate a shared
            base constructor as generic classes cannot have a parameterized ctor.
            </summary>
            <param name="reader">The index reader to read from.</param>
            <param name="fieldName">The field to enumerate.</param>
            <param name="includeDocs">Whether this enumerator will support TermDocs.</param>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TryParse(System.String)">
            <summary>
            Method to attempt to parse out the value from the encoded string
            and sets the value of Current.
            </summary>
            <param name="s">The encoded string.</param>
            <returns>True if the value was successfully parsed, false if we reached the
            end of encoded values in the fiele and only the tries remain.</returns>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.Dispose">
            <summary>
            Dispose of the instance.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.FieldEnumerator`1.Terms">
            <summary>
            Access the enumerator for the terms.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.FieldEnumerator`1.Docs">
            <summary>
            Access the enumerator for the TermDocs.
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator">
            <summary>
            The enumerator over the terms in an index.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.termEnum">
            <summary>
            The underlying TermEnum;
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.termDocs">
            <summary>
            The optional TermDocs.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.currentTerm">
            <summary>
            The current term in the enum.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.fieldName">
            <summary>
            The field name, if any for the enum.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.isFirst">
            <summary>
            Whether the enumerator has moved beyond the first position.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.enclosing">
            <summary>
            THe enclosing instance, called back to in order to parse the field.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.#ctor(Lucene.Net.Index.TermEnum,Lucene.Net.Index.TermDocs,System.String,Lucene.Net.Index.FieldEnumerator{`0})">
            <summary>
            Ctor.
            </summary>
            <param name="termEnum">The TermEnum to wrap.</param>
            <param name="termDocs">The TermDocs to wrap.</param>
            <param name="field"> </param>
            <param name="enclosing"> </param>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.MoveNext">
            <summary>
            Advance to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.Reset">
            <summary>
            Reset the enumerator to the beginngin.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.GetEnumerator">
            <summary>
            Accessor to IEnumerator-T-."/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Accessor to IEnumertor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.Current">
            <summary>
            The current item in the enumerator.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.FieldEnumerator`1.TermEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Current item in the enumerator.
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.TermDocEnumerator">
            <summary>
            Class to handle creating a TermDocs and allowing for seeking and enumeration. Used
            when you have a set of one or moreterms for which you want to enumerate over the 
            documents that contain those terms.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermDocEnumerator.termDocs">
            <summary>
            The underlying TermDocs.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.#ctor(Lucene.Net.Index.TermDocs)">
            <summary>
            Ctor.
            </summary>
            <param name="termDocs">The TermDocs to wrap.</param>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.Seek(Lucene.Net.Index.Term)">
            <summary>
            Seek to a specific term.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.Dispose">
            <summary>
            Dispose of the instance, closing the termdocs.
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator">
            <summary>
            Class to handle enumeration over the TermDocs that does NOT close them
            on a call to Dispose!
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.termEnum">
            <summary>
            A reference to an outside TermEnum that is used to position
            the TermDocs.  It can be null.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.termDocs">
            <summary>
            The underlying TermDocs.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.#ctor(Lucene.Net.Index.TermDocs)">
            <summary>
            Ctor.
            </summary>
            <param name="termDocs">TermDocs to wrap</param>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.#ctor(Lucene.Net.Index.TermDocs,Lucene.Net.Index.TermEnum)">
            <summary>
            Ctor.
            </summary>
            <param name="td">Underlying TermDocs.</param>
            <param name="termEnum">Enclosing field enum.</param>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.Seek(Lucene.Net.Index.TermEnum)">
            <summary>
            Seel to a term in the underlying TermDocs.
            </summary>
            <param name="te">The point to seek to.</param>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.Dispose">
            <summary>
            Dispose impl.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns>True if more, false if not.</returns>
        </member>
        <member name="M:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.Reset">
            <summary>
            Not implemented. Use Seek instead.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.Current">
            <summary>
            The current document id.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.TermDocEnumerator.TermDocUsingTermsEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="T:Lucene.Net.Index.StringFieldEnumerator">
            <summary>
            Implementation for enumerating over terms with a string value.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.StringFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
        </member>
        <member name="M:Lucene.Net.Index.StringFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,System.Boolean)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
            <param name="includeDocs">Whether the TermDocs will also be enumerated.</param>
        </member>
        <member name="M:Lucene.Net.Index.StringFieldEnumerator.TryParse(System.String)">
            <summary>
            Sets the value of current.
            </summary>
            <param name="s">The string.</param>
            <returns>Always true.</returns>
        </member>
        <member name="T:Lucene.Net.Index.NumericFieldEnum`1">
            <summary>
            Base for enumerating over numeric fields.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Lucene.Net.Index.NumericFieldEnum`1.parser">
            <summary>
            The parser type for the field being enumerated.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.NumericFieldEnum`1.Init(Lucene.Net.Index.IndexReader,System.String,System.Boolean,Lucene.Net.Index.FieldParser)">
            <summary>
            Initialize the instance.
            </summary>
            <param name="reader">The reader.</param>
            <param name="field">The field name.</param>
            <param name="includeDocs">Whether to include a TermDoc enum.</param>
            <param name="parser">The parser to use on the field.</param>
        </member>
        <member name="M:Lucene.Net.Index.NumericFieldEnum`1.TryParse(System.String)">
            <summary>
            Overridden from base.
            </summary>
            <param name="s">String to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Index.NumericFieldEnum`1.TryParseString(System.String)">
            <summary>
            Parse out a standard string and set the value of current.
            </summary>
            <param name="s">String to parse.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Lucene.Net.Index.NumericFieldEnum`1.TryParseNumeric(System.String)">
            <summary>
            Parse out an encoded numeric string and set the value of current.
            </summary>
            <param name="s">String to parse.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Lucene.Net.Index.IntFieldEnumerator">
            <summary>
            Implementation for enumerating over all of the terms in an int numeric field.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.IntFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
        </member>
        <member name="M:Lucene.Net.Index.IntFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser,System.Boolean)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
            <param name="includeDocs">Whether the TermDocs will also be enumerated.</param>
        </member>
        <member name="M:Lucene.Net.Index.IntFieldEnumerator.TryParseString(System.String)">
            <summary>
            Parse the int from the string.
            </summary>
            <param name="s">String to parse.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lucene.Net.Index.IntFieldEnumerator.TryParseNumeric(System.String)">
            <summary>
            Parse the int from an encoded string.
            </summary>
            <param name="s">String to parse.</param>
            <returns>True if the parse was successful, false indicating failure
            and the end of useful terms in the numeric field.</returns>
        </member>
        <member name="T:Lucene.Net.Index.FloatFieldEnumerator">
            <summary>
            Implementation for enumerating over all of the terms in a float numeric field.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.FloatFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
        </member>
        <member name="M:Lucene.Net.Index.FloatFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser,System.Boolean)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
            <param name="includeDocs">Whether the TermDocs will also be enumerated.</param>
        </member>
        <member name="M:Lucene.Net.Index.FloatFieldEnumerator.TryParseString(System.String)">
            <summary>
            Parse the float from a string.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lucene.Net.Index.FloatFieldEnumerator.TryParseNumeric(System.String)">
            <summary>
            Parse the float from a numeric field.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>True if the string was parsed, false to signify the
            end of usable terms in a numeric field.</returns>
        </member>
        <member name="T:Lucene.Net.Index.DoubleFieldEnumerator">
            <summary>
            Implementation for enumerating over all of the terms in a double numeric field.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.DoubleFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
        </member>
        <member name="M:Lucene.Net.Index.DoubleFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser,System.Boolean)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
            <param name="includeDocs">Whether the TermDocs will also be enumerated.</param>
        </member>
        <member name="M:Lucene.Net.Index.DoubleFieldEnumerator.TryParseString(System.String)">
            <summary>
            Parse the double from a string.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lucene.Net.Index.DoubleFieldEnumerator.TryParseNumeric(System.String)">
            <summary>
            Parse the double from a numeric field.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>True if the string was parsed, false to indicate the end
            of usable numeric terms.</returns>
        </member>
        <member name="T:Lucene.Net.Index.LongFieldEnumerator">
            <summary>
            Implementation for enumerating over all of the terms in a long numeric field.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.LongFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
        </member>
        <member name="M:Lucene.Net.Index.LongFieldEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String,Lucene.Net.Index.FieldParser,System.Boolean)">
            <summary>
            Construct an enumerator over one field.
            </summary>
            <param name="reader">Index reader.</param>
            <param name="fieldName">The field to read.</param>
            <param name="includeDocs">Whether the TermDocs will also be enumerated.</param>
        </member>
        <member name="M:Lucene.Net.Index.LongFieldEnumerator.TryParseString(System.String)">
            <summary>
            Parse the long from a string.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Lucene.Net.Index.LongFieldEnumerator.TryParseNumeric(System.String)">
            <summary>
            Parse the long from a numeric field.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>True if the string was parsed, false to inidicate
            the end of usable terms in a numeric field.</returns>
        </member>
        <member name="T:Lucene.Net.Index.SegmentsGenCommit">
            <summary>
            Class that will force an index writer to open an index based
            on the generation in the segments.gen file as opposed to the
            highest generation found in a directory listing.
            
            A use case for using this IndexCommit when opening an IndexWriter
            would be if index snapshots (source) are being copied over an 
            existing index (target) and the source now has a lower generation
            than the target due to initiating a rebuild of the index. 
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.SegmentsGenCommit.directory">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.SegmentsGenCommit.generation">
            <summary>
            The generation to use.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.SegmentsGenCommit.#ctor(Lucene.Net.Store.Directory)">
            <summary>
            Ctor.
            </summary>
            <param name="d">The index directory.</param>
        </member>
        <member name="M:Lucene.Net.Index.SegmentsGenCommit.ReadDirectory">
            <summary>
            Read the segments.gen file to get the generation number.
            </summary>
        </member>
        <member name="P:Lucene.Net.Index.SegmentsGenCommit.SegmentsFileName">
            <summary>
            Get the segments_n file for the generation found in the 
            segments.gen file.
            </summary>
            <returns>The segments_n file to use.</returns>
        </member>
        <member name="T:Lucene.Net.Index.TermVectorEnumerator">
            <summary>
            Class to allow for enumerating over the documents in the index to 
            retrieve the term vector for each one.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermVectorEnumerator.document">
            <summary>
            Current document being accessed.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermVectorEnumerator.fieldName">
            <summary>
            The field name the vectors are being accessed from.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermVectorEnumerator.reader">
            <summary>
            The index reader that the vetors are retreived from.
            </summary>
        </member>
        <member name="F:Lucene.Net.Index.TermVectorEnumerator.emptyVector">
            <summary>
            The return value should a document be deleted.
            </summary>
        </member>
        <member name="M:Lucene.Net.Index.TermVectorEnumerator.#ctor(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="reader">The index reader used to read the vectors.</param>
            <param name="field">The name of the field the vectors are read from.</param>
        </member>
        <member name="M:Lucene.Net.Index.TermVectorEnumerator.CurrentVector">
            <summary>
            Retrieve the current TermFreqVector from the index.
            </summary>
            <returns>The current TermFreqVector.</returns>
        </member>
        <member name="T:Lucene.Net.Index.EmptyVector">
            <summary>
            A simple TermFreqVector implementation for an empty vector for use
            with a deleted document or a document that does not have the field
            that is being enumerated.
            </summary>
        </member>
        <member name="T:Lucene.Net.Util.Cache.AbstractSegmentCache">
            <summary>
            Root custom cache to allow a factory to retain references to the custom
            caches without having to be aware of the type.
            </summary>
        </member>
        <member name="M:Lucene.Net.Util.Cache.AbstractSegmentCache.Warm(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Used to warm up the cache.
            </summary>
            <param name="reader">The reader to warm the cache for.</param>
            <param name="key">The inner key.</param>
        </member>
        <member name="T:Lucene.Net.Util.Cache.SegmentCache`1">
            <summary>
            Custom cache with two levels of keys, outer key is the IndexReader
            with the inner key being a string, commonly a field name but can be anything.
            Refer to the unit tests for an example implementation.
            <typeparam name="T">The type that is being cached.</typeparam>
            </summary>
        </member>
        <member name="F:Lucene.Net.Util.Cache.SegmentCache`1.readerCache">
            <summary>
            The cache - outer key is the reader, inner key is the field name. Value is the item desired.
            </summary>
        </member>
        <member name="F:Lucene.Net.Util.Cache.SegmentCache`1.cacheLock">
            <summary>
            Lock to use when accessing the cache.
            </summary>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.CreateValue(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Value creation.
            </summary>
            <param name="reader">The reader.</param>
            <param name="key">The key to the item under the reader.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.Warm(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Warm the cache - simply calls Get and ignores the return value.
            </summary>
            <param name="reader">The index reader to warm up.</param>
            <param name="key">The key of the item under the reader.</param>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.Get(Lucene.Net.Index.IndexReader,System.String)">
            <summary>
            Get the item from the cache.
            </summary>
            <param name="reader">The IndexReader the cache is from.</param>
            <param name="key">The key of the item under the reader.</param>
            <returns>The item from cache.</returns>
        </member>
        <member name="P:Lucene.Net.Util.Cache.SegmentCache`1.KeyCount">
            <summary>
            The number of outermost keys in the collection.
            </summary>
        </member>
        <member name="T:Lucene.Net.Util.Cache.SegmentCache`1.WeakKey">
            <summary>
            A weak referene wrapper for the hashtable keys. Whenever a key\value pair 
            is added to the hashtable, the key is wrapped using a WeakKey. WeakKey saves the
            value of the original object hashcode for fast comparison.
            </summary>
        </member>
        <member name="F:Lucene.Net.Util.Cache.SegmentCache`1.WeakKey.hashCode">
            <summary>
            The hashcode for the target.
            </summary>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.WeakKey.#ctor(System.Object)">
            <summary>
            Create a new WeakKey
            </summary>
            <param name="target">The object to use as the target.</param>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.WeakKey.GetHashCode">
            <summary>
            The hash code accessor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Util.Cache.SegmentCache`1.WeakKey.Equals(System.Object)">
            <summary>
            Equality between keys.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if they are equivalent.</returns>
        </member>
    </members>
</doc>
