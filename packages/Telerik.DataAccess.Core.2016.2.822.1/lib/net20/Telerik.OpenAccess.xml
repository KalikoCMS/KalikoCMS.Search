<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.OpenAccess</name>
    </assembly>
    <members>
        <member name="T:Telerik.OpenAccess.SPI.ProductConstants">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AssemblyVersion">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.TFSVersion">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.BuildVersion">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.BuildConfiguration">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.PKToken">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.TagPrefix">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.APIAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.APIAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RIAAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RIAAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.IntellitraceAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.IntellitraceAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DataServicesAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DataServicesAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RIADesignAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RIADesignAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.API40AssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.API40AssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.API35AssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.API35AssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RuntimeAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.RuntimeAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinMenuAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinMenuAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DesignAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DesignAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CommonUIAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CommonUIAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.SchemaToolAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.SchemaToolAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.NewEnhancerAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.NewEnhancerAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.EnhancerAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.EnhancerAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.Adonet2GenericAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.Adonet2GenericAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.NTDSAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.MySqlAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.MySqlAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.NtdsAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ReverseEngineeringAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ReverseEngineeringAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinInstallerAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinInstallerAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.SDKAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.SDKAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.VsPackageAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.VsPackageAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ProfilerAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ProfilerAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ConfigAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.LongProductName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ProductName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CompanyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CopyrightMessage">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AssemblyQualification">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.HyperdriveAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.HyperdriveAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WinUIAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WinUIAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebAssembly40Name">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebAssembly40Description">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebDesignAssembly40Name">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.WebDesignAssembly40Description">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.VsFileGeneratorAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.VsFileGeneratorAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslAssemblyNameDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslPackageAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslPackageAssemblyName10">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslPackageAssemblyNameDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslDesignAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DslDesignAssemblyNameDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CodeGenerationAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CodeGenerationAssemblyNameDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.AddinBaseTypeName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CacheClusterAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.CacheClusterAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.LINQPadAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.LINQPadAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DswAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DswAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ExtensibilityAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ExtensibilityAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ExtensibilityContractsAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.ExtensibilityContractsAssemblyDescription">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.BatchOperationsDialogTestsAssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DataAccessIconUrl">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.OpenAccessIconUrl">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.DataAccessHomePageUrl">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ProductConstants.LicenseAgreementUrl">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.AbstractBlob">
            <summary>
            Base class for binary large objects.
            </summary>
            <remarks>
            <para>
            Blobs let you store uninterpreted binary data. 
            </para>
            <para>
            You can access a blob only within an active transaction on an
            <see cref="T:Telerik.OpenAccess.IObjectScope"/>.
            </para>
            <para>
            Blobs are simple <see cref="T:Telerik.OpenAccess.Blob">byte buffers</see> that 
            are accessed as a whole.
            </para>
            Instances of this class are always second class objects (not 
            persisted by themselves, only through another persistent object).
            <seealso cref="T:Telerik.OpenAccess.Blob"/>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:System.IO.Stream"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.AbstractBlob.STANDARD">
            <summary>
            Indicates, that standard behavior is requested: blob is 
            loaded completely into memory.
            </summary>
            <remarks>The standard behavior is available with all backends.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.AbstractBlob.INCREMENTAL">
            <summary>
            Indicates, that non-standard behavior is requested: blob is 
            loaded chunkwise into memory. Only available with the 
            FastObjects backend.
            </summary>
            <remarks>The incremental loading behavior is only available
            with the FastObjects backend.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current Blob.
            There must be an active transaction, when this method is called.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the 
            reference point used to obtain the new position.
            </param>
            <returns>The new position within the current Blob.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.SetLength(System.Int64)">
            <summary>
            Changes the size of a Blob.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>
            Using this method to enlarge
            a Blob in advance is more efficient than writing and
            letting Telerik.OpenAccess .NET enlarge the object in small increments.
            <para>
            An active transaction is required.
            </para>
            </remarks>
            <param name="value">The new length of the Blob in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Close">
            <summary>
            Flushes the content of the Blob.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>
            In general, Close has not to be called explicitly.
            <para>An active transaction is required.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Flush">
            <summary>
            Clears all buffers for this Blob and causes any buffered data to 
            be written to the underlying device. 
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>
            In general, Flush has not to be called explicitly.
            <para>An active transaction is required.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.ReadByte">
            <summary>
            Reads a byte from the Blob and advances the position 
            within the Blob by one byte, or returns -1 if at the end 
            of the Blob. 
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>An active transaction is required.</remarks>
            <para>An active transaction is required.</para>
            <returns>The value at the current position of <c>-1</c> if
            the end has been reached.</returns>								
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32)">
            <summary>
            Reads a sequence of bytes from the specified 
            position. The current position within the Blob is not modified. 
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>An active transaction is required.</remarks>
            <param name="buffer"> The byte array to contain the data read. The 
            length of the array determines the number of bytes to be read.
            </param>
            <param name="pos">The position in the Blob to begin reading from
            (zero based). </param>
            <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>		
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is null.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from to the specified position and 
            advances the 
            position within the Blob by the number of bytes read.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>An active transaction is required.</remarks>
            <param name="buffer">An array of bytes. 
            Contains the byte values of the Blob
            between offset and (offset + count - 1) when this method returns.
            </param>
            <param name="offset">The zero-based byte offset in buffer at which
            to begin storing the data read from the current Blob.</param>
            <param name="count"> 
            The maximum number of bytes to be read from the current 
            Blob position.
            </param>
            <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>		
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="buffer"/> is too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset"/> or <paramref name="count"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.WriteByte(System.Byte)">
             <summary>
             Writes a byte to the Blob and advances the position 
             within the Blob by one byte. 
             There must be an active transaction, when this method is called.
             </summary>
            	<remarks>An active transaction is required.</remarks>
            <param name="value">The byte value to write to the current position.
            </param>
             <exception cref="T:System.ObjectDisposedException">
            	Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current Blob 
            position and 
            advances the current position by the number of 
            bytes written.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>An active transaction is required.</remarks>
            <param name="buffer">
            An array of bytes. This method copies <paramref name="count"/>
            bytes from buffer to the current Blob.
            </param>
            <param name="offset">The zero-based byte offset in 
            <paramref name="buffer"/> 
            from which to begin copying bytes to the current Blob.
            </param>
            <param name="count"> 
            The number of bytes to be written to the current Blob.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="buffer"/> is too small.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset"/> or <paramref name="count"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a sequence of bytes to the current Blob at the specified
            position. The current position within this Blob is not changed.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>An active transaction is required.</remarks>
            <param name="pos">The position in the Blob to begin writing 
            (zero based).</param>
            <param name="buffer">The byte array containing the data to be 
            written. 
            The length of the array determines the number of bytes written.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="buffer"/> is null.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.ToString">
            <summary>Returns a string that represents the current Blob.
            </summary>
            <remarks>
            The value returned might be useful for debugging purposes.
            </remarks>
            <returns>A string that represents the current Blob.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Equals(System.Object)">
            <summary>
            Determines whether two Blob instances have the same content
            and are equal.
            There must be an active transaction, when this method is called.
            </summary>
            <remarks>
            The <paramref name="obj"/> object must be of type
            AbstractBlob and have the same content to let this method 
            return <c>true</c>.
            </remarks>
            <returns><c>true</c> if the other Blob has the same content; 
            otherwise, <c>false</c>.</returns>
            <param name="obj">The other blob to compare with.</param>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.GetHashCode">
            <summary>
            Serves as a hash function for Blobs, suitable for use in hashing 
            algorithms and data structures like a hash table.
            There must be an active transaction, when this method is called.
            </summary>
            <returns>A hash code for this object.
            </returns>
            <remarks>
            Currently, the hash code returned is the length of the blob.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.GetImplementation">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Duplicate(Telerik.OpenAccess.SPI.BlobAdapter,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.AbstractBlob.Copy(Telerik.OpenAccess.AbstractBlob)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.AbstractBlob.CanRead">
            <summary>
            Indicates whether the Blob content can be read.
            This is possible if there is an active transaction.
            </summary>
            <value><c>true</c> if reading is supported;
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.AbstractBlob.CanWrite">
            <summary>
            Indicates whether the Blob content can be modified.
            This is possible if there is an active transaction.
            </summary>
            <value><c>true</c> if writing is supported; 
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.AbstractBlob.CanSeek">
            <summary>
            Indicates whether the Blob supports seeking. 
            This is possible if there is an active transaction.
            </summary>
            <value>Returns <c>true</c> if seeking is supported;
             otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.AbstractBlob.Length">
            <summary>
            Gets the size of the Blob in bytes.
            There must be an active transaction, when this method is called.
            </summary>
            <value>The size of the Blob in bytes.</value>		
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.AbstractBlob.Position">
            <summary>
            Controls the actual position within the current Blob.
            There must be an active transaction when this property is used.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
            <value>The byte position. (zero-based)</value>
            <remarks>An active transaction is required.</remarks>
        </member>
        <member name="T:Telerik.OpenAccess.CacheReferenceType">
            <summary>Specifies the type of the references maintained by the cache of the OpenAccessContext</summary>
        </member>
        <member name="F:Telerik.OpenAccess.CacheReferenceType.Auto">
            <summary>Specifies that references to fetched data are strongly held and references to user instances are weakly held</summary>
        </member>
        <member name="F:Telerik.OpenAccess.CacheReferenceType.Weak">
            <summary>Specifies that a reference is maintained using a System.WeakReference allowing the garbage collector to reclaim the object</summary>
        </member>
        <member name="F:Telerik.OpenAccess.CacheReferenceType.Strong">
            <summary>Specifies that all references can't be reclaimed</summary>
        </member>
        <member name="T:Telerik.OpenAccess.PerformanceCounterDefinitions">
            <summary>
            Facade that contains nested classes describing each exposed Performance Counter for Telerik Data Access
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.ProductName">
            <summary>
            Full name of the Telerik Data Access product
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.DefaultCategoryDescription">
            <summary>
            Default description for performance counter categories in Telerik Data Access.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync">
             <summary>
             Provides information about Level 2 Cache Synchronization metrics Performance Counter
             </summary>
             <remarks>
             This class provides descriptions for Telerik Data Access Level 2 Cache Synchronization performance metrics like:
             - number of sent eviction requests
             - number of received eviction requests
             - number of remote status requests.
             This counter is useful in scenarios where distributed Level 2 Cache is enabled and helps you keep track of communication messages between participating clusters.
             </remarks>
             <example>
             The following example demonstrates how to set up a Performance Counter Category and then initialize a specific counter.
             In the sample <code>applicationName</code> refers to an unique name of your application, data model or instance.
             <code>
             string categoryName = PerformanceCounterDefinitions.L2CacheSync.CategoryName;
             // check permissions
             new PerformanceCounterPermission(PerformanceCounterPermissionAccess.Administer,
                                              System.Security.Permissions.ResourcePermissionBase.Local,
                                              categoryName).Demand();
            
             // define counter
             CounterCreationDataCollection ccdc = new CounterCreationDataCollection();
             ccdc.Add(PerformanceCounterDefinitions.L2CacheSync.SendEvictRequests);
             ccdc.Add(PerformanceCounterDefinitions.L2CacheSync.ReceivedEvictRequests);
             ccdc.Add(PerformanceCounterDefinitions.L2CacheSync.RemoteStatusRequests);
             
             // create counter category
             PerformanceCounterCategory.Create(categoryName, PerformanceCounterDefinitions.DefaultCategoryDescription,
                                               PerformanceCounterCategoryType.MultiInstance,
                                               ccdc);
            
             // create the counter
             var counter = new PerformanceCounter(categoryName, 
                                                  PerformanceCounterDefinitions.L2CacheSync.SendCounterName, 
                                                  applicationName, 
                                                  false);
             </code>
             </example>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.CategoryName">
            <summary>
            Name for the Performance Counter Category
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.SendCounterName">
            <summary>
            Name of the Send Eviction Requests counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.SendCounterHelp">
            <summary>
            Description of the Send Eviction Requests Counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.ReceivedCounterName">
            <summary>
            Name of the Received Eviction Requests counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.ReceivedCounterHelp">
            <summary>
            Description of the Received Eviction Requests counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.RemoteStatusCounterName">
            <summary>
            Name of the Remote Status Requests counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.RemoteStatusCounterHelp">
            <summary>
            Description of the Remote Status Requests counter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.SendEvictRequests">
            <summary>
            Gets the definition of Send Eviction Requests performance counter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.ReceivedEvictRequests">
            <summary>
            Gets the definition of Received Eviction Requests performance counter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2CacheSync.RemoteStatusRequests">
            <summary>
            Gets the definition of Remote Status Requests performance counter
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache">
             <summary>
             Provides information about Level 2 metrics Performance Counter
             </summary>
             <remarks>
             This class provides descriptions for Telerik Data Access Level 2 Cache performance metrics like:
             - number of cache hits for single objects
             - number of cache misses for single objects
             - number of objects in the cache
             - number of cache hits for queries
             - number of cache misses for queries
             - number of queries in the cache
             This counter is useful in scenarios where you want to track Level 2 Cache utilization.
             </remarks>
             <example>
             The following example demonstrates how to set up a Performance Counter Category and then initialize a specific counter.
             In the sample <code>applicationName</code> refers to an unique name of your application, data model or instance.
             <code>
             string categoryName = PerformanceCounterDefinitions.L2Cache.CategoryName;
             // check permissions
             new PerformanceCounterPermission(PerformanceCounterPermissionAccess.Administer,
                                              System.Security.Permissions.ResourcePermissionBase.Local,
                                              categoryName).Demand();
            
             // define counter
             CounterCreationDataCollection ccdc = new CounterCreationDataCollection();
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.ObjectEntries);
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.ObjectHits);
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.ObjectMisses);
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.QueryEntries);
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.QueryHits);
             ccdc.Add(PerformanceCounterDefinitions.L2Cache.QueryMisses);
             
             // create counter category
             PerformanceCounterCategory.Create(categoryName, PerformanceCounterDefinitions.DefaultCategoryDescription,
                                               PerformanceCounterCategoryType.MultiInstance,
                                               ccdc);
            
             // create the counter
             var counter = new PerformanceCounter(categoryName, 
                                                  PerformanceCounterDefinitions.L2Cache.ObjectHits, 
                                                  applicationName, 
                                                  false);
             </code>
             </example>        
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.CategoryName">
            <summary>
            Name for the Performance Counter Category
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectMissesName">
            <summary>
            Name of the Object Misses performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectMissesDescription">
            <summary>
            Description of the Object Misses performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectHitsName">
            <summary>
            Name of the Object Hits performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectHitsDescription">
            <summary>
            Description of the Object Hits performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectEntriesName">
            <summary>
            Name of the Object Entries Cached performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectEntriesDescription">
            <summary>
            Description of the Object Entries Cached performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryMissesName">
            <summary>
            Name of the Query Misses performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryMissesDescription">
            <summary>
            Description of the Query Misses performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryHitsName">
            <summary>
            Name of the Query Hits performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryHitsDescription">
            <summary>
            Description of the Query Hits performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryEntriesName">
            <summary>
            Name of the Query Entries Cached performance counter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryEntriesDescription">
            <summary>
            Description of the Query Entries Cached performance counter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectMisses">
            <summary>
            Gets the definition of Object Misses performance counter.
            Counter measures the number of times L2 Cache fails to provide an object (cache miss).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectHits">
            <summary>
            Gets the definition of Object Hits performance counter.
            Counter measures the number of times L2 Cache succeeds to provide an object (cache hit).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.ObjectEntries">
            <summary>
            Gets the definition of Object Entries performance counter.
            Counter measures the number of objects stored in L2 Cache.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryMisses">
            <summary>
            Gets the definition of Query Misses performance counter.
            Counter measures the number of times L2 Cache fails to provide a query (cache miss).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryHits">
            <summary>
            Gets the definition of Query Hits performance counter.
            Counter measures the number of times L2 Cache succeeds to provide a query (cache hit).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.PerformanceCounterDefinitions.L2Cache.QueryEntries">
            <summary>
            Gets the definition of Query Entries performance counter.
            Counter measures the number of queries stored in L2 Cache.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BinaryStream">
            <summary>
            Exposes a stream around a database binary field.
            </summary>
            <remarks>
            <para>
            The stream allows for memory optimized access to large amounts of data. It reads and
            writes the data in chunks and allows for seeking.
            </para>
            <para>
            The instance that holds the stream must be persisted on the database before the stream
            methods can be used. This is to ensure that the insert and update methods have a row 
            to operate on.
            </para>
            </remarks>    
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.#ctor(Telerik.OpenAccess.IOpenAccessBinaryStream,System.String)">
            <summary>
            Initializes a new instance of the BinaryStream class for the specified info and field name.
            </summary>
            <param name="info">Database internal information.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.#ctor">
            <summary>
            Initializes a new instance of the BinaryStream type.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Flush">
            <summary>
            Clears buffers for this stream and causes any buffered data to be written to the database.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="length">The new length of the stream.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer. 
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which the read bytes will be placed.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the stream.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.SetDataAccess(Telerik.OpenAccess.DataAccessKind)">
            <summary>
            Set the stream's behavior - readonly, writeonly, readwrite
            </summary>
            <param name="kind">The kind.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Dispose(System.Boolean)">
             <summary>
            Releases the unmanaged resources used by the BinaryStream and optionally releases the managed resources.
             </summary>
             <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.GetLengthInternal">
            <summary>
            Retrieves the number of bytes as stored on the database server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.SetLengthInternal(System.Int64)">
            <summary>
            Sets the database server value to the specified length.
            </summary>
            <param name="length">The new length of the database server value.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying data source.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.SeekInternal(System.Int64,System.IO.SeekOrigin)">
            <summary>
             Sets the current position of this stream to the given value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.WriteInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying data source.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.Initialize(Telerik.OpenAccess.IOpenAccessBinaryStream,System.String)">
            <summary>
            Initializes the stream instance.
            </summary>
            <param name="newBinaryInfo">The IOpenAccessBinaryStream instance.</param>
            <param name="newFieldName">The field name.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.InitializeStreamDefaults(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes the stream instance.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.CheckAccess(System.Boolean)">
            <summary>
             Indicates if stream is currently accessible.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BinaryStream.MarkModified">
            <summary>
            Marks the stream as modified.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BinaryStream.Append">
            <summary>
            Gets or sets a value indicating whether the stream supports appending data.
            </summary>
            <remarks>
            When <see cref="P:Telerik.OpenAccess.BinaryStream.Append"/> is set to True, the data is appended to the actual end of the stream.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IOpenAccessBinaryStream">
            <summary>
            Provides a generic view of a sequence of bytes.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.ReadInternal(System.Byte[],System.Int32,System.Int32,System.String,System.Int64)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>     
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.FlushInternal(System.Byte[],System.Int32,System.Int32,System.String,System.Boolean,System.Int64)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.GetLengthInternal(System.String)">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.SetLengthInternal(System.String,System.Int64)">
            <summary>
            Sets the length of the bytes in the stream.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.GetDefaultBufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.MarkModified(System.String,System.IO.Stream)">
            <summary>
            Marks the stream as modified.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IOpenAccessBinaryStream.CanAccess(System.String,System.Boolean)">
            <summary>
            Indicates if stream is currently accessible.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IGetObjectsByKeysResult`1">
            <summary>
            Represent the result of GetObjectsByKeys operation as lazy evaluated enumeration.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectsByKeys``1(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})"/>
            <typeparam name="T">Target persistent type or object for Artificial types</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.IGetObjectsByKeysResult`1.GetMissing">
            <summary>
            Returns enumeration of provided ObjectKeys that were not found in the database.
            </summary>
            <returns>Enumeration of missing ObjectKeys.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.IGetObjectsByKeysResult`1.HasMissing">
            <summary>
            Indicates whether provided ObjectKey values where found and loaded or not.
            True if all are found, false if any of the values was not present in the database.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IKeyGenerator">
            <summary>
            Exposes functionality of various Telerik Data Access key generators.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetIncrementalGuid">
            <summary>
            Returns a client side generated System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <returns>An incremental Guid value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetIncrementalGuid(System.Int32)">
            <summary>
            Returns a client side generated System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <param name="grabSize">The number of incremental Guids that are allocated.</param>
            <returns>An incremental Guid value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetIncrementalGuids(System.Int32)">
            <summary>
            Returns client side generated System.Guid values that are greater than any Guid previously generated for the connected database.
            </summary>
            <param name="count">The number of incremental Guid values that should be.</param>
            <returns>A collection of Guids ordered in an incremental order.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.ResetIncrementalGuid">
            <summary>
            Resets the current unique identifier value to random value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetIncrementalGuidRange">
            <summary>
            Gets the range of the last generated incremental Guid value.
            </summary>
            <returns>The range (second most significant byte).</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.SetIncrementalGuidRange(System.Byte)">
            <summary>
            Sets the range of the next generated incremental Guid value.
            </summary>
            <param name="range">The new range (second most significant byte).</param>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetUniqueId(Telerik.OpenAccess.UniqueIdGenerator)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <returns>Unique integer value for a specified sequence.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IKeyGenerator.GetUniqueIds(Telerik.OpenAccess.UniqueIdGenerator,System.Int32)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <param name="size">Specifies the number of unique id keys that should be fetched from the database.</param>
            <returns>An IEnumerator instance which enumerates values in the range of the grab size.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.NamingSettingsAttribute">
            <summary>
            Specifies the model metadata relational naming settings.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.NamingSettingsAttribute.#ctor">
            <summary>
            Initializes an instance of the NamingSettingsAttribute class.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.SourceStrategy">
            <summary>
            Defines which model name is used as source for the column name generation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.RemoveCamelCase">
            <summary>
            Controls whether the camel casing of the input string is removed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.RemoveLeadingUnderscores">
            <summary>
            Gets or sets whether leading underscores in the input string are removed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.ResolveReservedWords">
            <summary>
            Controls whether the generated identifier will be checked for conflicts with backend reserved words.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.UseDelimitedSQL">
            <summary>
            Controls if plain or delimited SQL is used.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.NamingSettingsAttribute.WordBreak">
            <summary> 
            Controls the string used to break 'words' when generating names from field and class names and so on.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ReferenceAttribute">
            <summary>
            Designates a property as an inverse reference in a 1:1 relationship.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.MetadataAttribute">
            <summary>
            Base class for the attributes mapping infrastructure. Must be used to derive custom attributes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ReferenceAttribute.InverseProperty">
            <summary>
            Gets or sets the name of the property on the opposite side of the association.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.BatchOperationBase">
            <summary>
            Batch operation which can be executed on the items in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ResolutionActionBase">
            <summary>
            Resolution action for validation error in Telerik Data Access meta model.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IResolutionAction">
            <summary>
            Resolution action for validation error in Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IResolutionAction.Execute">
            <summary>
            Executes this resolution action.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IResolutionAction.Reset">
            <summary>
            Resets the state of the action.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.Kind">
            <summary>
            Gets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.NeedsUserInput">
            <summary>
            Gets a value indicating whether [needs user input].
            </summary>
            <value><c>true</c> if [needs user input]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.ModelChangedAction">
            <summary>
            Gets or sets an action that is executed when the model is changed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.Error">
            <summary>
             Gets an error message.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ResolutionActionBase.Execute">
            <summary>
            Executes this resolution action.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ResolutionActionBase.Reset">
            <summary>
            Resets the state of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.Kind">
            <summary>
            Gets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.Error">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.NeedsUserInput">
            <summary>
            Gets a value indicating whether [needs user input].
            </summary>
            <value><c>true</c> if [needs user input]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ResolutionActionBase.ModelChangedAction">
            <summary>
            Gets or sets an action that is executed when the model is changed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IBatchOperation">
            <summary>
            Batch operation which can be executed on the items in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IBatchOperation.Initialize(Telerik.OpenAccess.Metadata.IStoreDataContainer)">
            <summary>
            Initializes the operation for use.
            </summary>
            <param name="dataContainer">An IStoreDataContainer instance that contains data needed for the initialization</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperation.MetaItems">
            <summary>
            Gets or sets the meta items which will be processed by the batch operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperation.ItemsAffected">
            <summary>
            Gets a value indicating the number of affected meta items after execution of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperation.Name">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperation.GetDefaultMappingAction">
            <summary>
            Gets or sets an action that is used to obtain a metadata container with default mapping.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperation.SuppressUpdateNotifications">
            <summary>
            Gets or sets a value indicating whether model change notifications are executed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.BatchOperationBase.Initialize(Telerik.OpenAccess.Metadata.IStoreDataContainer)">
            <summary>
            Initializes the operation for use.
            </summary>
            <param name="dataContainer">An IStoreDataContainer instance that contains data needed for the initialization</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.BatchOperationBase.Reset">
            <summary>
            Resets the state of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.ItemsAffected">
            <summary>
            Gets a value indicating the number of affected meta items after execution of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.Name">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.MetaItems">
            <summary>
            Gets or sets the meta items which will be processed by the batch operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.GetDefaultMappingAction">
            <summary>
            Gets or sets an action that is used to obtain a metadata container with default mapping.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.BatchOperationBase.SuppressUpdateNotifications">
            <summary>
            Gets or sets a value indicating whether model change notifications are executed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction">
            <summary>
            Represents a resolution action for a model item with a missing name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction.ErrorMessage">
            <summary>
            Gets the error message that describes why this action cannot be executed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ChangeConverterOperation.Execute">
            <summary>
            Executes the change converter operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeConverterOperation.Converter">
            <summary>
            The new converter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeConverterOperation.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction">
            <summary>
            Represents a resolution action for a model item which requires an item to be chosen from a collection.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction.AvailableItems">
            <summary>
            Gets the available items to choose from.
            </summary>
            <value>The available items.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CascadeDeleteOption">
            <summary>
            Defines the cascade deletion behavior of a class hierarchy.
            </summary>
            <remarks>
            The behavior of deletes is controllable via the 
            <see cref="P:Telerik.OpenAccess.Metadata.MetaPersistentType.UseCascadeDelete"/> property and the
            database wide 
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowCascadeDelete"/> setting.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CascadeDeleteOption.Default">
             <summary>
             Indicates that the value will be calculated based on database wide setting.
             </summary>
             <remarks>
             If <code>Default</code> is specified, the behavior is controlled by 
             the <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowCascadeDelete"/> property.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CascadeDeleteOption.Yes">
            <summary>
            Cascading delete is used.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CascadeDeleteOption.No">
            <summary>
            Cascading delete is not used.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.DiscriminatorValueEquation">
            <summary>
            Defines the calculation operation for discriminator values
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.DiscriminatorValueEquation.Default">
            <summary>
            Defines that the default calculation operation is used.
            </summary>
            <remarks>
            The default is the hash value of the classes full name string.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.DiscriminatorValueEquation.Hash">
            <summary>
            Defines that the hash value of the full name of the class is used.
            </summary>
            <remarks>
            This is the optimal solution from runtime and space requierements. The discriminator column will be integer column.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.DiscriminatorValueEquation.Name">
            <summary>
            Defines that the simple name of the class is used ad discriminator value.
            </summary>
            <remarks>
            Because the name is a string, the discriminator column will be a variable length string column.
            Using a string makes it easier to analyse the database content without knowledge about the value.
            The same class name should not be reused in the class hierarchy.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.DiscriminatorValueEquation.Fullname">
            <summary>
            Defines that the full name of the class is used ad discriminator value.
            </summary>
            <remarks>
            Because the full name is a string, the discriminator column will be a variable length string column.
            Using a string makes it easier to analyse the database content without knowledge about the value.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MappedFunctionAttribute">
            <summary>
             Used to mark a method definition of a user-defined aggregate as a function in the database. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MappedFunctionAttribute.Name">
            <summary>
             A string value representing the name under which the function should be registered.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MappedFunctionAttribute.IsDeterministic">
            <summary>
            Indicates whether the user-defined function is deterministic.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MappedFunctionAttribute.Backend">
            <summary>
            Indicates the user-defined function backend.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CollectionNavigationMode">
            <summary>
            Represents a navigation collection mode used to generate names for meta navigation collection properties.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CollectionNavigationMode.Class">
            <summary>
            Navigation collection name will be based on the class name
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CollectionNavigationMode.Class_Property">
            <summary>
            Navigation collection name will be based on the class name and the property name.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CollectionNavigationMode.Property_Class">
            <summary>
            Navigation collection name will be based on the property name and the class name.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ReferenceNavigationMode">
            <summary>
            Represents a navigation reference mode used to generate names for meta navigation reference properties.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ReferenceNavigationMode.Class">
            <summary>
            Navigation reference name will be based on the class name
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ReferenceNavigationMode.Property">
            <summary>
            Navigation reference name will be based on the foreign key class name
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.ReferentialAction">
            <summary>
            Enumeration with all possible actions to be performed on Update/Delete for foreign key constraint
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ReferentialAction.NotSet">
            <summary>
            Action is not specified.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ReferentialAction.DbDefaultRule">
            <summary>
            The default delete rule specified by the target backend (No Action).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ReferentialAction.Cascade">
            <summary>
            Cascade: When the referenced row is deleted, referencing rows are deleted too.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ReferentialAction.SetNull">
            <summary>
            Set Null: When the referenced row is deleted, the foreign key columns of referencing rows will be set to NULL.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ReferentialAction.SetDefault">
            <summary>
            Set Default: When the referenced row is deleted, the foreign key columns of referencing rows will be set to their default value.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.DefaultMappingSettings">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.DefaultMappingSettings.GetDefaultMappingSettings(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.BackendConfiguration,System.Boolean,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DefaultMappingSettings.Container">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DefaultMappingSettings.Settings">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DefaultMappingSettings.DisplayErrors">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DefaultMappingSettings.Filename">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ITagRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ITagRule.CanTagItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Checks whether the attribute can be placed on the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ITagRule.ApplyTag(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Apply the attribute on the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ITagRule.FriendlyName">
            <summary>
            Gets the associated alias for the attribute.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.CustomAttributeValidationRule">
            <summary> hidden </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationRuleBase">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IValidationRule">
            <summary>
            Represents a validation rule for a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Determines whether this instance the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if this instance [can validate item] the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.Validate(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Validates the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.SetMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Sets the container which is being validated.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.SetDataContainer(Telerik.OpenAccess.Metadata.IStoreDataContainer)">
            <summary>
            Sets the data container used by this validation rule
            </summary>
            <param name="dataContainer">The data container</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationRule.FriendlyName">
            <summary>
            Gets the friendly name of the validation rule.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationRule.ModelChangedAction">
            <summary>
            Gets or sets an action that is executed when the model is changed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.#ctor(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.AddResolutionActionFactoryMethod(Telerik.OpenAccess.Metadata.ValidationDetail,Telerik.OpenAccess.Metadata.ValidationDetail.ResolutionActionFactoryMethod)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.Validate(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.AfterIsValidIsSet(Telerik.OpenAccess.Metadata.ValidationResult,Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.SetMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationRuleBase.SetDataContainer(Telerik.OpenAccess.Metadata.IStoreDataContainer)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationRuleBase.FriendlyName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationRuleBase.ModelChangedAction">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationRuleBase.Container">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationRuleBase.DataContainer">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.CustomAttributeValidationRule.#ctor">
            <summary> hidden </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.CustomAttributeValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary> hidden </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.CustomAttributeValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary> hidden </summary>
        </member>
        <member name="T:Telerik.OpenAccess.PersistenceStateHelper">
            <summary>
            Retrieves information about both attached and detached objects managed by Telerik Data Access.
            </summary>
            <remarks>
            An instance of this class is accessible via the <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.PersistenceState"/> property.
            </remarks>
            <seealso cref="P:Telerik.OpenAccess.OpenAccessContextBase.PersistenceState"/>
        </member>
        <member name="M:Telerik.OpenAccess.PersistenceStateHelper.GetState(System.Object)">
            <summary>
            Returns the state of the persistent entity.
            </summary>
            <param name="entity">The entity the state should be returned for.</param>
            <returns>Enumeration representing the state of the persistent object.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Entity is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.PersistenceStateHelper.GetState(System.Object,System.String)">
            <summary>
            Returns the state of the named property or field from the persistent entity.
            </summary>
            <param name="entity">The entity holding the field or property with the respective name.</param>
            <param name="fieldName">The name of the field or property the state should be returned for.</param>
            <returns>Enumeration representing the state of the data held by the named field or property.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Entity is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity or field name passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.PersistenceStateHelper.GetOriginalValue``1(System.Object,System.String)">
            <summary>
            Returns the original value of the named property of field from the persistent entity.
            </summary>
            <remarks>
            <para>
            If a property or field in a persistent type is changed or marked as dirty, the original value might be of interest. 
            This method can be used to access the original value if it is available.
            </para>
            <para>
            Per default only the original values for types marked with concurrency mode <see cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/> are kept. 
            If all original values are of interest, the <see cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues">context.ContextProperties.MaintainOriginalValues</see> 
            property has to be set to true.
            </para>
            <para>
            To keep all original values in memory involves a memory overhead. If one field is made dirty, all fields
            of that respective type are stored in an extra data structure. Also, additional operations can be needed to maintain this data structure.
            </para>
            <para>
            If the object is new, the default value of the respective property type is returned. If the property or field is clean, the clean value is returned.
            </para>
            </remarks>
            <typeparam name="T">The type of the expected return value. Object can be used for untyped access.</typeparam>
            <param name="entity">The object holding the field or property of interest.</param>
            <param name="propertyName">The name of the property or field of interest.</param>
            <returns>The old value if it was available and the property or field was dirty, the actual value otherwise.</returns>
            <seealso cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/>
            <seealso cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues"/>
            <seealso cref="M:Telerik.OpenAccess.PersistenceStateHelper.GetState(System.Object,System.String)"/>
            <exception cref="T:System.ArgumentNullException">If one of the arguments is null or string.Empty</exception>
            <exception cref="T:System.InvalidOperationException">If the entity is not managed by this context.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">If the no property or field with the specified name can be found.</exception>
            <exception cref="T:System.NotSupportedException">If the original value is not available.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.PersistenceStateHelper.IsDetached(System.Object)">
            <summary>
            Checks if a given entity is tracked by Telerik Data Access.
            </summary>
            <param name="entity">The entity to be checked.</param>
            <returns>True if the object is tracked.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.QueryOptions">
            <summary>
            Represents the query execution options in a Telerik Data Access query.
            </summary>
            <remarks>
            Options can affect various aspects of the query execution in Telerik Data Access.
            Side effects include the inability to store query results in the L2 cache.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.QueryOptions.#ctor">
            <summary>
            Creates a new instance with default values.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.QueryOptions.ToString">
            <summary>
            Returns a string representation of the QueryOptions instance.
            Skips options that have no set value.
            </summary>
            <returns>String with all set key:value pairs</returns>
        </member>
        <member name="P:Telerik.OpenAccess.QueryOptions.NonLocking">
            <summary>
            Controls if queries should be done in a non-locking mode which can lead to read of uncommitted data.
            </summary>
            <remarks>A side effect of using this option is the inability of using the L2 cache.</remarks>
            <value>True if queries can use the equivalent of WITH(NOLOCK) for T-SQL.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryOptions.NonWaiting">
            <summary>
            Controls if queries should not wait for locked resources on the database server.
            </summary>
            <remarks>
            When a resource is locked and the NonWaiting option is specified, an exception is thrown immediately.
            </remarks>
            <value>True if queries can use the equivalent of WITH(NOWAIT) for T-SQL.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryOptions.CommandTimeout">
            <summary>
            Controls the command timeout (in seconds) to be used for query execution.
            </summary>
            <remarks>
            The value specified will be used for the underlying DbCommand.CommandTimeout property.
            </remarks>
            <seealso cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CommandTimeout"/>
            <value>Value specified in seconds</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryOptions.Debug">
            <summary>
            Controls debugging information generation.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SchemaUpdateArgs">
            <summary>
            Args used by the metadata replacement operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateArgs.SchemaHandler">
            <summary>
            Schema creation and migration functioanlity
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateArgs.NewMetadata">
            <summary>
            Metadata container used for replacement.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateArgs.OldMetadata">
            <summary>
            Metadata container used for all actual running contexts.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateArgs.Cancel">
            <summary>
            Marker to cancel the metadata update procedure.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SchemaUpdateCallback">
            <summary>
            Delegate to integrate schema migration tasks into the metadata update calls.
            </summary>
            <param name="sender">The context that initialized the metadata update calll.</param>
            <param name="args">Contains all necessary information and functionality to initiate schema migration tasks.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler">
            <summary>
            Instance is used to process received cluster messages.
            </summary>
            <remarks>
            This interface provides a sink for eviction messages received by an
            Telerik Data Access instance in a cluster. An <see cref="T:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport"/>
            must call the <see cref="M:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler.HandleMessage(System.IO.Stream)"/> method when it receives a message from another
            node in the cluster.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport">
            <seealso cref="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Name"/>
            </seealso>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler.HandleMessage(System.IO.Stream)">
            <summary> 
            Process a message received by this node from another node in the cluster.
            </summary>
            <param name="stream">Input stream of (eviction) messages</param>
            <remarks>The returned exception is logged. If the log message should be a warning only, add "IsWarning" to the Data property of the exception.</remarks>
            <returns>Exception to be logged.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport">
            <summary>
            Interface to implement custom cluster transport.
            </summary>
            <remarks>
            Use this interface to implement cluster transport for Telerik Data Access. The
            transport receives messages when objects or types are evicted from the
            database wide cache used by a Telerik Data Access instance. It must
            communicate these messages to other nodes in the cluster. The <see cref="T:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler"/>
            instance passed to the <see cref="M:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport.Init(Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler,System.String,System.String,Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog)"/> function should be used to process messages received
            from other nodes in the cluster.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler">
            <seealso cref="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Name"/>
            </seealso>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport.Init(Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler,System.String,System.String,Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog)">
            <summary> 
            Init is called after all properties have been set when the transport is first created.
            </summary>
            <param name="msgHandler">
            The transport must invoke HandleMessage on this when
            it receives messages from other nodes.
            </param>
            <param name="serverName">The name of this OpenAccess instance.</param>
            <param name="identifier">The name to use for reporting identification.</param>
            <param name="log">Logging Instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport.SendMessage(System.Byte[])">
            <summary> 
            The message must be distributed to all the other nodes in the cluster
            using a reliable protocol with guaranteed message delivery. The receiving
            nodes must call HandleMessage on their OpenAccessClusterMsgHandler.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.Cluster.OpenAccessClusterMsgHandler.HandleMessage(System.IO.Stream)"/>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport.Close">
            <summary> 
            Free all resource eg. running threads etc. 
            </summary>
            <remarks>
            This is called when the
            Telerik Data Access process is closed (i.e. the <see cref="T:Telerik.OpenAccess.Database"/> is closed).
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport.MaxMessageSize">
            <summary>
            Returns the maximum message size that is allowed for this transport implementation.
            </summary>
            <remarks>
            When a logical evition message is bigger in size than the allowed message size, an EvictAll will be sent instead.
            </remarks>
            <value>Maximum message size in bytes</value>
        </member>
        <member name="T:Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog">
            <summary>
            Interface used to write log entries to the Telerik Data Access log
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Add an error description to the Telerik Data Access log
            </summary>
            <param name="e">Exception that occured.</param>
            <param name="formatString">Error description format string.</param>
            <param name="args">Error description arguments</param>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog.LogWarning(System.String,System.Object[])">
            <summary>
            Add a warning description to the Telerik Data Access log
            </summary>
            <param name="formatString">Warning description format string.</param>
            <param name="args">Warning description arguments</param>
        </member>
        <member name="M:Telerik.OpenAccess.Cluster.IOpenAccessClusterTransportLog.LogInformation(System.String,System.Object[])">
            <summary>
            Add an information description to the Telerik Data Access log
            </summary>
            <param name="formatString">Information description format string.</param>
            <param name="args">Information description arguments</param>
        </member>
        <member name="T:Telerik.OpenAccess.ConnectionPoolType">
            <summary>
            This enum is for defining the type of ConnectionPool.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConnectionPoolType.Integrated">
            <summary>
            The connection pool and management features of Telerik Data Access are used. Driver specific connection pooling is turned off and the connection string is modified.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConnectionPoolType.ADOManaged">
            <summary>
            Plain ADO connections are used. The management features of Telerik Data Access are used. Driver specific connection pooling is usable.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConnectionPoolType.ADO">
            <summary>
            Plain ADO connections are used. Management features of Telerik Data Access are turned off. Driver specific connection pooling is usable.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.AdoTypeConverter">
            <summary>
            Base class for all type converters working on ADO types
            </summary>
            <remarks>
            There will be one instance of this type for each column in the meta model of Telerik Data Access.
            <para>
            An implementation of this class must provide a public no args constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.Initialize(Telerik.OpenAccess.Data.IAdoTypeConverterRegistry)">
            <summary>
            Initializes a converter instance.
            </summary>
            <remarks>
            This method can be overriden to perform custom initialization based on information available in the <paramref name="registry"/>.
            </remarks>
            <param name="registry">The registry of all AdoTypeConverter mappings.</param>
            <returns>A new instance (initialized) or <c>this</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.Initialize(Telerik.OpenAccess.Data.IDataColumn,System.Type,Telerik.OpenAccess.Data.IAdoTypeConverterRegistry,System.Boolean)">
            <summary>
            Initializes a converter instance for a particular column.
            </summary>
            <remarks>
            <para>
            This method will fully configure this instance for the given column.
            </para>
            An overriding implementation can choose to return a new instance in order
            to deploy special handling code efficiently.
            </remarks>
            <param name="user">The column definition for this converter</param>
            <param name="clr">The type this converter should handle</param>
            <param name="registry">The registry of all AdoTypeConverter mappings.</param>
            <param name="secondaryTable">The converter is used for a link/map table column.</param>
            <returns>A new instance (fully initialized) or <c>this</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.TestSql(System.String)">
            <summary>
            Gets the custom test for that type (=,&lt;&gt;,&lt;,&lt;=,&gt;,&gt;=,LIKE).
            </summary>
            <remarks>
            No IS NULL replacement is done for parameters to the right side, when a non-null value is returned.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.Read(Telerik.OpenAccess.Data.DataHolder@)">
            <summary>
            Reads data from the data reader into the type 
            </summary>
            <returns>Value that was read or <c>null</c> when boxing is turned off</returns>
            <param name="holder">A place where the read data can be stored unboxed</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.Write(Telerik.OpenAccess.Data.DataHolder@)">
            <summary>
            Writes a value to the given parameter potentially avoiding boxing.
            </summary>
            <param name="holder">A place where the value is stored and where the parameter can be obtained from.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.ReadFromParameter(Telerik.OpenAccess.Data.DataHolder@)">
            <summary>
            Reads the value from an output parameter.
            </summary>
            <remarks>This method will be called when an output parameter value is to be retrieved.</remarks>
            <param name="holder">A place where the parameter is stored.</param>
            <returns>Output value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.CreateLiteralSql(Telerik.OpenAccess.Data.DataHolder@)">
            <summary>
            Generates the SQL string that represents the given value.
            </summary>
            <remarks>
            The value is passed through the typed fields of the <see cref="T:DataHolder"/> parameter. This 
            method needs to return the generated SQL string through the StringValue field back, and indicates
            whether the generated SQL needs to be quoted (typical for string and character literals).
            </remarks>
            <param name="holder">A place where the value is stored and where the result is stored 
            in the <see cref="F:Telerik.OpenAccess.Data.DataHolder.StringValue"/> field.</param>
            <returns><c>True</c> when the generated SQL string needs to be quoted.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.Parse(System.String)">
            <summary>
            Parse a value from a string representation.
            </summary>
            <remarks>This method is used when a externalized/stringified representation must be parsed into the correct object representation of the right CLR type.</remarks>
            <param name="s">String representation</param>
            <returns>Correct instance that is then usable to be written by this converter.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.AdoTypeConverter.ToString">
            <summary>
            Gets a string representation of the name of the converter.
            </summary>
            <returns>Name under which the converter is creatable</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.Column">
            <summary>
            The Telerik Data Access metadata describing the column this instance is responsible to handle.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.ClrType">
            <summary>
            The CLR type that this instance is reading or writing.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.NoEqualityTest">
            <summary>
            Indicates if the type in the database supports tests for equality through the = operator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.NullValueSql">
            <summary>
            Provides the SQL text that should be used when a null value needs to be stored.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.ParameterSql">
            <summary>
            Provides the SQL text that should be used when a parameter is to be written. 
            </summary>
            <remarks>
            A value of <c>null</c> signifies that the standard ? is to be used.
            </remarks>
            <value><c>null</c> or a string like "CAST(? AS BIGINT)"</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.UpdateCost">
            <summary>
            Provides the relative update cost for this type.
            </summary>
            <remarks>
            This method is used to calculate the 'cheapest to update' column for locking purposes.
            </remarks>
            <value><c>null</c> for standard cost estimation based on ClrType integers&lt;floats&lt;strings&lt;dates&lt;binaries, 
            0 for cheapest and 100 for most expensive.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.DefaultValueSql">
            <summary>
            Provides the SQL text that should be used when the default value for the column needs to be written.
            </summary>
            <remarks>
            A value of <c>null</c> signifies that the standard default value is to be used. This can be used for DDL purposes.
            </remarks>
            <value><c>null</c> or a string like "-4711"</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.DefaultType">
            <summary>
            Gets the default CLR type that this converter is converting to; must be nullable.
            </summary>
            <value>Type that is handled per default on this converter.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.AdoTypeConverter.AllowBatching">
            <summary>
            Indicates whether statement batching is permitted by the converter.
            </summary>
            <remarks>
            Some database systems (ORACLE) do not permit batching of statements involving UDT type parameter values. 
            Converters of these UDT types can return False so that statement batching is disabled.
            </remarks>
            <value>True if statements can be batched (Default:True)</value>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OACommand">
            <summary>
            Represents an SQL statement or stored procedure to execute against a data source.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.#ctor(System.String,Telerik.OpenAccess.Data.Common.OAConnection)">
            <summary>
            Initializes a new instance of the OACommand class.
            </summary>
            <param name="statement">The text of the command.</param>
            <param name="connection">The connection to the data source.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.Cancel">
            <summary>
            Tries to cancel the execution of a OACommand by calling the Cancel method of the underlying data provider. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.CreateDbParameter">
            <summary>
            Creates a new instance of a DbParameter type.
            </summary>
            <returns>A DbParameter instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command text against the connection.
            </summary>
            <param name="behavior">An instance of CommandBehavior.</param>
            <returns>An DbDataReader.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <remarks>The SQL statement is executed within a transaction that is started by the owning context. In order to commit or rollback this transaction you need to 
            call <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/></remarks>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.Prepare">
            <summary>
            Compiles the command and creates a prepared version of the command.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.CreateParameter">
            <summary>
             Creates a new instance of an OAParameter object.
            </summary>
            <returns>An OAParameter instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.ExecuteReader">
            <summary>
            Executes the CommandText against the Connection, and returns an OADataReader.
            </summary>
            <returns>An OADataReader</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the CommandText against the Connection, and returns an OADataReader using one of the CommandBehavior values. 
            </summary>
            <param name="behavior">One of the CommandBehavior values.</param>
            <returns>An OADataReader object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OACommand.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.CommandText">
            <summary>
            Gets or sets the text command to execute against the data source.
            </summary>
            <value>The text command to execute. The default value is an empty string ("").</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>The time in seconds to wait for the command to execute.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.CommandType">
            <summary>
            Gets or sets a value that indicates how the CommandText property is interpreted.
            </summary>
            <value>One of the CommandType values. The default is Text.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.DbConnection">
            <summary>
            Gets the DbConnection used by this DbCommand.
            </summary>
            <remarks>It is not allowed to reset the connection for an OACommand if the command is obtained from a context bound connection.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.DbParameterCollection">
            <summary>
            Gets the collection of DbParameter objects.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.DbTransaction">
            <summary>
            Gets or sets the DbTransaction within which this OACommand object executes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.DesignTimeVisible">
            <summary>
            Gets or sets a value indicating whether the command object should be visible in a customized interface control.
            </summary>
            <value>true, if the command object should be visible in a control; otherwise false. The default is false.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to rows.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.Connection">
            <summary>
            Gets the OAConnection used by this OACommand.
            </summary>
            <value> The <see cref="T:Telerik.OpenAccess.Data.Common.OAConnection"/></value>
            <remarks>This property cannot be set for a command that is obtained from a context bound <see cref="T:Telerik.OpenAccess.Data.Common.OAConnection"/>.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.Parameters">
            <summary>
            Gets the collection of OAParameter objects.
            </summary>
            <value>The parameters of the SQL statement or stored procedure.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OACommand.Transaction">
            <summary>
            Gets or sets the OATransaction within which this DbCommand object executes.
            </summary>
            <value>The transaction within which this command object executes. The default value is a null reference (Nothing in Visual Basic).</value>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OAConnection">
             <summary>
             Represents a connection to the database.
             </summary>
            <remarks>
            <para>An OAConnection provides an ADO.NET provider independent way of working with the database. An OAConnection can be obtained via a call to the 
            <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.Connection"/> property. This connection can be used to execute SQL statements (queries,commands etc) using the standard 
            ADO.NET method calls.
            </para>
            <para>The connection obtained via this property is owned by the context i.e. opening and closing of the actual database connection is 
            handled by the context. The ownership of the connection is given up by the context only if the context is disposed before the connection. 
            The <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.Connection"/> property begins a database transaction before returning the connection. Any 
            statements executed via this connection are automatically executed within this transaction. In order to commit or rollback the changes performed by the 
            executed statements, the user needs to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> method respectively.
            This means that these changes are always committed or rolled back together with the context changes. Since the transaction boundaries are controlled via 
            the context it is not allowed to call <see cref="M:Telerik.OpenAccess.Data.Common.OAConnection.BeginTransaction"/> and <see cref="M:Telerik.OpenAccess.Data.Common.OATransaction.Commit"/>/<see cref="M:Telerik.OpenAccess.Data.Common.OATransaction.Rollback"/>.
            </para>
            <para>
            In order to ensure that the database connection encapsulated by this OAConnection instance is not left open, it is very important to call the <see cref="M:Telerik.OpenAccess.Data.Common.OAConnection.Dispose(System.Boolean)"/>
            method (either explicitly or via a using block) on this instance. Calling Dispose notifies the owning <see cref="T:Telerik.OpenAccess.OpenAccessContextBase">context</see> that no user code 
            uses the connection anymore and that it can be safely closed. In case the owning context is disposed before the connection it is the user's responsiblity to 
            ensure that the underlying database connection is closed.
             </para>
            </remarks> 
            <example>
            <para>
            The following example obtains an OAConnection from the context and executes a stored procedure that returns some rows. The result of the procedure is then 
            materialized to instances of a type using the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.Translate(System.String,System.Data.Common.DbDataReader)"/> method. The 'CustOrderHistory' is a class with two properties that is used
            to hold the rows returned by the procedure.
            </para>
            <para>
            <note>
            In order to execute this sample you would need to ensure that the '[dbo].[CustOrderHist]' stored procedure in the Sql Server 'Northwind' sample database exists.
            </note>
            </para>
            <code lang="C#">
                 EntitiesModel context = new EntitiesModel();
            
                 using (OAConnection connection = context.Connection)
                 {
                     using(OACommand command = connection.CreateCommand())
                     {
                         command.CommandText = "CustOrderHist";
                         command.CommandType = System.Data.CommandType.StoredProcedure;
            
                         OAParameter customerID = new OAParameter("@CustomerID", "ALFKI");
                         command.Parameters.Add(customerID);
            
                         using (OADataReader reader = command.ExecuteReader())
                         {
            <![CDATA[
                             var materialized = context.Translate<CustOrderHistory>(reader);
             ]]>
                             foreach (var item in materialized)
                             {
                                 Console.WriteLine("Product - {0}, Quantity - {1} ",item.ProductName,item.Total);
                             }
                         }
                     }
                 }
            
                 //The 'CustOrderHistory' class
                 public class CustOrderHist
                 {
                     public string ProductName { get; set; }
            
                     public int Total { get; set; }
                 }
            </code>
            <code lang="Visual Basic">
                 Dim context As New EntitiesModel()
            
                 Using connection As OAConnection = context.Connection
                     Using command As OACommand = connection.CreateCommand()
                         command.CommandText = "CustOrderHist"
                         command.CommandType = System.Data.CommandType.StoredProcedure
            
                         Dim customerID As New OAParameter("@CustomerID", "ALFKI")
                         command.Parameters.Add(customerID)
            
                         Using reader As OADataReader = command.ExecuteReader()
                             Dim materialized = context.Translate(Of CustOrderHistory)(reader)
            
                             For Each item In materialized
                                 Console.WriteLine("Product - {0}, Quantity - {1} ", item.ProductName, item.Total)
                             Next
                         End Using
                     End Using
                 End Using
            
                 'The 'CustOrderHistory' class
                 Public Class CustOrderHistory
            
                     Public Property ProductName() As String
                
                     Public Property Total() As Integer
            
                    End Class
             </code>
            </example>
            <seealso cref="N:Telerik.OpenAccess.Data.Common"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Not supported
            </summary>
            <remarks>Calling this method on a connection obtained from the context results in an <see cref="T:System.InvalidOperationException"/> since the context is 
            solely responsible for transaction management. A context owned connection always has a transaction started on it.</remarks>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.ChangeDatabase(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="databaseName">Specifies the name of the database for the connection to use.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.Close">
            <summary>
            Closes the connection to the database only in case the owning context is disposed, else an exception is thrown.
            </summary>
            <remarks>The recommended way to close a connection is to call the <see cref="M:Telerik.OpenAccess.Data.Common.OAConnection.Dispose(System.Boolean)"/> method after having used the connection. The owning context will use the connection to save/rollback 
            it's changes (after a call to <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/>/<see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/>) and then close the
            connection. Calling this method on a connection obtained from the context results in an <see cref="T:System.InvalidOperationException"/> if the context is not yet disposed,since the context is 
            solely responsible for opening and closing the database connection.</remarks>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.CreateDbCommand">
            <summary>
            Creates and returns a DbCommand object associated with the current connection.
            </summary>
            <returns>A DbCommand object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.Open">
            <summary>
            Not supported
            </summary>
            <remarks>Calling this method on a connection obtained from the context results in an <see cref="T:System.InvalidOperationException"/> since the context is 
            solely responsible for opening and closing the database connection.</remarks>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.CreateCommand">
            <summary>
            Creates a new instance of an OACommand, with the Connection set to this OAConnection.
            </summary>
            <returns>An OACommand object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.BeginTransaction">
            <summary>
            Not supported
            </summary>
            <remarks>Calling this method on a connection obtained from the context results in an <see cref="T:System.InvalidOperationException"/> since the context is 
            solely responsible for transaction management. A context owned connection always has a transaction started on it.</remarks>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Not supported
            </summary>
            <remarks>Calling this method on a connection obtained from the context results in an <see cref="T:System.InvalidOperationException"/> since the context is 
            solely responsible for transaction management. A context owned connection always has a transaction started on it.</remarks>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <remarks>Disposing the OAConnection instance notifies the owning context that the underlying database connection is no longer used by client code. The 
            underlying connection will be used by the context to commit or rollback it's changes.</remarks>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAConnection.GetStoreConnection">
            <summary>
            Returns the underlying store connection. Used internally to obtain the DbConnection instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.StoreConnection">
            <summary>
            Provides access to the underlying data source connection that is used by the OAConnection object.
            </summary>
            <value>DbConnnection</value> 
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.ConnectionString">
            <summary>
            Gets the connection string used to open the connection.  
            </summary>
            <remarks>It is not allowed to set the connection string explicitly for an OAConnection.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.DataSource">
            <summary>
            Gets the name or network address of the data source to connect to.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.Database">
            <summary>
            Gets the name of the current database, or the database that will be used after a connection is opened.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.ServerVersion">
            <summary>
            Gets a string that contains the version of the data source to which the client is connected. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAConnection.State">
            <summary>
            Gets a string that describes the state of the connection.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OADataReader">
            <summary>
            Reads a forward-only stream of rows from a data source. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IExtendedDataReader">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedDataReader.GetConvertedValue``1(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedDataReader.Setup(Telerik.OpenAccess.SPI.DataReaderTypeConverter)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.Close">
            <summary>
            Closes the OADataReader object.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataIndex, into the buffer, starting at the location indicated by bufferIndex.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by dataIndex, into the buffer, 
            starting at the location indicated by bufferIndex.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets name of the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime object. 
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a Decimal object. 
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetEnumerator">
            <summary>
            Returns an IEnumerator that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The data type of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the DbDataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of String.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of Object.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns>true if there are more result sets; otherwise false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.Read">
            <summary>
            Advances the reader to the next record in a result set.
            </summary>
            <returns>true if there are more rows; otherwise false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.Dispose(System.Boolean)">
            <summary>
            Releases the resources consumed by this OADataReader and calls Close.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.GetConvertedValue``1(System.Int32)">
            <summary>
            Returns the converted value of the specified column obtained using an available database specific SQL to CLR converter. 
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="columnIndex">Index of column whose value is to be returned</param>
            <returns>Converted value</returns>
            <exception cref="T:System.InvalidOperationException">If the converts for this reader are not intialized via the <see cref="M:Telerik.OpenAccess.Data.Common.OADataReader.Setup(Telerik.OpenAccess.SPI.DataReaderTypeConverter)"/> method</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OADataReader.Setup(Telerik.OpenAccess.SPI.DataReaderTypeConverter)">
            <summary>
            Intializes this data reader with the specified type converter
            </summary>
            <param name="typeConverter">The converter to be used</param>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.HasRows">
            <summary>
            Gets a value that indicates whether this OADataReader contains one or more rows. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.IsClosed">
            <summary>
            Gets a value indicating whether the OADataReader is closed. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column as an instance of Object.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OADataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of Object.
            </summary>
            <param name="ordinal">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OAParameter">
            <summary>
            Represents a parameter to an OACommand. This class cannot be inherited. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameter.#ctor">
            <summary>
            Initializes a new instance of the OAParameter class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the OAParameter class that uses the specifies parameter name and value 
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">An Object that is the value of the OAParameter.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameter.ResetDbType">
            <summary>
            Resets the type associated with this OAParameter.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameter.ToString">
            <summary>
            Returns a String containing the name of the Component, if any. This method should not be overridden.
            </summary>
            <returns>A String containing the name of the Component, if any, or string.Empty if the Component is unnamed.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.DbType">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.Direction">
            <summary>
            Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, 
            or a stored procedure return value parameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.ParameterName">
            <summary>
            Gets or sets the name of the OAParameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapped to the DataSet and used for loading or returning the Value.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates whether the source column is nullable.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.SourceVersion">
            <summary>
            Gets or sets the DataRowVersion to use when you load Value.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameter.StoreParameter">
            <summary>
            Gets the underlying store parameter.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OAParameterCollection">
            <summary>
            Represents a collection of parameters associated with a  OACommand.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified OAParameter object to the OAParameterCollection.
            </summary>
            <param name="value">The OAParameter to add to the collection.</param>
            <returns>Collection count.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of values to the end of the OAParameterCollection.
            </summary>
            <param name="values">The Array values to add.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Clear">
            <summary>
            Removes all the OAParameter objects from the OAParameterCollection.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Contains(System.Object)">
            <summary>
            Determines whether the specified Object is in this OAParameterCollection.
            </summary>
            <param name="value">The Object value.</param>
            <returns>true if the OAParameterCollection contains the value; otherwise false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Contains(System.String)">
            <summary>
            Determines whether an OAParameter with the specified name is in this OAParameterCollection.
            </summary>
            <param name="parameterName">The OAParameter value.</param>
            <returns>true if the OAParameterCollection contains the value; otherwise false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current OAParameterCollection to the specified OAParameterCollection starting at the specified destination index.
            </summary>
            <param name="array">The OAParameterCollection that is the destination of the elements copied from the current OAParameterCollection.</param>
            <param name="index">A 32-bit integer that represents the index in the OAParameterCollection at which copying starts.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the OAParameterCollection. 
            </summary>
            <returns>An IEnumerator for the OAParameterCollection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.GetParameter(System.Int32)">
            <summary>
            Returns the DbParameter object at the specified index in the collection.
            </summary>
            <param name="index">The index of the DbParameter in the collection.</param>
            <returns>The DbParameter object at the specified index in the collection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.GetParameter(System.String)">
            <summary>
            Returns DbParameter the object with the specified name.
            </summary>
            <param name="parameterName">The name of the DbParameter in the collection.</param>
            <returns>The DbParameter the object with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the specified Object in the collection.
            </summary>
            <param name="value">The Object to find. </param>
            <returns>The zero-based location of the specified Object that is a OAParameter in the collection. 
            Returns -1 when the object does not exist in the OAParameterCollection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the specified OAParameter with the specified name.
            </summary>
            <param name="parameterName">The case-sensitive name of the OAParameter to find.</param>
            <returns>The zero-based location of the specified OAParameter with the specified case-sensitive name. 
            Returns -1 when the object does not exist in the OAParameterCollection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an Object into the OAParameterCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">An Object to be inserted in the OAParameterCollection.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="value">A Object object to remove from the collection. </param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the OAParameter from the OAParameterCollection at the specified parameter name.
            </summary>
            <param name="parameterName">The name of the OAParameter to remove. </param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the OAParameter from the OAParameterCollection at the specified index.
            </summary>
            <param name="index">The zero-based index of the OAParameter object to remove.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Sets the DbParameter object with the specified name to a new value.
            </summary>
            <param name="parameterName">The name of the DbParameter object in the collection.</param>
            <param name="value">The new DbParameter value.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Sets the DbParameter object at the specified index to a new value. 
            </summary>
            <param name="index">The index where the DbParameter object is located.</param>
            <param name="value">The new DbParameter value.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OAParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a value to the end of the OAParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
            <returns>A OAParameter object.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.Count">
            <summary>
            Gets an Integer that contains the number of elements in the OAParameterCollection.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the ICollection. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether the OAParameterCollection has a fixed size. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the OAParameterCollection is read-only.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether the OAParameterCollection is synchronized. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.Item(System.String)">
            <summary>
            Gets the OAParameter with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter to retrieve.</param>
            <returns>The OAParameter with the specified name.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OAParameterCollection.Item(System.Int32)">
            <summary>
            Gets the OAParameter at the specified index.
            </summary>
            <param name="index">The zero-based index of the parameter to retrieve.</param>
            <returns>The OAParameter at the specified index.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Data.Common.OATransaction">
            <summary>
            Specifies the transaction for an OACommand.
            </summary>
            <remarks>The transaction management for an OAConcection that is obtained from the <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> is done exlusively by the
            context.When a connection is given out by the context a database transaction is already started on it. Any statements that the user executes via 
            this connection are automatically enlisted in this transaction. In order to commit or rollback the transaction you need to call the 
            <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> method respectively.
            <para>It is not allowed to call the <see cref="M:Telerik.OpenAccess.Data.Common.OATransaction.Commit"/> or <see cref="M:Telerik.OpenAccess.Data.Common.OATransaction.Rollback"/> methods on an OATransaction if the transaction is started 
            on a context owned OAConnection.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OATransaction.Commit">
            <summary>
            Commits the underlying transaction. Not supported for a transaction started on a context owned connection.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OATransaction.Rollback">
            <summary>
            Rolls back the underlying transaction. Not supported for a transaction started on a context owned connection.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.Common.OATransaction.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the DbTransaction and optionally releases the managed resources. 
            </summary>
            <param name="disposing">If true, this method releases all resources held by any managed objects that this DbTransaction references.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OATransaction.DbConnection">
            <summary>
            Gets the DbConnection object associated with the transaction.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OATransaction.IsolationLevel">
            <summary>
            Gets the isolation level of this OATransaction. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.Common.OATransaction.Connection">
            <summary>
            Gets OAConnection for this EntityTransaction.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry">
            <summary>
            Controls the association between database types and their converters.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.GetDefaultConverter(System.String)">
            <summary>
            Gets the type of the converter that is to be used for the passed database type.
            </summary>
            <remarks>
            An IAdoTypeConverterFactory is bound to a particular database backend and it's configuration;
            different instances can be returned by this method for the same <paramref name="databaseTypeName"/> parameter
            but different backends.
            </remarks>
            <param name="databaseTypeName">The database type name</param>
            <returns>Converter name that is to be used</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.GetDefaultConverter(System.Type)">
            <summary>
            Gets the type of the converter that is to be used for the passed clr type.
            </summary>
            <remarks>
            An IAdoTypeConverterFactory is bound to a particular database backend and it's configuration;
            different instances can be returned by this method for the same <paramref name="clrType"/> parameter
            but different backends.
            </remarks>
            <param name="clrType">The CLR type (System.String, System.Byte[], etc.)</param>
            <returns>Converter name that is to be used</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.GetConverterName(System.String)">
            <summary>
            Gets the type of the converter based on the passed name.
            </summary>
            <param name="converterName">The name of the converter (short name or assembly qualified name).</param>
            <returns>Type of the converter</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.CreateConverter(Telerik.OpenAccess.Data.TypeConverterName)">
            <summary>
            Convenience method to generate an AdoTypeConverter instance from the passed type.
            </summary>
            <param name="name">The type converter name to use for creation of an instance</param>
            <returns>New <see cref="T:Telerik.OpenAccess.Data.AdoTypeConverter"/> instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.IsBackendConcurrencyColumn(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Checks if column uses backend specific column type for concurrency control.
            </summary>
            <param name="col">The column to check</param>
            <returns><c>True</c> is column is backend CC column</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.IsValidType(System.String)">
            <summary>
            Indicates if the passed database type is known.
            </summary>
            <remarks>
            When a certain type is configured, the validness of the name can be checked with this method.
            </remarks>
            <param name="databaseTypeName">The database type name</param>
            <returns>True is type is known</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.IsBitType(System.String)">
            <summary>
            Gets an indication if the given column/SP parameter type needs real bit treatment.
            </summary>
            <param name="databaseTypeName">The database type name</param>
            <returns><c>True</c> if real bit treatment is required</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.IsBinaryType(System.String)">
            <summary>
            Gets an indication if the given column/SP parameter type corresponds to byte[].
            </summary>
            <param name="databaseTypeName">The database type name</param>
            <returns><c>True</c> if byte[] treatment is required</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.Register(System.Type,Telerik.OpenAccess.Data.TypeConverterName)">
            <summary>
            Registers a given type converter as the converter for a CLR UDT.
            </summary>
            <remarks>
            This allows to populate the CLR type -> type converter map for the UDT types.
            </remarks>
            <param name="clrType">CLR UDT type</param>
            <param name="tcn">Type converter to use</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.GetParameterSql(Telerik.OpenAccess.Data.IDataColumn,System.Type)">
            <summary>
            Gets the parameter SQL that is to be used for this column.
            </summary>
            <param name="column">The column that the parameter is for.</param>
            <param name="clr">The type of the instance that is passed as parameter value.</param>
            <returns>SQL fragment or null when no special handling is required.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.UseUTCForRead">
            <summary>
            Indicates that UTC DateTime values are to be read.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.FloatParameterCast">
            <summary>
            Gets the string to be used for writing out float parameters.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.AvoidCharMin">
            <summary>
            Indicates that the Char.Min is to be avoided with a String.Empty value.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IAdoTypeConverterRegistry.ReplaceOversizedParameter">
            <summary>
            Indicates if parameter instance must be replaced when the size of the actual data is bigger than the Size of the (prepared) parameter.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.DataHolder">
            <summary>
            A data holder for efficiency.
            </summary>
            <remarks>
            The purpose of this structure is to avoid Boxing and to pass Parameters that are used
            often in an efficient manner to the methods of <see cref="T:Telerik.OpenAccess.Data.AdoTypeConverter"/>.
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Read(Telerik.OpenAccess.Data.DataHolder@)"/>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Write(Telerik.OpenAccess.Data.DataHolder@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Reader">
            <summary>
            The data reader that is to be used by the AdoTypeConverter.Read method.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Read(Telerik.OpenAccess.Data.DataHolder@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Position">
            <summary>
            The position of the reader that is to be used by the AdoTypeConverter.Read method.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Read(Telerik.OpenAccess.Data.DataHolder@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Parameter">
            <summary>
            The parameter that is to be filled by the AdoTypeConverter.Write method.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Write(Telerik.OpenAccess.Data.DataHolder@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Command">
            <summary>
            The command for which the parameter is to be filled by the AdoTypeConverter.Write method.
            </summary>
            <remarks>
            The purpose of this field is to provide a way to access the underlying connection when it is required for
            setting the parameter (e.g. for Oracle LOBs).
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Data.AdoTypeConverter.Write(Telerik.OpenAccess.Data.DataHolder@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.NoValue">
            <summary>
            Indicates a NULL value from the database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Box">
            <summary>
            Indicates whether boxing is to be performed and values are to be stored in the objectValue field.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Data.DataHolder.Exact">
            <summary>
            Indicates whether unsigned->signed conversion is to be avoided during reading.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.ObjectValue">
            <summary>
            Values that are not of type string and are not of a value type that is storable 
            in the val field (non boxed case); Boxed case: all values except string values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.StringValue">
            <summary>
            String value holder.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.UByteValue">
            <summary>
            Byte storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.Int16Value">
            <summary>
            Short storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.Int32Value">
            <summary>
            Int storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.Int64Value">
            <summary>
            Long storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.SByteValue">
            <summary>
            SByte storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.UInt16Value">
            <summary>
            UInt16 storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.UInt32Value">
            <summary>
            UInt32 storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.UInt64Value">
            <summary>
            UInt64 storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.DecimalValue">
            <summary>
            Decimal storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.SingleValue">
            <summary>
            Float storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.DoubleValue">
            <summary>
            Double storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.GuidValue">
            <summary>
            Guid storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.DateTimeValue">
            <summary>
            DateTime storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.CharValue">
            <summary>
            Character storage
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.DataHolder.BooleanValue">
            <summary>
            Boolean storage
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.IDataColumn">
            <summary>
            Provides information about a database column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.ResolvedSqlType">
            <summary>
            Gets the database specific column type.If this column is based on a User Defined Type, the original Sql type is returned
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.ResolvedLength">
            <summary>
            Gets the length of the column (logical length).If this column is based on a User Defined Type, the length defined in the UDT is returned
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.ResolvedScale">
            <summary>
            Gets the scale of the column.If this column is based on a User Defined Type, the scale defined in the UDT is returned
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.IsNullable">
            <summary>
            Indicates if the column is nullable
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.IsPrimaryKey">
            <summary>
            Indicates if the column is a primary key column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.IsBackendCalculated">
            <summary>
            Indicates if the column is a database calculated column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.UDTName">
            <summary>
            Gets the name of the UDT if this column is based on a User Defined Type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.IDataColumn.AssemblyQualifiedName">
            <summary>
            If this instance represents a column based on a UDT, gets the Assembly qualified name of the class that implements the User Defined Type 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Data.TypeConverterName">
            <summary>
            Represents an AdoTypeConverter during configuration.
            </summary>
            <seealso cref="T:Telerik.OpenAccess.Data.AdoTypeConverter"/>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="converterName">Name of the converter.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.#ctor(System.Type)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.ToType">
            <summary>
            Returns the type of the named converter.
            </summary>
            <returns>Type instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Data.TypeConverterName.op_Implicit(System.Type)~Telerik.OpenAccess.Data.TypeConverterName">
            <summary>
            Performs an implicit conversion from System.Type" to TypeConverterName.
            </summary>
            <param name="type">The type.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Data.TypeConverterName.IsUnspecified">
            <summary>
            Gets a value indicating whether the converter is unspecified.
            </summary>
            <value>
            	<c>true</c> if the converter is unspecified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Data.TypeConverterName.PrintName">
            <summary>
            Gets the print name of this converter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.TypeConverterName.Unspecified">
            <summary>
            Gets an invalid type converter name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Data.TypeConverterName.IsResolved">
            <summary>
            Gets an indication if the type is already resolved.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1">
            <summary>
            Provides calculations on metric counter values, tranforming them into new types
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.src">
            <summary>
            Source of the metrics
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.count">
            <summary>
            Target collection count
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.values">
            <summary>
            Storage for modified values
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.content">
            <summary>
            Storage for calculated result
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.#ctor(Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection)">
            <summary>
            Constructs an instance.
            </summary>
            <param name="source">The read-only source collection of metric values.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.GetMetric(System.String)">
            <summary>
            Gets the metric values of the given name.
            </summary>
            <param name="metricName">Target type property name or source metric name or #temporary name</param>
            <returns>Metric values of target collection count length</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.CheckProperty(System.String,System.String)">
            <summary>
            Checks the validity of a name
            </summary>
            <param name="property">Property, Metric or temporary name</param>
            <param name="logName">Logical name</param>
            <returns>Validated name</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.CheckProperty(System.String[],System.Int32,System.String)">
            <summary>
            Checks property name at the given index
            </summary>
            <param name="property">Name array</param>
            <param name="idx">Index in array</param>
            <param name="logName">Logical property name</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.CheckLength(System.Int32[],System.String)">
            <summary>
            Checks that the metric values are of target collection length
            </summary>
            <param name="data">Array to check</param>
            <param name="logName">Logical property name</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.CheckArguments(System.String[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments array for a minimum and maximum length.
            </summary>        
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Import(System.String,System.Int32[])">
            <summary>
            Imports a set of values into a property
            </summary>
            <param name="targetProperty">Target property name</param>
            <param name="source">Source set of values</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Calculate(System.String,System.String,System.String[])">
            <summary>
            Provides a calculation of the metrics and properties into new property values.
            </summary>
            <remarks>
            The basic idea is to operate on (one or two) sets of data and stream process them into a new
            set of data that can be assigned to a target property field later or into a temporary field (#name).
            <para>
            The following operations are currently defined:
            <list type="table">
            <listheader>
            <term><paramref name="calculation"/></term> 
            <description>Description</description> 
            </listheader>
            <item>
            <term>=</term>
            <description><code>t = source</code></description>
            </item>
            <item>
            <term>+</term>
            <description><code>t = a + b</code></description>
            </item>
            <item>
            <term>-</term>
            <description><code>t = a - b</code></description>
            </item>
            <item>
            <term>*</term>
            <description><code>t = a * b</code></description>
            </item>
            <item>
            <term>DeltaRatio(a,a+b)</term>
            <description>Calculate deltas for all a and b values so that <code>t[i] = x[i]-x[i-1]</code> with i the index in the time line.
                         Then calculate <code>t = (a * 100) / (a+b)</code></description>
            </item>
            <item>
            <term>Ratio(a,a+b)</term>
            <description>Calculate <code>t = (a * 100) / (a+b)</code></description>
            </item>        
            <item>
            <term>Ratio(a,b)</term>
            <description>Calculate <code>t = (a * 100) / b</code></description>
            </item>          
            <item>
            <term>MetricDelta</term>
            <description>Calculate <code>t[i] = s[i] - s[i-1]</code> with i the index in the time line</description>
            </item>          
            <item>
            <term>MetricMin</term>
            <description>Calculate <code>t[i] = min(s[i],s[i-1])</code> with i the index in the time line</description>
            </item>          
            <item>
            <term>MetricMax</term>
            <description>Calculate <code>t[i] = max(s[i],s[i-1])</code> with i the index in the time line</description>
            </item>          
            <item>
            <term>MetricAbs</term>
            <description>Calculate <code>t[i] = abs(s[i],s[i-1])</code> with i the index in the time line</description>
            </item>          
            </list>
            </para>
            </remarks>
            <param name="targetProperty">Target property name</param>
            <param name="calculation">Indication of calculation method to use (+,-,*,=,...).</param>
            <param name="metric">The needed parameters (a, b, source).</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.SetTimeStamp(System.String)">
            <summary>
            Registers the DateTime property at the destination class representing the timestamp of the instance.
            </summary>
            <param name="timestampPropertyName">The property name of type DateTime</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Add(System.Int32[],System.Int32[])">
            <summary>
            Method ret = left + right
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Minus(System.Int32[],System.Int32[])">
            <summary>
            Method ret = left - right
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Multiply(System.Int32[],System.Int32[])">
            <summary>
            Method ret = left * right
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Ratio2(System.Int32[],System.Int32[])">
            <summary>
            Method ret = a / (a + b)
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.DeltaRatio2(System.Int32[],System.Int32[])">
            <summary>
            Method ret = a / (a + b) for delta a and delta b
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Ratio(System.Int32[],System.Int32[])">
            <summary>
            Method ret = a / b
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.PercentRatioAPlusB(System.Int32,System.Int32)">
            <summary>
            Ratio implementation a/(a+b)
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.PercentRatio(System.Int32,System.Int32)">
            <summary>
            Ratio implementation a/b
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Delta(System.Int32[])">
            <summary>
            Method ret = x(t) - x(t-1)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Max(System.Int32[])">
            <summary>
            Method ret = max(x)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Min(System.Int32[])">
            <summary>
            Method ret = min(x)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Abs(System.Int32[])">
            <summary>
            Method ret = abs(x)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.Produce(System.Collections.Generic.Dictionary{System.String,System.Int32[]},System.Int32)">
            <summary>
            Creates the result list
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsTransformation`1.GetContent">
            <summary>
            Gets the calculated content
            </summary>
            <returns>Calculated content</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.History">
            <summary>
            Provides historic execution information for application behavior monitoring.
            </summary>
            <remarks>
            The source of historic execution information is an in-memory ring buffer
            of events and metric data. Alternativly, historic data can be written by the
            log downloader to files, which then can be reloaded later.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.ContextMetrics"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.#ctor(Telerik.OpenAccess.OpenAccessContextBase)">
            <summary>
            Constructs a new instance for obtaining historic execution information.
            </summary>
            <param name="from">The context for which the information is to be obtained.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.#ctor(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Constructs a new instance for obtaining historic execution information.
            </summary>
            <param name="from">The context for which the information is to be obtained.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.#ctor(Telerik.OpenAccess.Database)">
            <summary>
            Constructs a new instance for obtaining historic execution information.
            </summary>
            <param name="from">The context for which the information is to be obtained.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.#ctor(System.String)">
            <summary>
            Constructs a new instance for obtaining historic execution information.
            </summary>
            <param name="from">Name of the file from which the information is to be read.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Returns the filtered aggregated metric counters for the used database instance.
            </summary>
            <remarks>
            The metric counters can be used to obtain runtime behavior statistics in order to aid 
            application monitoring. The aggregated counters returned by <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/> are 
            affected by the actions of all context instances using the same database as this instance.
            <para>
            To obtain non-aggregated metric counter values for this context instance, please refer to
            the <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetContextMetrics(System.Boolean)"/> method.
            </para>
            <para>
            In order to use aggregated metric counter value for the database, the metric snapshot feature must have been turned on
            by specifying the interval of the snapshots and the capacity. This can be achieved with the
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricInterval"/> and 
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricCapacity"/> properties.
            </para>
            </remarks>
            <param name="fromExclusive">When given, the start time exclusive filter to use (UTC required)</param>
            <param name="toInclusive">When given, the inclusive end time filter to use (UTC required)</param>
            <param name="count">When given, limits the number of found elements from the start (value greater than 0) or from the end (value smaller than 0).</param>
            <returns>New metric instance that holds the multiple aggregated counter values or <c>null</c> when no metrics are found</returns>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Returns the filtered aggregated events for the used database instance.
            </summary>
            <remarks>
            The event collections can be used to observe the runtime behavior wrt. internal pooling activity, 
            SQL execution, configuration etc.
            </remarks>
            <param name="fromExclusive">When given, the start time exclusive filter to use (UTC required)</param>
            <param name="toInclusive">When given, the inclusive end time filter to use (UTC required)</param>
            <param name="count">When given, limits the number of found elements from the start (value greater than 0) or from the end (value smaller than 0).</param>
            <returns>New instance that holds the multiple aggregated events or <c>null</c> when no events are found</returns>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns the filtered aggregated events for the used database instance.
            </summary>
            <remarks>
            The event collections can be used to observe the runtime behavior wrt. internal pooling activity, 
            SQL execution, configuration etc.
            </remarks>
            <param name="fromExclusive">The start event id exclusive filter to use.</param>
            <param name="count">When given, limits the number of found elements from the start (value greater than 0) or from the end (value smaller than 0).</param>
            <returns>New instance that holds the multiple aggregated events or <c>null</c> when no events are found</returns>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.GetContextMetrics(System.Boolean)">
            <summary>
            Returns the metric counters for this context and optionally resets the internal values.
            </summary>
            <remarks>
            The metric counters can be used to obtain runtime behavior statistics in order to aid 
            application monitoring. The counters returned by <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetContextMetrics(System.Boolean)"/> are affected by
            the actions that this context performs. 
            <para>
            To obtain aggregated metric counter values for the used database instance, please refer to
            the <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/> method.
            </para>
            </remarks>
            <param name="reset">When <c>True</c>, the internal counter values are reset.</param>
            <returns>New metric instance that holds the context specific values</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.Correlate(Telerik.OpenAccess.OpenAccessContextBase,System.String)">
            <summary>
            Writes a correlation event into the event log.
            </summary>
            <remarks>
            Correlation events can be used to correlate the identifiers created by the Telerik Data Access runtime
            with application specific data, like use case identifiers, application parts etc.
            </remarks>
            <param name="context">The context for which a correlation should be made.</param>
            <param name="applicationSpecific">The application given data or <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.OpenDatabases">
            <summary>
            Returns a list of active database instances.
            </summary>
            <remarks>
            If no database, scope or context instance is available, the list of opened database instances
            defines the possible history entry points.
            </remarks>
            <returns>String array with connection names of opened database instances.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.FromDatabaseName(System.String)">
            <summary>
            Create an History object from a registered database name.
            </summary>
            <remarks>Use <see cref="M:Telerik.OpenAccess.Diagnostics.History.OpenDatabases"/> to get the list of names.</remarks>
            <param name="databaseName">The registered database name.</param>
            <returns>A new history instance.</returns>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.OpenDatabases"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.GetHistoryFileInfo(System.IO.FileInfo)">
            <summary>
            Returns information about a log file.
            </summary>
            <param name="fileInfo">The log file information</param>
            <returns>Log file content information</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.Merge(Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection,Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection)">
            <summary>
            Concats to metrics collection to one new, ordered by timestamp
            </summary>
            <param name="source1">First metrics collection to merge</param>
            <param name="source2">Second metrics collection to merge</param>
            <returns>A new collection containing the metrics of both source collections, ordered by timestamp.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.History.Merge(Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection,Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection)">
            <summary>
            Concats to event collection to one new, ordered by timestamp
            </summary>
            <param name="source1">First event collection to merge</param>
            <param name="source2">Second event collection to merge</param>
            <returns>A new collection containing the events of both source collection, ordered by timestamp.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.HistoryFileInfo">
            <summary>
            The log file information
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.HistoryFileInfo.ToString">
            <summary>
            Returns the information in a formatted way
            </summary>
            <returns>Information in a formatted way</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileInfo.Filename">
            <summary>
            Name of the log file
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileInfo.FileType">
            <summary>
            Type of the log file
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileInfo.Chunks">
            <summary>
            Detailed information about the several parts of a log file
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.HistoryFileType">
            <summary>
            Type of a log file
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.HistoryFileType.Events">
            <summary>
            Log file contains event information
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.HistoryFileType.Metrics">
            <summary>
            Log file contains metric information
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.HistoryFileChunk">
            <summary>
            Information about a log file part.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.ToString">
            <summary>
            Returns the infoormation in a formatted way
            </summary>
            <returns>Information in a formatted way</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.FirstEntry">
            <summary>
            Start timestamp
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.LastEntry">
            <summary>
            End timestamp
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.FirstId">
            <summary>
            Start entry id
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.LastId">
            <summary>
            End entry id
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.Offset">
            <summary>
            Offset in the log file
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.HistoryFileChunk.EntryCount">
            <summary>
            Amount of entries in this part
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.MetricStatics">
            <summary>Static definitions for metrics</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IMetricProvider">
            <summary>
            Implementation interface to sample the metric values.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.ContextMetrics">
            <summary>
            Context specific metric values.
            </summary>
            <remarks>
            Instances of this class hold metric counter values for various SQL operations.
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetContextMetrics(System.Boolean)"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.ContextMetrics.#ctor(System.Int32[])">
            <summary>
            Constructs a new instance
            </summary>
            <param name="metrics">Metric values</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.ContextMetrics.GetName(System.Int32)">
            <summary>
            Gets the name of the metric with the given index.
            </summary>
            <remarks>
            The number of metric values can be obtained from the <see cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length"/> property.
            </remarks>
            <param name="metricIndex">Metric index (0...<see cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length"/>-1)</param>
            <returns>Name of the metric</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.ContextMetrics.GetIndex(System.String)">
            <summary>
            Gets the index of the metric with the given name.
            </summary>
            <remarks>
            The number of metric values can be obtained from the <see cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length"/> property.
            </remarks>
            <param name="metricName">Metric name</param>
            <returns>Index of the metric</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.ContextMetrics.Ratio(System.Int64,System.Int64)">
            <summary>
            Calculates the percentage of x/all.
            </summary>
            <param name="x">Nominator</param>
            <param name="all">Denominator</param>
            <returns>Percentage</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Query">
            <summary>
            Gets the number of SQL queries executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Delete">
            <summary>
            Gets the number of SQL delete statements executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Insert">
            <summary>
            Gets the number of SQL insert statements executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Update">
            <summary>
            Gets the number of SQL update statements executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_FetchedRows">
            <summary>
            Gets the number of rows fetched.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Commit">
            <summary>
            Gets the number of SQL commits executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Rollback">
            <summary>
            Gets the number of SQL rollbacks executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Flush">
            <summary>
            Gets the number of flush operations to the relational server.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_CommitError">
            <summary>
            Gets the number of errors during SQL commit operations.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_FlushError">
            <summary>
            Gets the number of errors during flush operations.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_QueryError">
            <summary>
            Gets the number of errors during SQL query execution.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_FetchError">
            <summary>
            Gets the number of errors during fetch of the query result sets.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Sql_Enlist">
            <summary>
            Gets the number of enlistments into system transactions.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length">
            <summary>
            Gets the number of metric values for this instance.
            </summary>
            <remarks>
            The metric values can be retrieved under their metric index.</remarks>
            <seealso cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Item(System.Int32)"/>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Item(System.Int32)">
            <summary>
            Gets the metric value with the given metric index.
            </summary>
            <remarks>
            The number of metric values can be obtained from the <see cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length"/> property.
            </remarks>
            <param name="metricIndex">Metric index (0...<see cref="P:Telerik.OpenAccess.Diagnostics.ContextMetrics.Length"/>-1)</param>
            <returns>Metric value</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.DatabaseMetrics">
            <summary>
            Aggregated metric values for a given point in time.
            </summary>
            <remarks>
            Instance of this class hold database metric information for a given timestamp.
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.GetHashCode">
            <summary>
            Provides a hash code based on the timestamp key.
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Equals(System.Object)">
            <summary>
            Compares two instance based on their timestamp keys.
            </summary>
            <param name="obj">Database metrics or DateTime value</param>
            <returns><c>True</c> when the timestamp key equals obj</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Timestamp">
            <summary>
            Gets the timestamp key for the metrics
            </summary>
            <value>Timestamp of the first entry</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_ObtainedWait">
            <summary>
            Gets the number connections that could not be obtained wait-free.
            </summary>
            <remarks>
            This value indicates how often a connection could not be obtained immediately from the connection
            pool because the pool was empty and a blocking behavior was configured.
            </remarks>
            <value>Number of waits</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Open">
            <summary>
            Gets the number of opened connections.
            </summary>
            <value>Number of opened connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Close">
            <summary>
            Gets the number of closed connections.
            </summary>
            <value>Number of closed connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Bad">
            <summary>
            Gets the number of connections found to be bad (not validatable).
            </summary>
            <value>Number of connections found to be in an non-validatable or closed state</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Validate">
            <summary>
            Gets the number of validated connections.
            </summary>
            <remarks>
            A connection is validated when an error occurred.
            </remarks>
            <value>Number of connection validations</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Expired">
            <summary>
            Gets the number of connections that expired (pooled/unpooled to often).
            </summary>
            <remarks>
            A connection has only a certain life time and is closed when a configurable number of
            pool/unpool events have occurred.
            </remarks>
            <value>Number of expired connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Timeout">
            <summary>
            Gets the number of connections that have been aborted due to a timeout situation.
            </summary>
            <remarks>
            Connections have a configurable timeout. When the timeout is reached during an active operation,
            the connection is aborted (closed). This is to protect the relational database server from 
            query results that are not fetched in a timely manner.
            </remarks>
            <value>Value of connections that timed out</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Obtained">
            <summary>
            Gets the number of connections obtained from the connection pool.
            </summary>
            <value>Number of connections given out by the pool</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_ObtainedFail">
            <summary>
            Gets the number of failures because the connection pool was empty.
            </summary>
            <value>Number of failures to obtain a a connection because the connection pool was empty</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Active">
            <summary>
            Gets the number currently used connections.
            </summary>
            <value>Number of currently active connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_MaxActive">
            <summary>
            Gets the maximum number of concurrently used connections.
            </summary>
            <value>Number of maximum concurrently used connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Connection_Idle">
            <summary>
            Gets the number of currently idle connections in the connection pool.
            </summary>
            <value>Number of idle connections</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_Open">
            <summary>
            Gets the number of allocated contexts.
            </summary>
            <value>Number of allocated contexts</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_MaxActive">
            <summary>
            Gets the maximum number of concurrently used contexts.
            </summary>
            <value>Maximum number of concurrently used contexts</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_Active">
            <summary>
            Gets the number of currently active contexts.
            </summary>
            <value>Number of active contexts</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_Idle">
            <summary>
            Gets the number of currently idle contexts in the context pool.
            </summary>
            <value>Number of idle contexts</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_Obtained">
            <summary>
            Gets the number of context obtained from the pool.
            </summary>
            <value>Number of contexts obtained from the context pool</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Context_Returned">
            <summary>
            Gets the number of contexts returned to the pool.
            </summary>
            <value>Number of contexts returned to the pool</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Hit">
            <summary>
            Gets the number of successful read attempts from the object cache.
            </summary>
            <value>Number of object cache successful object cache hits</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Miss">
            <summary>
            Gets the number of unsuccessful read attempts from the object cache.
            </summary>
            <value>Number of unsuccessful object cache hits</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Add">
            <summary>
            Gets the number of objects that were added to the object cache.
            </summary>
            <value>Number of entries that got added to the object cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Remove">
            <summary>
            Gets the number of objects that got evicted from the object cache.
            </summary>
            <value>Number of entries that got evicted from the object cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Entries">
            <summary>
            Gets the current number of entries in the object cache.
            </summary>
            <value>Number of entries currently in the object cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_Max">
            <summary>
            Gets the configured maximum number of entries in the object cache.
            </summary>
            <value>Configured maximum of entries in the object cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_HitRatio">
            <summary>
            Gets the ratio of hits/attempts for the object cache. 
            </summary>
            <value>Hits / (Hits+Misses)</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Object_FillRatio">
            <summary>
            Gets the fill ratio of the state cache.
            </summary>
            <value>Entries / Configured Maximum</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Hit">
            <summary>
            Gets the number of successful read attempts from the query cache.
            </summary>
            <value>Number of successful query cache hits</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Miss">
            <summary>
            Gets the number of unsuccessful read attempts from the query cache.
            </summary>
            <value>Number of failed attempts to read from the query cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Add">
            <summary>
            Gets the number of queries that were added to the query cache.
            </summary>
            <value>Number of times an entry was added to the query cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Remove">
            <summary>
            Gets the number of queries that got evicted from the query cache.
            </summary>
            <value>Number of times an entry was evicted from the query cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Entries">
            <summary>
            Gets the current number of entries in the query cache.
            </summary>
            <value>Current number of entries in the query cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_Max">
            <summary>
            Gets the configured maximum number of entries in the query cache.
            </summary>
            <value>Configured maximum number of entries in the query cache</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_HitRatio">
            <summary>
            Gets the ratio of hits/attempts for the query cache. 
            </summary>
            <value>Hits / (Misses + Hits)</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Query_FillRatio">
            <summary>
            Gets the fill ratio of the query cache.
            </summary>
            <value>Entries / Configured Maximum</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Cluster_Send">
            <summary>
            Gets the number of eviction messages that were send into the cache cluster.
            </summary>
            <value>Number of eviction messages that got sent into the cache cluster</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.L2Cache_Cluster_Receive">
            <summary>
            Gets the number of eviction messages that were received from the cache cluster.
            </summary>
            <value>Number of eviction messages that were receied from the cache cluster</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Events_Count">
            <summary>
            Gets the number of log events (global for all databases).
            </summary>
            <value>Number of events</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetrics.Events_LastId">
            <summary>
            Gets the last log event identifier for this database.
            </summary>
            <value>Currently highest event id</value>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection">
            <summary>
            Container for a collection of aggregated database metric values.
            </summary>
            <remarks>
            Telerik Data Access provides a number of performance related metrics, that can be obtained through the
            <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/> method to observe
            the runtime behavior of an application.
            <para>
            The metrics are ordered by their timestamp value (DateTime UTC format) and provide a number of values. The names
            (implying their meaning) of the values can be obtained from the <see cref="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.MetricNames"/> properties,
            and the time line for a given name can be retrieved with the <see cref="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetMetric(System.String)"/> method.
            </para>
            <para>
            Functionality to store or load metric data is available from the <see cref="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Write(System.IO.BinaryWriter)"/> and 
            <see cref="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Read(System.IO.BinaryReader)"/> methods.
            </para>
            <para>
            The timespan between two metric snapshots can be obtained from the <see cref="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.MetricInterval"/>
            property in milliseconds.
            </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.ContextMetrics"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetrics"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.#ctor(System.DateTime[],System.Int32[][],System.String,System.Int32)">
            <summary>
            Constructs a new metrics instance
            </summary>
            <param name="dt">DateTime timestamps</param>
            <param name="metrics">Raw metric values</param>
            <param name="identifier">Database identifier</param>
            <param name="intervalms">Metrics interval in milliseconds</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetEnumerator">
            <summary>
            Returns a new database metrics enumerator 
            </summary>
            <returns>New enumerator for <see cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetrics"/> snapshots.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a new database metrics enumerator 
            </summary>
            <returns>New enumerator for <see cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetrics"/> snapshots.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetMetric(System.String)">
            <summary>
            Gets the value series for a given metric name.
            </summary>
            <param name="metricName">The name for the metric values.</param>
            <returns>The values for the named metric ordered be timestamp.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.IsMetricName(System.String)">
            <summary>
            Indicates whether the given name is a known metric name.
            </summary>
            <param name="name">Name to test</param>
            <returns><c>True</c> is name is a known metric</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetRawMetric(System.Int32,System.Int32)">
            <summary>
            Gets the raw value for a given metric and a given snapshot.
            </summary>
            <param name="timeIndex">Snapshot index, must be in the range 0...<see cref="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Count"/>-1</param>
            <param name="metricIndex">Metric index, must be in the range 0...<see cref="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.MetricNames"/>.Length-1</param>
            <returns>Raw metric value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Search(System.DateTime)">
            <summary>
            Gets the index position for the given timestamp.
            </summary>
            <param name="dt">The DateTime to look for</param>
            <returns>Index for the timestamp</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Read(System.IO.BinaryReader)">
            <summary>
            Deserializes an instance from the binary reader.
            </summary>
            <param name="reader">The reader the collection is to be read from.</param>
            <returns>New <see cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/> instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Write(System.IO.BinaryWriter)">
            <summary>
            Serializes this instance to the given binary writer.
            </summary>
            <param name="writer">The writer this instance is serialized to.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetData(System.Int32)">
            <summary>
            Gets the internal data.
            </summary>
            <param name="p">Index</param>
            <returns>Internal data</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetTimestamp(System.Int32)">
            <summary>
            Gets the internal key.
            </summary>
            <param name="p">Index</param>
            <returns>Internal key</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Identifier">
            <summary>
            Gets the database identifier for this metric collection.
            </summary>
            <value>
            String that identifies the database this collection was obtained from.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Version">
            <summary>
            Gets the current version of the metrics collection
            </summary>
            <value>
            Number for versioning purposes
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.LastTimestamp">
            <summary>
            Gets the last timestamp this collection contains.
            </summary>
            <value>
            Timestamp value of the last metric snapshot that is contained.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.FirstTimestamp">
            <summary>
            Gets the first timestamp this collection contains.
            </summary>
            <value>
            Timestamp value of the first metric snapshot that is contained.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.MetricInterval">
            <summary>
            Gets the interval time between two metric snapshots in milliseconds.
            </summary>
            <value>
            The interval between two metric snapshots in milliseconds.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Count">
            <summary>
            Gets the number of metric snapshots.
            </summary>
            <value>
            Number of metric snapshots in this collection.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.Item(System.Int32)">
            <summary>
            Gets the indexed metric snapshot.
            </summary>
            <param name="snapshotIndex">Index of the snapshot</param>
            <returns>Metric snapshot from the given index.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.MetricNames">
            <summary>
            Gets the names of the available metrics in metric index order
            </summary>
            <remarks>
            The names under which a series of particular metric values can be obtained from the <see cref="M:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection.GetMetric(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection">
            <summary>
            Container for a collection of aggregated database events.
            </summary>
            <remarks>
            Telerik Data Access provides <see cref="T:Telerik.OpenAccess.Diagnostics.ITraceEvent"/> instances to observe the runtime behavior of an application.
            <para>
            The obtained events are ordered by their timestamp value (DateTime UTC format).
            </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetrics"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseEvents(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.#ctor(Telerik.OpenAccess.Diagnostics.ITraceEvent[],System.String)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="ev">The contained events.</param>
            <param name="ident">Database identifier</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.GetEnumerator">
            <summary>
            Returns a new database events enumerator 
            </summary>
            <returns>New enumerator for <see cref="T:Telerik.OpenAccess.Diagnostics.ITraceEvent"/>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a new database events enumerator 
            </summary>
            <returns>New enumerator for <see cref="T:Telerik.OpenAccess.Diagnostics.ITraceEvent"/>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.Write(System.IO.BinaryWriter)">
            <summary>
            Serializes the managed events to a binary writer.
            </summary>
            <param name="writer">The binary writer used to serialize the events to</param>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.Identifier">
            <summary>
            Gets the database identifier for this event collection.
            </summary>
            <value>
            String that identifies the database this collection was obtained from.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.LastTimestamp">
            <summary>
            Gets the last timestamp this collection contains.
            </summary>
            <value>
            Timestamp value of the last event that is contained.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.FirstTimestamp">
            <summary>
            Gets the first timestamp this collection contains.
            </summary>
            <value>
            Timestamp value of the firstevent that is contained.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.Count">
            <summary>
            Gets the number of events.
            </summary>
            <value>
            Number of events in this collection.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.DatabaseEventsCollection.Item(System.Int32)">
            <summary>
            Gets the indexed event.
            </summary>
            <param name="eventIndex">Index of the event</param>
            <returns>Event from the given index.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.MetricLoader">
            <summary>
            Loads Telerik Data Access Metrics from files
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.MetricLoader.#ctor(System.IO.FileInfo[])">
            <summary>
            Constructs a new instance. Filenames should be orderd by time, the oldest data should be first
            </summary>
            <param name="filenames">File information for the files to load (oldest first)</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.MetricLoader.Next">
            <summary>
            Tries to read minimal amount of metrics.
            </summary>
            <returns>The next metric.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.IContextEvents">
             <summary>
             Provides change tracking events for modifications of persistent objects.
             </summary>
             <remarks>
             This interface provides events which can be used to get track changes on
             persistent objects.
             Such events can be used to implement custom change tracking models.
             <para>
             An instance of this interface is always bound to one 
             <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance. It 
             can be obtained from the <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.Events"/> property.
             </para>
             </remarks>
             <example>
             The following example attaches tracking to all events. Please note, that
             all events are tracked in their -ing form (the event before an action occurs)
             except the Added; this is because the object identity is only available after
             the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.Add(System.Object)"/> method has been executed.
             The event handler are directly implemented in the generated context class by 
             adding a new partial class with the same name to the project.
             <code>
                public partial class EntitiesModel
                {
                    System.IO.TextWriter log;
                    public EntitiesModel(System.IO.TextWriter logFile)
                        : this()
                    {
                        this.log = logFile;
                    }
            
                    public void Start()
                    {
                        Events.Added += new AddEventHandler(Add);
                        Events.Changing += new ChangeEventHandler(Change);
                        Events.Removing += new RemoveEventHandler(Remove);
                        Events.Refreshing += new RefreshEventHandler(Refresh);
                    }
            
                    public void Stop()
                    {
                        Events.Added -= new AddEventHandler(Add);
                        Events.Changing -= new ChangeEventHandler(Change);
                        Events.Removing -= new RemoveEventHandler(Remove);
                        Events.Refreshing -= new RefreshEventHandler(Refresh);
                    }
            
                    private void Change(object sender, ChangeEventArgs args)
                    {
                        ObjectKey key = CreateObjectKey(args.PersistentObject);
                        log.WriteLine("&lt;Changing oid='" + key.ToString() +
                                          "' field='" + args.FieldName +
                                          "' oldValue='" + args.OldValue +
                                          "' newValue='" + args.NewValue +
                                          "' /&gt;");
                    }
                    private void Add(object sender, AddEventArgs args)
                    {
                        ObjectKey key = CreateObjectKey(args.PersistentObject);
                        log.WriteLine("&lt;Added oid='" + key.ToString() + "' /&gt;");
                    }
                    private void Remove(object sender, RemoveEventArgs args)
                    {
                        ObjectKey key = CreateObjectKey(args.PersistentObject);
                        log.WriteLine("&lt;Removing oid='" + key.ToString() + "' /&gt;");
                    }
                    private void Refresh(object sender, RefreshEventArgs args)
                    {
                        ObjectKey key = CreateObjectKey(args.PersistentObject);
                        log.WriteLine("&lt;Refreshing oid='" + key.ToString() + "' /&gt;");
                    }
            
                }
             </code>
             The method to test the output to console look like:
             <code>
                class Program
                {
                    static void Main(string[] args)
                    {
                        using (var context = new EntitiesModel(Console.Out))
                        {
                            context.Start(); // writes modifications to the Console
                            Region p = new Region()
                            {
                                RegionID = 128,
                                RegionDescription = "Air"
                            }; // some persistent class
                            context.Add(p); // fires the Added event
                            context.SaveChanges();
            
                            p.RegionDescription = "All flying companies";// fires the Changing event
                            context.Refresh(RefreshMode.OverwriteChangesFromStore, p); // fires the Refreshing event
                            context.Delete(p); // fires the Removing event
                            context.SaveChanges();
                            context.Stop();
                        }
                    }
                }
             </code>
             </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Changing">
            <summary>
            Occurs before a field of a persistent object is changed by the application.
            </summary>
            <remarks>
            The Changing event is raised before the new value of a field
            is assigned to the field. 
            <para>It is possible to avoid the assignment
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Changed">
            <summary>
            Occurs after a field of a persistent object has been changed by the application.
            </summary>
            <remarks>
            The Changed event is raised after the new value of a field
            has been assigned to the field. 
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Adding">
            <summary>
            Occurs before a persistent object is added to the object context.
            </summary>
            <remarks>
            The Adding event is raised before the object is added to an <see cref="T:Telerik.OpenAccess.IObjectContext"/>
            instance. 
            <para>It is possible to avoid the persisting of an object
            by throwing an exception.
            </para>
            <para>
            Please note, that the retrieval of the (possibly database-assigned) object
            identity is not possible before the object is actually known to the object context.
            When this <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">object identity retrieval</see> is 
            required, the <see cref="E:Telerik.OpenAccess.IContextEvents.Added"/> event should be used.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Added">
            <summary>
            Occurs after an object was marked as to be persisted by the object context.
            </summary>
            <remarks>
            The Added event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been added to the <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Removing">
            <summary>
            Occurs before a persistent object is removed from the object context.
            </summary>
            <remarks>
            The Removing event is raised before the object is removed the <see cref="T:Telerik.OpenAccess.IObjectContext"/>
            instance. 
            <para>It is possible to avoid the deletion of a persistent object
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Removed">
            <summary>
            Occurs after a persistent object was marked as to be removed from the object context.
            </summary>
            <remarks>
            The Removed event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been removed from the <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            <para>
            Please note, that an access of the field values of a removed persistent object is 
            not possible. When this access is required, the <see cref="E:Telerik.OpenAccess.IContextEvents.Removing"/> event should be used.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Refreshing">
            <summary>
            Occurs before a persistent object is refreshed from the database.
            </summary>
            <remarks>
            The Refreshing is raised occurs before the object is reloaded from the database.
            <para>It is possible to avoid the refreshing of a persistent object
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.Refreshed">
            <summary>
            Occurs after a persistent object was refreshed from the database.
            </summary>
            <remarks>
            The Refreshed event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been refreshed from the database.
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.IContextEvents.ObjectConstructed">
            <summary>
            Occurs after an object has been constructed by Telerik Data Access runtime.
            </summary>
            <remarks>
            The events is fired after Telerik Data Access has materialized an entity instance.
            This can happen if an object has been loaded using GetObjectByKey() method, 
            as results of a LINQ query or after a navigation property is loaded (either lazily or eagerly).
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.ILevelOneCache">
            <summary>
            The level one cache is the cache directly bound to the context.
            </summary>
            <remarks>
            The context caches all new, dirty and deleted objects since the last
            SaveChanges or ClearChanges call. 
            <para>
            All clean data is only held by a special
            structure to ensure the uniqueness of all entities in one context. The type of references from this 
            structure can be controlled by the <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CacheReferenceType"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelOneCache.Release(System.Object)">
            <summary>
            Marks the entity as not longer needed in this context.
            </summary>
            <remarks>
            If it is possible to get rid of the data inside the entity, it is released. 
            If no references to the entity exists, the garbage collector can collect it.
            If the entity is new, deleted or changed, this call does nothing.
            </remarks>
            <param name="entity">The entity to be marked as not longer needed.</param>
            <exception cref="T:System.ArgumentNullException">'entity' cannot be null.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelOneCache.ReleaseAll">
            <summary>
            Marks all entities managed by the context as not longer needed.
            </summary>
            <remarks>
            If it is possible to get rid of the data inside the entity, it is released. 
            If no references to the entity exists, the garbage collector can collect it.
            If the entity is new, deleted or changed, this call does not change that.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelOneCache.ReleaseAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Marks the entities as not longer needed in this context.
            </summary>
            <remarks>
            If it is possible to get rid of the data inside the entities, it is released. 
            If no references to the entities exist, the garbage collector can collect them.
            If an entity is new, deleted or changed, this call does nothing.
            </remarks>
            <param name="entities">The entities to be marked as not longer needed.</param>
            <exception cref="T:System.ArgumentNullException">'entities' cannot be null.</exception>
        </member>
        <member name="T:Telerik.OpenAccess.ILevelTwoCache">
            <summary>
            Level two cache management.
            </summary>
            <remarks>
            The level two cache managing instance can be reached from the <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance.
            All functions can be used to control the content of the second level cache. If objects need to 
            be evicted from the cache several functions are available.
            <para>
            The level two cache has to be enabled on the <see cref="T:Telerik.OpenAccess.BackendConfiguration"/>. The 
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Enabled"/> property has to be set to 'true'.
            To enable the query cache <see cref="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.CacheQueryResults"/> property must be set to 'true'.
            </para>
            <para>
            The level two cache is shared by all context instances. I several processes accesses the same database, the caches must be synchronized. This can be 
            done by setting up a cache cluster <see cref="T:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration"/>.
            </para>
            </remarks>
            <example>
            How to evict all Person instances from the cache
            <code>
            MyContext ctx = new MyContext;
            ctx.LevelTwoCache.EvictAll(typeof(Person)),false);
            </code>
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.Evict(Telerik.OpenAccess.ObjectKey)">
            <summary> Evict all information for an ObjectKey instance from the second level cache.</summary>
            <param name="objectKey">ObjectKey of the persistent instance to be evicted</param>
            <exception cref="T:System.ArgumentNullException">ObjectKey must not be null.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">ObjectKey should be valid.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll">
            <summary> Evicts all entities from the second level cache.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll(System.Type)">
            <summary> Evicts all information for all persistent instances of a certain type from the second level cache.</summary>
            <param name="entityType">Type of persistent instances to be evicted.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Type has to be the type of a persistent entity.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll(System.Type,System.Boolean)">
            <summary> Evicts all information for all persistent instances of a certain type from the second level cache.</summary>
            <param name="entityType">Type of persistent instances to be evicted.</param>
            <param name="includeSubtypes">If true then instances of derived types are also evicted</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Type has to be the type of a persistent entity.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})">
            <summary> Evicts all information for a collection of ObjectKey instances from the second level cache.</summary>
            <param name="entityKeyList">Collection of ObjectKey of the persistent instances to be evicted.</param>
            <exception cref="T:System.ArgumentNullException">EntityKeyList should not be null.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">All ObjectKeys should be valid.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll``1">
            <summary> Evicts all information for all persistent instances of a certain type from the second level cache.</summary>
            <typeparam name="T">Type of persistent instances to be evicted.</typeparam>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">T has to be the type of a persistent entity.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.EvictAll``1(System.Boolean)">
            <summary> Evicts all information for all persistent instances of a certain type from the second level cache.</summary>
            <typeparam name="T">Type of persistent instances to be evicted</typeparam>
            <param name="includeSubtypes">If true then instances of derived types are also evicted.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">T has to be the type of a persistent entity.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ILevelTwoCache.IsCached(Telerik.OpenAccess.ObjectKey)">
            <summary>Indicates if object is cached.</summary>
            <param name="objectKey">ObjectKey instance of the entity that should be checked.</param>
            <exception cref="T:System.ArgumentNullException">ObjectKey should not be null.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">ObjectKey should be valid.</exception>
            <returns>True if object is cached, false if not.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.LoggingLevel">
            <summary>Specifies the logging level in Telerik Data Access.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoggingLevel.Errors">
            <summary>Logs only errors (such as connections timing out)</summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoggingLevel.None">
            <summary>Logs no events. Use this only while doing benchmarking.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoggingLevel.Normal">
            <summary>Logs the most of the events that do not reduce performance significantly (e.g. SQL executed)</summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoggingLevel.Verbose">
            <summary>Logs majority of the events (this slows down the performance, recommended only for debugging purposes)</summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoggingLevel.All">
            <summary>Logs all possible events (this slows down the performance significantly, could be used while debugging)</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.AssociationPartType">
            <summary>
            Describes the type of a single Association Part
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationPartType.ForeignKey">
            <summary>
            The Association Part describes a foreign key relationship between two entities in the database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationPartType.JoinTableSource">
            <summary>
            The Association Part describes a relationship between a Join Table and the Source Table of an m:n association.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationPartType.JoinTableTarget">
            <summary>
            The Association Part describes a relationship between a Join Table and the Target Table of an m:n association.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationPartType.DictionaryKey">
            <summary>
            The Association Part describes the Key column of a Dictionary association.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationPartType.DictionaryValue">
            <summary>
            The Association Part describes the Value column of a Dictionary association.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.AssociationAttribute">
            <summary>
            Designates a property to represent a database association, such as a foreign key relationship.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.AssociationAttribute.Depend">
            <summary>
            Specifies whether the associated object should be deleted together with its parent object.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.AssociationAttribute.IsUnique">
            <summary>
            Gets or sets the indication of a uniqueness constraint on the foreign key.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.AssociationAttribute.IsManaged">
            <summary>
            Gets or sets the the setting defining if the navigation member is managed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendAttribute">
            <summary>
            Specifies certain attributes for a class that represents a database
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendAttribute.ConnectionId">
            <summary>
            Gets or sets the id of the connection used for opening the database
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendAttribute.BackendType">
            <summary>
            Gets or sets the type of the backend
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendSpecificAttribute">
            <summary>
            Base class for all mapping attributes that can have different definitions under different backends
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BackendSpecificAttribute.#ctor(Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Initializes a new instance of the BackendSpecificAttribute class
            </summary>
            <param name="backendType">Defines the type of the backend.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BackendSpecificAttribute.#ctor">
            <summary>
            Initializes a new instance of the BackendSpecificAttribute class
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendSpecificAttribute.BackendType">
            <summary>
            Gets the backend type.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.CollectionAttribute">
            <summary>
            Designates a property as an inverse collection in a 1:m or m:n relationship.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.CollectionAttribute.InverseProperty">
            <summary>
            Gets or sets the name of the field on the opposite side of the association.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ColumnAttribute">
            <summary>
            Associates a property with a column in a database table.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
            <param name="name">Defines the name of the column</param>
        </member>
        <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor(System.String,Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
            <param name="name">Defines the name of the column</param>
            <param name="backendType">Defines the type of the backend in which the table is defined</param>
        </member>
        <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor">
            <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Name">
            <summary>
            Gets the name of the database column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.OpenAccessType">
            <summary>
            Gets or sets the internal OpenAccess type for the database column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.IsNullable">
            <summary>
            Gets or sets whether a column can contain null values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Check">
            <summary>
            Gets or sets how Telerik Data Access approaches the detection of optimistic concurrency conflicts.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Expression">
            <summary>
            Gets or sets whether a column is a computed column in a database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.DataAccessKind">
            <summary>
            Gets or sets the behavior durring data access operations on this column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.IsBackendCalculated">
            <summary>
            Gets or sets whether a column contains values that the database auto-generates.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.IsPrimaryKey">
            <summary>
            Gets or sets whether this class member represents a column that is part or all of the primary key of the table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.IsVersion">
            <summary>
            Gets or sets whether the column is a version column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.IsBackendVersion">
            <summary>
            Gets or sets whether the column is a backend specific version column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Length">
            <summary>
            Gets or sets the length of the database column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Scale">
            <summary>
            Gets or sets the scale of the database column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.SqlType">
            <summary>
            Gets or sets the type of the database column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ColumnAttribute.Converter">
            <summary>
            Gets or sets the converter of the database column.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ConcurrencyControlAttribute">
            <summary>
            Specifies the concurrently control strategy applied to an entity class
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ConcurrencyControlAttribute.#ctor(Telerik.OpenAccess.OptimisticConcurrencyControlStrategy)">
            <summary>
            Initializes a new instance of the ConcurrencyControl attribute
            </summary>
            <param name="strategy"></param>
        </member>
        <member name="P:Telerik.OpenAccess.ConcurrencyControlAttribute.Strategy">
            <summary>
            Gets or sets the concurrency control strategy
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ConstructorArgumentAttribute">
            <summary>
            Marks a property that it is initialized as part of the constructor of an attribute.
            </summary>
            <remarks>Used for code generation purposes.</remarks>
        </member>
        <member name="T:Telerik.OpenAccess.CacheStrategyAttribute">
            <summary>
            Designates a class that it will be stored in the second level cache.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.CacheStrategyAttribute.#ctor(Telerik.OpenAccess.Metadata.CacheStrategy)">
            <summary>
            Initializes an instance of the CacheStrategyAttribute class.
            </summary>
            <param name="cacheStrategy">Defines the cache strategy.</param>
        </member>
        <member name="P:Telerik.OpenAccess.CacheStrategyAttribute.CacheStrategy">
            <summary>
            Gets the cache strategy.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.CrudOperationAttribute">
            <summary>
            Specifies the usage of a certain stored procedure in a class
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.CrudOperationAttribute.UpdateProcedureName">
            <summary>
            Gets or sets the name of the stored procedure used for update operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.CrudOperationAttribute.DeleteProcedureName">
            <summary>
            Gets or sets the name of the stored procedure used for delete operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.CrudOperationAttribute.InsertProcedureName">
            <summary>
            Gets or sets the name of the stored procedure used for insert operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.CrudOperationAttribute.RetrieveProcedureName">
            <summary>
            Gets or sets the name of the stored procedure used for retrieve operations
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.DataAccessKindAttribute">
            <summary>
            Specifies the data access kind of a persistent type.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.DataAccessKindAttribute.#ctor(Telerik.OpenAccess.DataAccessKind)">
            <summary>
            Initializes an instance of the DataAccessKindAttribute class.
            </summary>
            <param name="dataAccessKind">Defines the data access kind.</param>
        </member>
        <member name="P:Telerik.OpenAccess.DataAccessKindAttribute.DataAccessKind">
            <summary>
            Gets the data access kind.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.KeyGeneratorAttribute">
            <summary>
            Specifies the key generator of a persistent type.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.KeyGeneratorAttribute.#ctor(Telerik.OpenAccess.Metadata.KeyGenerator)">
            <summary>
            Initializes an instance of the KeyGeneratorAttribute class.
            </summary>
            <param name="keyGenerator">Defines the key generator.</param>
        </member>
        <member name="P:Telerik.OpenAccess.KeyGeneratorAttribute.KeyGenerator">
            <summary>
            Gets the key generator.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.LoadBehaviorAttribute">
            <summary>
            Specifies if a field is part of the default fetch group.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.LoadBehaviorAttribute.#ctor(Telerik.OpenAccess.LoadBehavior)">
            <summary>
            Constructor for a PartOfDefaultFetchGroupAttribute
            </summary>
            <param name="loadBehavior">True if field should be part of the default fetchgroup, False otherwise.</param>
        </member>
        <member name="P:Telerik.OpenAccess.LoadBehaviorAttribute.LoadBehavior">
            <summary>
            Gets or sets the value for the default fetch group flag.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ForeignKeyAssociationAttribute">
            <summary>
            Designates a property to represent a foreign key relationship.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.ConstraintName">
            <summary>
            Gets or sets the name of the foreign key constraint that defines the association. Can be null if there is no constraint in the database. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.ForeignKeyColumns">
            <summary>
            Gets or sets coma separated list of the foreign key columns.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.SharedFields">
            <summary>
            Gets or sets the properties that share the same columns with the navigation member defined with the foreign key asssociation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.TargetFields">
            <summary>
            Gets or sets the names of the properties on the opposite side of the relation.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.FunctionAttribute">
            <summary>
            Associates a method with a stored procedure or user-defined function in the database.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.FunctionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FunctionAttribute class.
            </summary>
            <param name="name">The name of the database function.</param>
        </member>
        <member name="P:Telerik.OpenAccess.FunctionAttribute.IsFunction">
            <summary>
            Gets or sets whether a method is mapped to a function or to a stored procedure. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.FunctionAttribute.Name">
            <summary>
            Gets or sets the name of the function
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.FunctionAttribute.CommandText">
            <summary>
            Gets or sets explicit SQL to be executed with this function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.FunctionAttribute.FunctionType">
            <summary>
            Gets or sets the type of the function
            </summary>        
        </member>
        <member name="T:Telerik.OpenAccess.FunctionTypeEnumeration">
            <summary>
            Specifies the function types options.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.None">
            <summary>
            Specifies that the function will not return any result set.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.Scalar">
            <summary>
            Specifies that the function will return scalar value.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.PersistentType">
            <summary>
            Specifies that the function will return a Persistent Type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.ComplexType">
            <summary>
            Specifies that the function will return a complex type.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.InheritanceMappingAttribute">
            <summary>
            Maps an inheritance hierarchy in a Telerik Data Access application. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.DiscriminatorValue">
            <summary>
            Gets or sets the discriminator value in a mapped inheritance hierarchy. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.IsDefault">
            <summary>
            Gets or sets whether an object of this type in instantiated when the discriminator value does not match a specified value. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.InheritanceStrategy">
            <summary>
            Gets or sets the inheritance strategy.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.JoinTableAssociationAttribute">
            <summary>
            Designates a property to represent a relationship that is exposed via a join table in the database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.TableName">
            <summary>
            Gets or sets the name of the join table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.SchemaName">
            <summary>
            Gets or sets the name of the join table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.OwnerColumns">
            <summary>
            Gets or sets a comma separated list of the columns of the join table that point to the owner side of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.TargetColumns">
            <summary>
            Gets or sets a coma separated list of the columns of the join table that point to the destination side of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.SequenceColumn">
            <summary>
            Gets or sets the name of the column that is used for ordering the associated objects if such column exists.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.SourceConstraint">
            <summary>
            Gets or sets the name of the constraint for the columns of the join table that point to the owner side of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.TargetConstraint">
            <summary>
            Gets or sets the name of the constraint for the columns of the join table that point to the destination side of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.UpdateSchema">
            <summary>
            Gets or sets a value indicating whether to update the database schema when parameters of this table are changed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectIdAttribute">
            <summary>
            Designates a class to represent the identity for a persistent class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectIdAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ObjectIdAttribute class
            </summary>
            <param name="classType">The type of the class that is identified by the IObjectID class marked with this attribute.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectIdAttribute.ClassType">
            <summary>
            Gets the type of the class that is identified by the IObjectID class marked with this attribute.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ParameterAttribute">
            <summary>
            Enables specification of mapping details for a stored procedure method parameter
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ParameterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the parameter attribute class.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.Name">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.Mode">
            <summary>
            gets or sets the direction of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.IsNullable">
            <summary>
            defines if the parameter is nullable
            </summary>        
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.OpenAccessType">
            <summary>
            Gets or sets the ado type of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.Length">
            <summary>
            Gets or sets the length of the database column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.Scale">
            <summary>
            Gets or sets the scale of the database column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ParameterAttribute.SqlType">
            <summary>
            Gets or sets the type of the database column.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ParameterModeEnumeration">
            <summary>
            Specifies the direction of the function paramater
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.IN">
            <summary>
            specifies the direction of the parameter to in
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.OUT">
            <summary>
            specifies the direction of the parameter to OUT
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.INOUT">
            <summary>
            specifies the direction of the parameter to INOUT
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.RETURN">
            <summary>
            marks the parameter as a return one
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.PersistentNamespaceAttribute">
            <summary>
            Designates all the classes inside a namespace to be persisted inside the database
            </summary>
            <remarks>
            When this attribute is applied on an assembly, it marks only the classes inside 
            that assembly as persistent. Classes in the 
            specified namespace but in different assemblies will not be threated as persistent.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.PersistentNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PersistentNamespaceAttribute class
            </summary>
            <param name="nameSpace">The namespace that is to be marked as persistent</param>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentNamespaceAttribute.NameSpace">
            <summary>
            Gets the name of the namespace that is marked as persistent.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ResultTypeAttribute">
            <summary>
            Used to specify each type of result; for functions having various result types.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ResultTypeAttribute.CLRType">
            <summary>
            Gets or sets the clr type of the result.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ResultTypeAttribute.ReturnType">
            <summary>
            Gets or sets the type of result that will be returned by the function.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ReturnTypeEnumeration">
            <summary>
            Specifies the return type of a function.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.Scalar">
            <summary>
            Returns a single scalar value
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.Projection">
            <summary>
            Returns a projection
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.SingleResultSet">
            <summary>
            Returns a single result set
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.MultipleResultSet">
            <summary>
            Returns a multiple result set
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.StorageAttribute">
            <summary>
            Specifies the field where the value returned by a property is stored.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.StorageAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the StorageAttribute class.
            </summary>
            <param name="name">Defines the name of the storage field.</param>
        </member>
        <member name="P:Telerik.OpenAccess.StorageAttribute.NameOfField">
            <summary>
            The name of the storage field.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.TableAttribute">
            <summary>
            Designates a class as an entity class that is associated with a database table.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
            <param name="name">Defines the name of the table</param>
        </member>
        <member name="M:Telerik.OpenAccess.TableAttribute.#ctor(System.String,Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
            <param name="name">Defines the name of the table</param>
            <param name="backendType">Defines the type of the backend in which the table is defined</param>
        </member>
        <member name="M:Telerik.OpenAccess.TableAttribute.#ctor">
            <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.TableAttribute.SchemaName">
            <summary>
            Gets or sets the schema in which the table is defined
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.TableAttribute.Name">
            <summary>
            Gets the name of the table or view.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.TableAttribute.UpdateSchema">
            <summary>
            Gets or sets a value indicating whether to update the database schema when parameters of this table are changed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.TableAttribute.DiscriminatorColumn">
            <summary>
            Gets or sets a value indicating which is the discriminator column.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.UpdateCheck">
             <summary>
             Specifies when objects are to be tested for concurrency conflicts. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UpdateCheck.Always">
            <summary>
            Always check. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UpdateCheck.Never">
            <summary>
            Never check
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UpdateCheck.WhenChanged">
            <summary>
            Check only when the object has been changed. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ViewAttribute">
            <summary>
            Designates a class as an entity class that is associated with a database view.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ViewAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ViewAttribute class
            </summary>
            <param name="name">Defines the name of the view</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingBoolValue">
            <summary>
            Represents a resolution action for a model item with incorrect bool value
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingBoolValue.BoolValue">
            <summary>
            Gets or sets the value of the item
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingBoolValue.EnableSelection">
            <summary>
            Gets a value indicating whether bool value selection is allowed
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingIntValue">
            <summary>
            Represents a resolution action for a model item with incorrect int value
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingIntValue.IntValue">
            <summary>
            Gets or sets the value of the item
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation">
            <summary>
            A batch operation for changing the namespace of meta persistent types.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation.Execute">
            <summary>
            Executes the change namespace operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation.Namespace">
            <summary>
            The new namespace.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation.Language">
            <summary>
            The project language.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation.Description">
            <summary>
            Gets the description of the operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ChangeNamespaceOperation.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IBatchOperationProvider">
            <summary>
            Used to obtain a list of operations which can be executed on a meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IBatchOperationProvider.GetClassBatchOperations">
            <summary>
            Gets a list of operations which can be executed on a MetaPersistentType.
            </summary>
            <returns>A list of operations</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IBatchOperationProvider.GetPropertyBatchOperations">
            <summary>
            Gets a list of operations which can be executed on a MetaMember.
            </summary>
            <returns>A list of operations</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IBatchOperationProvider.DataContainer">
            <summary>
            Gets a container with data needed for the batch operations.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.DefaultBatchOperationProvider">
            <summary>
            Used to obtain a default list of operations which can be executed on a meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultBatchOperationProvider.GetClassBatchOperations">
            <summary>
            Gets a list of operations which can be executed on a MetaPersistentType.
            </summary>
            <returns>A list of operations</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultBatchOperationProvider.GetPropertyBatchOperations">
            <summary>
            Gets a list of operations which can be executed on a MetaMember.
            </summary>
            <returns>A list of operations</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultBatchOperationProvider.DataContainer">
            <summary>
            Gets a container with data needed for the batch operations.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMetaItemVisitor">
            <summary>
            Visitor used to execute an operation on a MetaItem
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetaItemVisitor.Visit(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Executes an operation on a MetaItem
            </summary>
            <param name="metaItem">The MetaItem instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetaItemVisitor.StartTraverse(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Starts the traversing process.
            </summary>
            <param name="rootMetaItem">The root MetaItem instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetaItemVisitor.EndTraverse">
            <summary>
            Ends the traversing process.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemVisitor.Stop">
            <summary>
            If this value is True, the traversing will be stopped.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ChangeSetItem">
            <summary>
            Base class for a change between two relational database models.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ChangeSetEntry">
            <summary>
            Represents a change between two relational database models. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ChangeSetEntry.GetEnumerator">
            <summary>
            Gets an enumerator enumerating ChangeSetEntry objects.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ChangeType">
            <summary>
            Represents the type of operation in a metadata change set
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ChangeType.Add">
            <summary>
            Represents an add operation
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ChangeType.Remove">
            <summary>
            Represents a remove operation
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ChangeType.Modify">
            <summary>
            Represents a modify operation
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMetaItemAttribute">
            <summary>
            Provides additional information about types and their members. In the Telerik Data Access metadata type hierarchy, 
            MetaItemAttribute instances provide additional information about members through the declared type for the member.
            The attributes can be accessed via the MetaDataProperties collection of the base MetaItem type.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetaItemAttribute.Clone">
            <summary>
            Clones this meta item attribute.
            </summary>
            <returns>A cloned instance of this meta item attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemAttribute.Key">
            <summary>
            Gets or sets the name of this meta item attribute.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemAttribute.Value">
            <summary>
            Gets or sets the value of this meta item attribute.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for this meta item attribute
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemAttribute.Kind">
            <summary>
            Gets or sets the kind of this meta item attribute
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IMetaItemAttribute.HasValue">
            <summary>
            Gets whether the attribute has a value set.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaItemFullName">
            <summary>
            Calculate the full name of meta tables, constraints or stored procedures
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetFullNameForRelationalItem(System.String,System.String,System.String)">
            <summary>
            Calculate the full name of meta tables, constrains or stored procedures
            </summary>
            <param name="packageName">The name of the package where the item is defined.</param>
            <param name="schemaName">The name of the schema where the item is defined.</param>
            <param name="name">The name of the relational item.</param>
            <returns>The full name of the relational item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetFullNameForRelationalItem(System.String,System.String)">
            <summary>
            Calculate the full name of meta tables, constrains or stored procedures
            </summary>
            <param name="schemaName">The name of the schema where the item is defined.</param>
            <param name="name">The name of the relational item.</param>
            <returns>The full name of the relational item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetMetaTableFullName(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Calculate the full name of meta tables
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetMetaUDTFullName(Telerik.OpenAccess.Metadata.Relational.MetaUDT)">
            <summary>
            Calculate the full name of user-defined types
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetMetaScopedTypeFullName(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Calculate the full name of meta scoped types
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.GetMetaTypeFullName(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Calculate the full name of meta types
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemFullName.Get(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Calculate the full name of meta items
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.DateTimeAutosetMode">
            <summary>
            Specifies the behavior for DateTime fields during insert and update operations.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.DateTimeAutosetMode.None">
            <summary>
            The DateTime field value is not changed during insert or update
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.DateTimeAutosetMode.Insert">
            <summary>
            During insert of a new object containing this DateTime field, the field gets the actual date and time.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.DateTimeAutosetMode.Update">
            <summary>
            During update of an existing object containing this DateTime field, the field gets the actual date and time.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.DateTimeAutosetMode.InsertAndUpdate">
            <summary>
            During insert and update of an object containing this DateTime field, the field gets the actual date and time.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IHierarchyMetadata">
            <summary>
            Gets an IHierarchyMetadata object that represents the parent node of the current hierarchical node.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IHierarchyMetadata.GetChildren">
            <summary>
            Gets an enumeration object that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An IMetadataHierarchicalEnumerable collection of child nodes of the current hierarchical node.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IHierarchyMetadata.GetParent">
            <summary>
            Gets an IHierarchyMetadata object that represents the parent node of the current hierarchical node.
            </summary>
            <returns>An IHierarchyMetadata object that represents the parent node of the current hierarchical node.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IHierarchyMetadata.HasChildren">
            <summary>
            Indicates whether the hierarchical data node that the IHierarchyMetadata object represents has any child nodes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IHierarchyMetadata.Item">
            <summary>
            Gets the hierarchical data node that the IHierarchyMetadata object represents.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IHierarchyMetadata.Root">
            <summary>
            Gets the hierarchical data node that is the root of the whole hierarchy.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMetadataHierarchicalEnumerable">
            <summary>
            Represents a hierarchical collection that can be enumerated with an IEnumerator interface. 
            Collections that implement the IMetadataHierarchicalEnumerable interface can be used to navigate the metadata structure.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetadataHierarchicalEnumerable.GetHierarchyData(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Returns a hierarchical data item for the specified enumerated item.
            </summary>
            <param name="enumeratedItem">The MetaItem for which to return an IHierarchyData. </param>
            <returns>An IHierarchyData instance that represents the MetaItem passed to the GetHierarchyData method.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMetadataStatusCallback">
            <summary>
            Provides a callback interface used by metadata objects to notify that the instance state has changed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetadataStatusCallback.OnPropertyChanged(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Allows clients to receive property change notification.
            </summary>
            <param name="owner">The instance that raised the event.</param>
            <param name="propertyName">The name of the changed property.</param>
            <param name="newValue">The value of the property before the change.</param>
            <param name="oldValue">THe new value assigned to the property.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMetadataStatusProvider">
            <summary>
            Provides a callback interface used by metadata objects to notify that the instance state has changed.
            Provides metadata changes updates to callback objects that support them.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetadataStatusProvider.Attach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Attach to the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMetadataStatusProvider.Detach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Detach from the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IMultipleBackendAttribute">
            <summary>
            Provides additional information about attributes that support different values for different backends.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMultipleBackendAttribute.GetValue(Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Gets the value of this meta item attribute for the selected backend.
            </summary>
            <param name="backend">The selected backend.</param>
            <returns>The value of this meta item attribute for the selected backend.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMultipleBackendAttribute.GetDefaultValue(Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Gets the default value of this meta item attribute for the selected backend.
            </summary>
            <param name="backend">The selected backend.</param>
            <returns>The default value of this meta item attribute for the selected backend.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMultipleBackendAttribute.SetValue(Telerik.OpenAccess.Metadata.Backend,System.Object)">
            <summary>
            Sets the value of this meta item attribute for the selected backend.
            </summary>
            <param name="backend">The selected backend.</param>
            <param name="value">The backend dependent value.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IMultipleBackendAttribute.SetDefaultValue(Telerik.OpenAccess.Metadata.Backend,System.Object)">
            <summary>
            Sets the default value of this meta item attribute for the selected backend.
            </summary>
            <param name="backend">The selected backend.</param>
            <param name="value">The backend dependent value.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.INotifyMetadataCollectionChanged">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="E:Telerik.OpenAccess.Metadata.INotifyMetadataCollectionChanged.MetadataCollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.LoadBehavior">
            <summary>
            Defines the default load behavior of a persistent property
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoadBehavior.Default">
            <summary>
            The default behavior. The runtime will decide whether to load it or not based on the type of the property.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoadBehavior.Lazy">
            <summary>
            The property marked with this facet will be lazily loaded by default.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.LoadBehavior.Eager">
            <summary>
            The property marked with this facet will be eagerly loaded by default.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.AttributesMetadataSource">
            <summary>
            A mapping source that uses CLR attributes to create the mapping model. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataSource">
            <summary>
            Base class for all mapping sources used by Telerik Data Access.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetadataSource.aggregationOptions">
            <summary>
            Determines if fake types for later resolving will be created.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.#ctor">
            <summary>
            Create an instance of type MetadataSource.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.#ctor(Telerik.OpenAccess.Metadata.AggregationOptions)">
            <summary>
            Create an instance of type MetadataSource.
            </summary>
            <param name="options">Determines if fake types for later resolving will be created.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.CreateModel">
            <summary>
            Creates a Telerik Data Access meta model in the different MetadataSource implementations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.GetModel">
            <summary>
            Gets the meta model used by the Telerik Data Access runtime.
            </summary>
            <returns>MetadataContainer instance containing the Telerik Data Access meta model.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.ValidateImpl(Telerik.OpenAccess.Metadata.ValidationMode,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Validates the passed meta data
            </summary>
            <param name="validationMode">Specifies validation settings, like whether to stop validation on first error</param>
            <param name="metadata">The meta data to validate</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.Validate">
            <summary>
            Validates the inner model, if there is one
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.Validate(Telerik.OpenAccess.Metadata.ValidationMode)">
            <summary>
            Validates the meta data model
            </summary>
            <param name="validationMode">Specifies validation settings, like whether to stop validation on first error</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.GetValidationRuleProvider">
            <summary>
            Gets the IValidationRuleProvider instance to be used when performing validation
            </summary>
            <returns>The IValidationRuleProvider instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.SetContainerSettings(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Called when a new metadata container is created in order to set its forward naming settings.
            </summary>
            <param name="container">The container to be used.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataSource.ValidationBehavior">
            <summary>
            Gets or sets the validation behavior
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataSource.ValidationResult">
            <summary>
            Gets the validation results if any
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.CreateModel">
            <summary>
            Creates a MetadataContainer instance by reading CLR attributes.
            </summary>
            <returns>A MetadataContainer instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.FromAssembly(System.Reflection.Assembly)">
            <summary>
            Creates a mapping source by reading the CLR attributes in an assembly
            </summary>
            <param name="assembly">A compiled assembly</param>
            <returns>The new Attributes mapping source as type AttributesMetadataSource</returns>
            <remarks>When creating a mapping source from an assembly, Telerik Data Access 
            behaves like there is only one meta model inside that assembly. If you want to use multiple meta models in one assembly,
            use the FromContext implementation.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.FromContext(System.Type)">
            <summary>
            Creates a mapping source by reading the CLR attributes of the classes that are managed by a 
            specific OpenAccessDataContext implementation.
            </summary>
            <param name="contextType">A type derived by the base OpenAccessContext type</param>
            <returns>The new Attributes mapping source as type AttributesMetadataSource</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.AggregateMetadataSource">
            <summary>
            A MetadataSource that can be used to combine other MetadataSource instances and
            produce a new MetadataContainer that containing the combined metadata.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AggregateMetadataSource.#ctor(Telerik.OpenAccess.Metadata.MetadataSource,Telerik.OpenAccess.Metadata.MetadataSource)">
            <summary>
            Creates a new instance of the AggregateMetadataSource and initializes it
            with two other MetadataSource instances.
            </summary>
            <param name="source1">The first MetadataSource instance; cannot be null</param>
            <param name="source2">The second MetadataSource instance; cannot be null</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AggregateMetadataSource.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Creates a new instance of the AggregateMetadataSource and initializes it
            with two MetadataContainer instances.
            </summary>
            <param name="container1">The first MetadataContainer instance; cannot be null</param>
            <param name="container2">The second MetadataContainer instance; cannot be null</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AggregateMetadataSource.#ctor(Telerik.OpenAccess.Metadata.MetadataSource,Telerik.OpenAccess.Metadata.MetadataSource,Telerik.OpenAccess.Metadata.AggregationOptions)">
            <summary>
            Creates a new instance of the AggregateMetadataSource and initializes it
            with two other MetadataSource instances.
            </summary>
            <param name="source1">The first MetadataSource instance; cannot be null</param>
            <param name="source2">The second MetadataSource instance; cannot be null</param>
            <param name="options">Aggregation options parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AggregateMetadataSource.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.AggregationOptions)">
            <summary>
            Creates a new instance of the AggregateMetadataSource and initializes it
            with two MetadataContainer instances.
            </summary>
            <param name="container1">The first MetadataContainer instance; cannot be null</param>
            <param name="container2">The second MetadataContainer instance; cannot be null</param>
            <param name="options">Aggregate options parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.AggregateMetadataSource.CreateModel">
            <summary>
            Combines the models obtained from the child MetadataSource instances into a new one.
            </summary>
            <returns>A new MetadataContainer instance containing the combined model.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.AggregationOptions">
            <summary>
            Represents options for the AggregateMetadataSource
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AggregationOptions.Immediate">
            <summary>
            The loading of the references will be performed immediately.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AggregationOptions.Late">
            <summary>
            The loading of references will be performed at a later stage.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MappingDefinitionType">
            <summary>
            Specifies the mapping type that is used for a Telerik Data Access project
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Xml">
            <summary>
            The mapping information is preserved in the form of an Xml file
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Attributes">
            <summary>
            The mapping information is exposed as Clr attributes applied to the persistent classes and their properties
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Fluent">
            <summary>
            The mapping information is build with user code using the Telerik Data Access fluent API
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Combined">
            <summary>
            The mapping information is defined twice, once using Attributes and once using Fluent API
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationBehavior">
            <summary>
            Specifies the valiation behavior of an I
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.None">
            <summary>
            No validation is run automatically
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.AggregateResults">
            <summary>
            Validation is run automatically, 
            but no exceptions are thrown if there are validation errors
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.ThrowOnFirstError">
            <summary>
            Validation is run automatically, 
            and an exception is thrown on the first validation error
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.ThrowOnError">
            <summary>
            Validation is run automatically, and an exception is thrown 
            if there are any validation errors after the validtion completes
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.XmlMetadataSource">
            <summary>
            Represents a mapping source that uses an external XML mapping file to create the model. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase">
            <summary>
            A base class for the xml based mapping sources.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase.document">
            <summary>
            The XML document from which a meta model should be constructed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the XmlMetadataSourceBase class used by the derived classes.
            </summary>
            <param name="document">The XML document from which a meta model should be constructed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.CreateModel">
            <summary>
            Creates a MetadataContainer instance by reading an XML mapping file.
            </summary>
            <returns>A MetadataContainer instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromReader(System.Xml.XmlReader)">
            <summary>
            Creates a mapping source from an XML reader. 
            </summary>
            <param name="reader">An XML reader.</param>
            <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromStream(System.IO.Stream)">
            <summary>
            Creates a mapping source from XML in a stream. 
            </summary>
            <param name="stream">A stream of XML.</param>
            <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromUrl(System.String)">
            <summary>
            Creates a mapping source from XML that is loaded from a URL. 
            </summary>
            <param name="url">The URL pointing to the XML.</param>
            <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromXml(System.String)">
            <summary>
            Creates a mapping source from an XML string. 
            </summary>
            <param name="xml">A string that contains XML.</param>
            <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromAssemblyResource(System.String)">
            <summary>
            Creates a mapping source from and XML resource embedded in the currently calling assembly. 
            </summary>
            <param name="xmlFileName">The name of the embedded xml resource.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromAssemblyResource(System.Reflection.Assembly,System.String)">
            <summary>
             Creates a mapping source from and XML resource embedded an assembly. 
            </summary>
            <param name="assembly">The assembly where the resource is embedded.</param>
            <param name="xmlFileName">The name of the embedded xml resource.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ITypeResolver">
            <summary>
            Handles the reverse mapping of sql types to clr types.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ITypeResolver.MetaColumnToClrType(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Returns the default Clr Type for a database column.
            </summary>
            <param name="column">A column read from the database schema.</param>
            <returns>The best matching Clr Type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ITypeResolver.GetTypesForColumn(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Returns a list of System.Type instances to which the specified column can be mapped.
            </summary>
            <param name="column">A column read from the database schema</param>
            <returns>A list of CLR types that the specified column can be mapped to</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ITypeResolver.IsValidTypeForColumn(System.Type,Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Indicates if the given type is a valid mapping for the column.
            </summary>
            <param name="type">The CLR type to test.</param>
            <param name="column">The column to test against.</param>
            <returns><c>True</c> if valid</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.TypeResolver">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypesForColumn(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Gets a list of System.Type instances that can be used for a specified column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypesForStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
            <summary>
            Gets a list of System.Type instances that can be used for a specified parameter
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetModifiedList(System.Type,System.Type,System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Type})">
            <summary>
            This method returns a reordered list based on the lists passed in.
            type1 from list1 is added in the beginning and then the rest of the list1 elements.
            Same happens if type2 and list2 are not null
            </summary>
            <returns>Reordered list with type1 and type2 added ahead of other respective list elements</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypeCode(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
            <summary>
            Returns the (jdbc) type code for a given MetaColumn
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypeCode(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Returns the (jdbc) type code for a given MetaColumn
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.MetaColumnToClrType(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaAssociationPart">
            <summary>
            Represents a part of an association definition.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaItem">
            <summary>
            Represents the base item class for all the metadata in the Telerik Data Access metadata model. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaItem.MetadataId">
            <summary>
            MetaItem metadata Id.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CalculatePositionHash">
            <summary>
            Calculates the hash value that uniquely identifies the position of this instance in the metadata model.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CalculatePrimaryHash">
            <summary>
            Calculates the hash value that uniquely identifies this instance.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CreateAttribute``1(Telerik.OpenAccess.Metadata.MetadataConstants,``0)">
            <summary>
            
            </summary>
            <typeparam name="Z"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new MetaItem instance with the required parameters
            </summary>
            <param name="name">defines the name of the meta item</param>
            <param name="description">defines a description for the meta item</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new MetaItem instance with the required parameters for an expected size of attributes
            </summary>
            <param name="name">defines the name of the meta item</param>
            <param name="description">defines a description for the meta item</param>
            <param name="numAttribs">expected number of attributes</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>A string representation of value of this instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.GetAttributeValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Gets the value on a property and/or field.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.SetAttributeValue``1(System.Object,Telerik.OpenAccess.Metadata.MetadataConstants,``0)">
            <summary>
            Sets the value on a property and/or field and fires a notification event.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <param name="notifyingProperty"> The property that triggers the update notification.</param>
            <param name="key">Attribute key used to resolve the field.</param>
            <param name="value">The value of the field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.Attach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Attach to the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.Detach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Detach from the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.OnPropertyChanged(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Allows clients to receive property change notification.
            </summary>
            <param name="owner">The instance that raised the event.</param>
            <param name="propertyName">The name of the changed property.</param>
            <param name="newValue">The value of the property before the change.</param>
            <param name="oldValue">THe new value assigned to the property.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.GetChildren">
            <summary>
            Gets an enumeration object that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An IMetadataHierarchicalEnumerable collection of child nodes of the current hierarchical node.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.GetParent">
            <summary>
            Gets an IHierarchyMetadata object that represents the parent node of the current hierarchical node.
            </summary>
            <returns>An IHierarchyMetadata object that represents the parent node of the current hierarchical node.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.GetRoot">
            <summary>
            Returns the hierarchical data node that is the root of the whole hierarchy.
            </summary>
            <returns>The hierarchical data node that is the root of the whole hierarchy.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.System#ICloneable#Clone">
            <summary>
            Clones this meta item attribute.
            </summary>
            <returns>A cloned instance of this meta item attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CompareTo(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A signed integer value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.CastTo``1(System.Object)">
            <summary>
            Casts a MetaItem object to a specific implementation of a MetaItem.
            </summary>
            <typeparam name="T">The specific type of the MetaItem that will be casted to.</typeparam>
            <param name="metaItem">The metaItem object that will be casted to a specific type.</param>
            <returns>An instance of type T if the cast is successful or throws an exception if the cast is not successful.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItem.Compare(Telerik.OpenAccess.Metadata.MetaItem,Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
            </summary>
            <param name="firstItem">The first object to compare</param>
            <param name="secondItem">The second object to compare</param>
            <returns>A signed integer value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.MetaDataProperties">
            <summary>
            Gets the list of properties of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.Description">
            <summary>
            Gets the description of the item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.UseDefaultMapping">
            <summary>
            Gets or sets the value specifying if this item uses default mapping.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.HasChildren">
            <summary>
            Indicates whether the hierarchical data node that the IHierarchyMetadata object represents has any child nodes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItem.Root">
            <summary>
            Gets the hierarchical data node that is the root of the whole hierarchy.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.#ctor">
            <summary>
            Initializes a MetaAssociationPart instance.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.#ctor(Telerik.OpenAccess.Metadata.AssociationPartType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Initializes a MetaAssociationPart instance with a foreign key member and an identity member.
            </summary>
            <param name="foreignKeyMember">The foreign key member of the association part.</param>
            <param name="identityMember">The identity member of the association part.</param>
            <param name="partType">The type of the association part.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.#ctor(Telerik.OpenAccess.Metadata.AssociationPartType,Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Initializes a MetaAssociationPart instance with a foreign key column and an identity column.
            </summary>
            <param name="foreignKeyColumn">The foreign key column of the association part.</param>
            <param name="identityColumn">The identity column of the association part.</param>
            <param name="partType">The type of the association part.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.#ctor(Telerik.OpenAccess.Metadata.AssociationPartType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember,Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Initializes a MetaAssociationPart instance with a foreign key member and an identity column.
            </summary>
            <param name="foreignKeyMember">The foreign key member of the association part.</param>
            <param name="identityColumn">The identity column of the association part.</param>
            <param name="partType">The type of the association part.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.#ctor(Telerik.OpenAccess.Metadata.AssociationPartType,Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Initializes a MetaAssociationPart instance with a foreign key column and an identity member.
            </summary>
            <param name="foreignKeyColumn">The foreign key column of the association part.</param>
            <param name="identityMember">The identity member of the association part.</param>
            <param name="partType">The type of the association part.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociationPart.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociationPart.ForeignKeyColumn">
            <summary>
            Gets or sets the foreign key column of the association part.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociationPart.IdentityColumn">
            <summary>
            Gets or sets the identity column of the association part.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociationPart.ForeignKeyMember">
            <summary>
            Gets or sets the foreign key member of the association part.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociationPart.IdentityMember">
            <summary>
            Gets or sets the identity member column of the association part.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociationPart.AssociationPartType">
            <summary>
            Gets or sets the type of the association part.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventHandler">
            <summary>
            Represents the method that handles the CollectionChanged event. 
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.#ctor(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Initializes a new instance of the MetadataCollection&lt;T&gt; class.
            </summary>
            <param name="owner">A MetaItem representing the context that owns the metadata collection. Generally it represents embedding relationship.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.#ctor(Telerik.OpenAccess.Metadata.MetaItem,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the MetadataCollection&lt;T&gt; class that contains elements copied from the specified collection.
            </summary>
            <param name="owner">A MetaItem representing the context that owns the metadata collection. Generally it represents embedding relationship.</param>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.#ctor(Telerik.OpenAccess.Metadata.MetaItem,System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the MetadataCollection&lt;T&gt; class that contains elements copied from the specified list.
            </summary>
            <param name="owner">A MetaItem representing the context that owns the metadata collection. Generally it represents embedding relationship.</param>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.GetHierarchyDataCore(`0)">
            <summary>
            
            </summary>
            <param name="enumeratedItem"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.OnCollectionChanged(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataCollection`1.Clone">
            <summary>
            Clones this collection and its contents.
            </summary>
            <returns>A cloned instance of this collection and its contents.</returns>
        </member>
        <member name="E:Telerik.OpenAccess.Metadata.MetadataCollection`1.MetadataCollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Telerik.OpenAccess.Metadata.MetadataCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation">
            <summary>
            Represents a Dictionary association in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation">
            <summary>
            Represents a join table association in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaAssociation">
            <summary>
            Represents an association in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor">
            <summary>
            Initializes a new instance of the MetaAssociation class with the association type as a parameter.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaAssociation class with the association type as a parameter.
            </summary>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaType,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaAssociation class with the association type, source and target as parameters.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="source">The source persistent type of the association.</param>
            <param name="target">The target persistent type of the association.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.MetaNavigationMember,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
            <param name="source">The source persistent type of the association.</param>
            <param name="target">The target persistent type of the association.</param>
            <param name="sourceEnd">The source end navigation member of the association.</param>
            <param name="targetEnd">The target end navigation member of the association.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.HasBothEnds">
            <summary>
            Determines if the association has two end points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.HasSingleEnd">
            <summary>
            Determines if the association has one end point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.GetSourceConceptualKeys">
            <summary>
            Gets the conceptual keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaMember instances that represent the conceptual keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.GetTargetConceptualKeys">
            <summary>
            Gets the conceptual keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaMember instances that represent the conceptual keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.GetSourceRelationalKeys">
            <summary>
            Gets the relational keys from the source side of the association.
            </summary>
            <returns>A collection of MetaColumn instances that represent the relational keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.GetTargetRelationalKeys">
            <summary>
            Gets the relational keys from the target side of the association.
            </summary>
            <returns>A collection of MetaColumn instances that represent the relational keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.AssociationType">
            <summary>
            Gets or sets the association type of associations available in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.Source">
            <summary>
            Gets or sets the source persistent type of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.Target">
            <summary>
            Gets or sets the target persistent type of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.SourceEnd">
            <summary>
            Gets or sets the navigation member on the source end of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.TargetEnd">
            <summary>
            Gets or sets the navigation member on the target end of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.AssociationParts">
            <summary>
            Gets the list of parts of the association.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor">
            <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType)">
            <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="joinTable">defines the join table used by the current association.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="sequenceColumn">defines the sequence column for the join table used by the current association.</param>
            <param name="joinTable">defines the join table used by the current association.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Boolean,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="source">The source persistent type of the association.</param>
            <param name="target">The target persistent type of the association.</param>
            <param name="sourceEnd">The source end navigation member of the association.</param>
            <param name="targetEnd">The target end navigation member of the association.</param>
            <param name="sequenceColumn">defines the sequence column for the join table used by the current association.</param>
            <param name="joinTable">defines the join table used by the current association.</param>
            <param name="shouldUpdateSchema">defines a value indicating whether the relational store definition for the current type requires modification.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetJoinTableSourceKeys">
            <summary>
            Gets the columns from the join table that point to the source table of the association.
            </summary>
            <returns>A collection of the columns that point to the source table of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetJoinTableTargetKeys">
            <summary>
            Gets the columns from the join table that point to the target table of the association.
            </summary>
            <returns>A collection of the columns that point to the target table of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetSourceConceptualKeys">
            <summary>
            Gets the conceptual keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaMember instances that represent the conceptual keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetTargetConceptualKeys">
            <summary>
            Gets the conceptual keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaMember instances that represent the conceptual keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetSourceRelationalKeys">
            <summary>
            Gets the relational keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaColumn instances that represent the relational keys of the association.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.GetTargetRelationalKeys">
            <summary>
            Gets the relational keys from the source or target side of the association.
            </summary>
            <returns>A collection of MetaColumn instances that represent the relational keys of the association.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.SequenceColumn">
            <summary>
            Gets the sequence column for the join table used by the current association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.JoinTable">
            <summary>
            Gets the join table used by the current association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ShouldUpdateSchema">
            <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.FromConstraintName">
            <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to enforce the 'from end' of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ToConstraintName">
            <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to enforce the 'to end' of the association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.KeyConstraintName">
            <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to associate the key values of this association with the join table.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.#ctor">
            <summary>
            Initializes a new instance of the MetaDictionaryAssociation class with the association type as a parameter.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Boolean,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaDictionaryAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="source">The source persistent type of the association.</param>
            <param name="sourceEnd">The source end navigation member of the association.</param>
            <param name="joinTable">defines the join table used by the current association.</param>
            <param name="shouldUpdateSchema">defines a value indicating whether the relational store definition for the current type requires modification.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.GetDictionaryKeyColumns">
            <summary>
            Gets the columns that are mapped to the Key of the Dictionary property that is described by this association.
            </summary>
            <returns>A collection of the key columns.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.GetDictionaryValueColumns">
            <summary>
            Gets the columns that are mapped to the Value of the Dictionary property that is described by this association.
            </summary>
            <returns>A collection of the key columns.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaDictionaryAssociation.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaFunctionResultShape">
            <summary>
            Defines the result shape of a stored procedure.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaType">
            <summary>
            Represents a base class for all types in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaType.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaType.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="namespace">defines the namespace of the type</param>
            <param name="description">defines the description of the MetaType</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaType.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.TypeAccessModifier,Telerik.OpenAccess.Metadata.TypeInheritanceModifier,System.String)">
            <summary>
            Initializes a new instance of the MetaTypeBase class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="namespace">defines the namespace of the type</param>
            <param name="container">defines the root container that contains the whole metadata model.</param>
            <param name="accessModifier">defines the Type access modifier for a member </param>
            <param name="inheritanceModifier">defines the Type inheritance modifier for a member</param>
            <param name="description">defines the description of the MetaScopeType</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaType.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.Namespace">
            <summary>
            Gets the namespace of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.FullName">
            <summary>
            Gets the full name that includes both namespace and name of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.TypeAccessModifier">
            <summary>
            Gets the Type access modifier for a member
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.TypeInheritanceModifier">
            <summary>
            Gets the Type inheritance modifier for a member
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.MetaDataContainer">
            <summary>
            The root instance containing the meta model where the current type is defined.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.Members">
            <summary>
            Gets a list of the current type members.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaType.Interfaces">
            <summary>
            Gets the list of persistent interfaces implemented by the current type.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionResultShape.#ctor">
            <summary>
            hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionResultShape.Clone">
            <summary>
            hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionResultShape.CompareCore(System.Object)">
            <summary>
            hidden
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ModelStringHelper">
            <summary>
            Helper class for various string operations
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.SplitFullNameToNameAndNamespace(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Splits the full name of a class to its name and namespace tokens
            </summary>
            <param name="fullName">The full name of the class</param>
            <param name="name">The name of the class</param>
            <param name="nameSpace">The namespace of the class</param>
            <param name="assemblyFullName">The full name of the assembly in which this type resides</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.GetImplementedMemberFieldName(Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the field name of a MetaMember that will be copied to an inheritor class.
            </summary>
            <param name="baseMember">The MetaMember to be implemented</param>
            <param name="inheritor">The class that implements the MetaMember.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.GetImplementedMemberFieldName(System.String,System.String)">
            <summary>
            Gets the field name of a MetaMember that will be copied to an inheritor class.
            </summary>
            <param name="fieldName">The field name of the MetaMember to be implemented.</param>
            <param name="prefix">The name of the base type.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.GetImplementedMemberPropertyName(Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the property name of a MetaMember that will be copied to an inheritor class.
            </summary>
            <param name="baseMember">The MetaMember to be implemented.</param>
            <param name="inheritor">The class that will be implementing the MetaMember.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.GetImplementedMemberPropertyName(System.String,System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="interfaceName"></param>
            <param name="targetClass"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.GetOriginalName(System.String)">
            <summary>
            Gets the original name of a member before it has been implemented.
            </summary>
            <param name="nameWithDot">Name of the field or property.</param>
            <returns>The original name of the MetaMember.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaItemAttribute`1">
            <summary>
            Provides additional information about types and their members. In the Telerik Data Access metadata type hierarchy, 
            MetaItemAttribute instances provide additional information about members through the declared type for the member.
            The attributes can be accessed via the MetaDataProperties collection of the base MetaItem type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.attributeValuesStore">
            <summary>
            MetaItemAttribute metadata Id.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0)">
            <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,Telerik.OpenAccess.Metadata.MetaAttributeKind,`0)">
            <summary>
            Initializes a new instance of the MetaItemAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="kind">defines the kind</param>
            <param name="defaultValue">defines the default value</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,`0)">
            <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="defaultValue">defines the default value</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor">
            <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and kind as parameters.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,Telerik.OpenAccess.Metadata.MetaAttributeKind,`0,Telerik.OpenAccess.Metadata.MetaValuesStore)">
            <summary>
            Initializes a new instance of the MetaItemAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="kind">defines the kind</param>
            <param name="defaultValue">defines the default value</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,Telerik.OpenAccess.Metadata.MetaAttributeKind,Telerik.OpenAccess.Metadata.MetaValuesStore)">
            <summary>
            Initializes a new instance of the MetaItemAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="kind">defines the kind</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Initialize(Telerik.OpenAccess.Metadata.MetadataConstants,Telerik.OpenAccess.Metadata.MetaAttributeKind,Telerik.OpenAccess.Metadata.MetaValuesStore)">
            <summary>
            Initializes the members with values passed through the constructor.
            </summary>
            <param name="key">The attribute key.</param>
            <param name="kind">The attribute kind.</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Reset">
            <summary>
            Resets the value of this meta item attribute.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Clone">
            <summary>
            Clones this meta item attribute.
            </summary>
            <returns>A cloned instance of this meta item attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.CloneValue">
            <summary>
            Clone the value property of the attribute.
            </summary>
            <returns>Returns the cloned value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.System#ICloneable#Clone">
            <summary>
            Clones this meta item attribute.
            </summary>
            <returns>A cloned instance of this meta item attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.GetValue``1">
            <summary>
            Gets the value of a property and/or field.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <returns>The value of a property and/or field.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.GetDefaultValue">
            <summary>
            Gets the default value of a property and/or field.
            </summary>
            <returns>The value of a property and/or field.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.SetDefaultValue(System.Object,System.Object)">
            <summary>
            Sets the default value of a property and/or field.
            </summary>
            <param name="notifyingProperty">The property that triggers the update notification.</param>
            <param name="defaultValue">The actual value of the property that is being set.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.SetValue``1(System.Object,``0@,``0)">
            <summary>
            Sets the value on a property and/or field and fires a notification event.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <param name="notifyingProperty"> The property that triggers the update notification.</param>
            <param name="field">Reference to the updated field.</param>
            <param name="value">The value of the field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Attach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Attach to the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Detach(Telerik.OpenAccess.Metadata.IMetadataStatusCallback)">
             <summary>
            Detach from the event source.
             </summary>
             <param name="sink">The callback instance that propagates the notification to the event sink.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.CompareTo(Telerik.OpenAccess.Metadata.MetaItemAttribute{`0})">
            <summary>
            Compares two attributes based upon their key, kind and value. 
            </summary>
            <param name="other">attribute being compared to.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Telerik#OpenAccess#Metadata#IExtendedMetaItemAttribute#AttributeValuesStore">
            <summary>
            Gets or sets the AttributesValueStore.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Key">
            <summary>
            Gets or sets the name of this meta item attribute.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Value">
            <summary>
            Gets or sets the value of this meta item attribute.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Telerik#OpenAccess#Metadata#IMetaItemAttribute#Value">
            <summary>
            Gets or sets the value of this meta item attribute.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Kind">
            <summary>
            Gets or sets the kind of the meta item attribute
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.DefaultValue">
            <summary>
            Gets or sets the default value for this meta item attribute
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.HasValue">
            <summary>
            Gets whether the attribute has a value set.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute`1.Telerik#OpenAccess#Metadata#IMetaItemAttribute#DefaultValue">
            <summary>
            Gets or sets the default value for this meta item attribute
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MultipleBackendAttribute`1.AttributeMultiValuesStore">
            <summary>
            MetaItemAttribute metadata Id.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MultipleBackendAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,Telerik.OpenAccess.Metadata.MetaValuesMultiBackendStore)">
            <summary>
            Initializes a new instance of the primitive MultipleBackendAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MultipleBackendAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,Telerik.OpenAccess.Metadata.Backend,Telerik.OpenAccess.Metadata.MetaValuesMultiBackendStore)">
            <summary>
            Initializes a new instance of the primitive MultipleBackendAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="backend">defines the default backend</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MultipleBackendAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,`0,Telerik.OpenAccess.Metadata.MetaAttributeKind,`0,Telerik.OpenAccess.Metadata.Backend,Telerik.OpenAccess.Metadata.MetaValuesMultiBackendStore)">
            <summary>
            Initializes a new instance of the MultipleBackendAttribute with a key and value as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="value">defines the value</param>
            <param name="kind">defines the kind</param>
            <param name="defaultValue">defines the backend for which the value is valid.</param>
            <param name="backend">defines the default backend</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MultipleBackendAttribute`1.#ctor(Telerik.OpenAccess.Metadata.MetadataConstants,Telerik.OpenAccess.Metadata.MetaAttributeKind,Telerik.OpenAccess.Metadata.MetaValuesMultiBackendStore)">
            <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and kind as parameters.
            </summary>
            <param name="key">defines the key value</param>
            <param name="kind">defines the kind</param>
            <param name="store">The default value store for the attribute.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CaseChangeModes">
            <summary>
            Represents a mode used to change the case of the letters in a string.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Unchanged">
            <summary>
            The string is not changed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Capitalize">
            <summary>
            The first letter of each word in the string is capitalized.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.CamelCase">
            <summary>
            The leading character of each word except the first one is capitalized .
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.PascalCase">
            <summary>
            The leading character of each word is capitalized.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Lower">
            <summary>
            All letters are changed to lower case.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Upper">
            <summary>
            All letters are changed to upper case.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.INamingStrategy">
            <summary>
            Common interface for defining Naming strategies that are used during model mapping
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetValidIdentifier(System.String)">
            <summary>
            Returns language specific valid identifier name based on a provided word.
            </summary>
            <param name="word">Word to process</param>
            <returns>Language specific valid identifier name based on a provided word.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetScalarFieldName(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Returns name of a field with scalar type
            </summary>
            <param name="propertyName"></param>
            <param name="userFieldName"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetScalarPropertyName(System.String,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetSelfReferenceFieldName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="declarationType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetSelfReferencePropertyName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetReferencePropertyName(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            
            </summary>
            <param name="declaringType"></param>
            <param name="referencedType"></param>
            <param name="metaForeignKeyMember"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetReferencePropertyName(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember,System.String)">
            <summary>
            
            </summary>
            <param name="declaringType"></param>
            <param name="referencedType"></param>
            <param name="metaForeignKeyMember"></param>
            <param name="inverseMemberName"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetSelfReferenceNavigationPropertyName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="declarationType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetReferencePropertyCollectionName(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            
            </summary>
            <param name="declaringType"></param>
            <param name="referencedType"></param>
            <param name="metaForeignKeyMember"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetAssociationName(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetadataContainer,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourcePersistentType"></param>
            <param name="targetPersistentType"></param>
            <param name="container"></param>
            <param name="isManyToMany"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetAssociationName(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            
            </summary>
            <param name="association"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetAssociationName(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourcePersistentTypeName"></param>
            <param name="targetPersistentTypeName"></param>
            <param name="container"></param>
            <param name="isJoinTable"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetClassName(System.String,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="persistentClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetClassName(System.String,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType},System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="persistentClasses"></param>
            <param name="schemaName"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetIndexName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.INamingStrategy.GetProcedureName(System.String,Telerik.OpenAccess.Metadata.CUDOperation,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure})">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="operation"></param>
            <param name="storedProcedures"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.INamingStrategy.GenerateUniqueNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.INamingStrategy.NamingSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ModelNamingSettings">
            <summary>
            Naming settings for a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ModelNamingSettings.GetDefaultNamingSettings(System.String)">
            <summary>
            Gets the default naming settings for the specified project language.
            </summary>
            <param name="projectLanguage">The project language.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.ClassRules">
            <summary>
            Gets or sets the Naming settings for the classes in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.FieldRules">
            <summary>
            Gets or sets the Naming settings for the fields in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.PropertyRules">
            <summary>
            Gets or sets the Naming settings for the properties in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.NavigationPropertyRules">
            <summary>
            Gets or sets the Naming settings for the properties in a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NamingRules">
            <summary>
            Defines naming rules used for constructing the names of the different meta model artifacts.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.AddPrefix">
            <summary>
            Gets or sets a prefix which will be added to the name of the meta item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.AddSuffix">
            <summary>
            Gets or sets a suffix which will be added to the name of the meta item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemovePrefix">
            <summary>
            Gets or sets a prefix which will be removed from the name of the meta item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemoveSuffix">
            <summary>
            Gets or sets a suffix which will be removed from the name of the meta item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.CaseMode">
            <summary>
            Gets or sets the case mode of the meta item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.PluralizationMode">
            <summary>
            Gets or sets the pluralization mode of the meta item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.PluralizationModeCollections">
            <summary>
            Gets or sets the pluralization mode of the meta item collection property names.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemoveUnderscore">
            <summary>
            Gets or sets a value indicating whether underscores should be removed from the meta item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.UnderscoreAsWordDelimiter">
            <summary>
            Gets or sets a value indicating whether underscores should be treated as word delimiters in a meta item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.SchemaNameAsPrefix">
            <summary>
            Gets or sets a value indicating whether the schema name should be applied as prefix to the meta item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.CapitalLetterAsWordDelimiter">
            <summary>
            Gets or sets a value indicating whether the capital letter will be treated as a start of a new word.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.NavigationReferenceMode">
            <summary>
            Gets or sets the navigation reference mode of the meta navigation reference property names.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.NavigationCollectionMode">
            <summary>
            Gets or sets the navigation collection mode of the meta navigation collection property names.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.ShouldApplyPropertyNamingRuleOnReference">
            <summary>
            Gets or Sets a value indicating whether the property naming rules should be applied on references.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NamingRules.IsPrefixSuffixEnabled">
            <summary>
            Gets or Sets a value indicating whether adding or removing of the prefix and suffixes is enabled.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.PluralizationModes">
            <summary>
            Represents a pluralization mode used to generate names for meta items.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Unchanged">
            <summary>
            The name is not changed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Singularize">
            <summary>
            The name is singularized.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Pluralize">
            <summary>
            The name is pluralized.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NamingSourceStrategy">
            <summary>
            Defines which model name is used as source for the column name generation.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NamingSourceStrategy.Field">
            <summary>
            The field name is used as source for the column name generation.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property">
            <summary>
            The property name is used as source for the column name generation; if no property name is given, the field name is used.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NamingSourceStrategy.AutomaticProperty">
            <summary>
            The field name is used as source for the column name generation; if the field is compiler generated the property name is used.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction">
            <summary>
            Describes the action that caused a CollectionChanged event. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction.Add">
            <summary>
            One or more items were added to the collection.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction.Remove">
            <summary>
            One or more items were removed from the collection.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction.Replace">
            <summary>
            One or more items were replaced in the collection.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction.Move">
            <summary>
            One or more items were moved within the collection.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction.Reset">
            <summary>
            The content of the collection changed dramatically.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs">
            <summary>
            Provides data for the CollectionChanged event.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction)">
            <summary>
            	Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a Reset change.
            </summary>
            <param name="action">The action that caused the event. This must be set to Reset.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Collections.IList)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a multi-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItems">The items that are affected by the change.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Object)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a one-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItem">The item that is affected by the change.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a multi-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a multi-item change or a Reset change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="startingIndex">The index where the change occurred.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a one-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItem">The item that is affected by the change.</param>
            <param name="index">The index where the change occurred.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a one-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a multi-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
            <param name="startingIndex">The index of the first item of the items that are being replaced.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a multi-item Move change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Move.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="index">The new index for the changed items.</param>
            <param name="oldIndex">The old index for the changed items.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a one-item Move change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Move.</param>
            <param name="changedItem">The item affected by the change.</param>
            <param name="index">The new index for the changed item.</param>
            <param name="oldIndex">The old index for the changed item.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.#ctor(Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedEventArgs class that describes a one-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
            <param name="index">The index of the item being replaced.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.NewItems">
            <summary>
            Gets the list of new items involved in the change.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.OldItems">
            <summary>
            Gets the list of items affected by a Replace, Remove, or Move action.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.NotifyMetadataCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Gets the index at which a Move, Remove, or Replace action occurred.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.OpenAccessType">
            <summary>
            Telerik Data Access abstraction for the native sql types
            </summary>
            <remarks>
            Each supported database has its own type system. This makes it necessary to have different mappings
            for different databases (MS SQL Server has a nvarchar(max), oracle has a varchar2).
            The OpenAccessType is an abstraction above all backend types. It is possible to specify one 
            OpenaccessType for all backends and the backends can then map to their respective types. As long as only
            OpenAccessTypes are used in the mapping, the mapping is database independent and can be used 
            with all backends.
            </remarks>
            <seealso cref="e:Backend"/>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Undefined">
            <summary>Mapping not specified</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Boolean">
            <summary>A simple type representing Boolean values of true or false.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Bit">
            <summary>A simple type representing bit values of 0 or 1</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Byte">
            <summary>An 8-bit integer ranging in value from -128 to 127.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Int16">
            <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Int32">
            <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Int64">
            <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.UInt64">
            <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Guid">
            <summary>A globally unique identifier (or GUID).</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Float">
            <summary>Identifies the generic SQL type FLOAT. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Real">
            <summary>Identifies the generic SQL type REAL. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Double">
            <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Numeric">
            <summary>Identifies the generic SQL type NUMERIC. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Decimal">
            <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Character">
            <summary>A simple type representing a character.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Varchar">
            <summary>A type representing a VARCHAR value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.LongVarchar">
            <summary>A type representing a LONGVARCHAR value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.StringFixedLength">
            <summary>A type representing a CHAR value in the database with length greater than zero. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.StringVariableLength">
            <summary>A type representing a VARCHAR value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.StringInfiniteLength">
            <summary>A type representing a VARCHAR value in the database with maximum length allowed by the database server. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.UnicodeCharacter">
            <summary>A simple type representing a Unicode character.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.UnicodeStringFixedLength">
            <summary>A type representing a NCHAR value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.UnicodeStringVariableLength">
            <summary>A type representing a NVARCHAR value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.UnicodeStringInfiniteLength">
            <summary>A type representing a NVARCHAR value in the database with maximum length allowed by the database server. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Currency">
            <summary>
            A type representing currency data. Implemented as Money in most backends.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Date">
            <summary>A type representing a date value. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Time">
            <summary>A type representing a time value. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.DateTime">
            <summary>A type representing a date and time value. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Binary">
            <summary>A type representing a fixed length BINARY value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.VarBinary">
            <summary>A type representing a variable length VARBINARY with a maximum length of 8000. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.LongVarBinary">
            <summary>A type representing a variable length LONGVARBINARY value in the database. Different backends use different representations of this type.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Object">
            <summary>A general type representing any polymorphic persistent reference.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Blob">
            <summary>A variable-length stream of binary data ranging between 1 and 8,000 bytes.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Clob">
            <summary>A variable-length stream of character data ranging between 1 and 8,000 bytes.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Cursor">
            <summary>A type representing a cursor.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Other">
            <summary>A type representing a type not explicitly represented by another DbType value.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Variant">
            <summary>A type representing a SQL VARIANT value.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessType.Filestream">
            <summary>A type representing a server-side FILESTREAM column.</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.AssociationType">
            <summary>
            Defines the type of associations available in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.Reference">
            <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a reference property.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.PolymorphicReference">
            <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a reference to a class hierarchy or interface.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.Collection">
            <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a collection property.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.OneToOne">
            <summary>
            Specifies a binary association that has both ends of the association set: both sides are implemented as reference properties. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.OneToMany">
            <summary>
            Specifies a binary association that has both ends of the association set: one is reference property and the other is the 
            corresponding collection (calculated).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.OneToManyJointable">
            <summary>
            Specifies a unary association (that has a 'role' only on one of the ends) and the 'end role ' is implemented using a join table.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.ManyToManyJointable">
            <summary>
            Specifies a binary association that has both ends of the association set: both sides are implemented as collection properties. 
            The association is implemented using a join table.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.DictionaryJointable">
            <summary>
            Specifies a binary association that has both ends of the association set: one is the dictionary and the other can be a reference
            or a key value property to another dictionary.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.AssociationType.StructReference">
            <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a structure (value object) property. NOT SUPPORTED currently.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration">
            <summary>
            Provides the backend configuration settings affecting the runtime behavior of Telerik Data Access
            </summary>
            <remarks>
            The settings that can be made on the backend configuration properties will configure the
            not yet opened database in its default values. It will not affect the database in its 
            configuration once the database is opened.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties"/>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfiguration.#ctor">
            <summary>
            Creates a new instance with the default values
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfiguration.MergeBackendConfigurationFromConfigFile(Telerik.OpenAccess.BackendConfiguration)">
            <summary>
            Merges the backend configuration entries defined in the application configuration file to a BackendConfiguration object defined imperatively in code.
            </summary>
            <param name="fromCode">The compiled<see cref="T:Telerik.OpenAccess.BackendConfiguration"/> object where the settings read from configuration file will be merged to.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfiguration.MergeBackendConfigurationFromConfigFile(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.ConfigurationMergeMode)">
            <summary>
            Merges the backend configuration entries defined in the application configuration file to a BackendConfiguration object defined imperatively in code.
            </summary>
            <param name="fromCode">The compiled<see cref="T:Telerik.OpenAccess.BackendConfiguration"/> object where the settings read from configuration file will be merged to.</param>
            <param name="mergeMode">The merge mode used in case configuration properties are explicitly specified in configuration file and in code.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfiguration.MergeBackendConfigurationFromConfigFile(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.ConfigurationMergeMode,System.String)">
            <summary>
            Merges the backend configuration entries defined in the application configuration file to a BackendConfiguration object defined imperatively in code.
            </summary>
            <param name="fromCode">The compiled<see cref="T:Telerik.OpenAccess.BackendConfiguration"/> object where the settings read from configuration file will be merged to.</param>
            <param name="mergeMode">The merge mode used in case configuration properties are explicitly specified in configuration file and in code.</param>
            <param name="configurationName">The name of the backendConfiguration entry specified in the configuration file.</param>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionTimeout">
            <summary>
            Controls the timeout of database client/server connections after the last ObjectScope disposal.
            </summary>    
            <remarks>
            <para>
            Database client/server connections are closed 
            ConnectionTimeout milliseconds
            after the last object scope associated with the connection is
            disposed. If a new object scope is obtained in the meantime,
            the connection is not closed. 
            </para>
            <para>
            By default, the timeout is -1, i.e. connections are never closed. 
            </para>
            <para>
             It is mostly useful in application server scenarios, where closing
            the last ObjectScope might not immediately mean, that the database server connections
            are to be closed too.
            </para>
            </remarks>
            <value>The timeout value is given in milliseconds.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.Driver">
            <summary>
            Controls the name of the driver to be used.
            </summary>
            <remarks>
            Only in cases where the NTDS or ODP drivers are to be used you need to specify this here.
            </remarks>
            <value>genericADO2, odp, ntds (Default: genericADO2)</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.Backend">
            <summary>
            The name of the backend to be used.
            </summary>
            <value>
            String representation of a <see cref="e:Telerik.OpenAccess.Metadata.Backend"/> enumeration value.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ProviderName">
            <summary>
            The invariant name of the database driver to be used.
            </summary>
            <value>
            Invariant driver name as present in the app.config or machine.config file.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.Assemblies">
            <summary>
            Gets the list of assemblies that should be searched for persistent types.
            </summary>
            <remarks>
            You need to add your assemblies here in order to get the enhanced persistent types defined in
            them into the mapping configuration.
            </remarks>
            <value>
            Modifiable list of assemblies
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.Logging">
            <summary>
            Gets the configuration of the logging facilities.
            </summary>
            <value>
            The configuration of the logging facilities.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCache">
            <summary>
            Gets the configuration of the second level cache.
            </summary>
            <remarks>
            The second level cache is the cache that is shared amongst all <see cref="T:Telerik.OpenAccess.IObjectScope"/>
            instances connected to a database.
            </remarks>
            <value>
            The second level cache configuration.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPool">
            <summary>
            Gets the configuration of the connections and of their pooling.
            </summary>
            <remarks>
            The connection pool is the instance that creates, configures, pools and destroys real connections to the database.
            </remarks>
            <value>
            The configuration of the connection pool.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGenerator">
            <summary>
            Gets the configuration of the HIGHLOW key generator.
            </summary>
            <remarks>
            The HIGHLOW key generator is the default key generator for integer based 
            internal or application identity.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Metadata.KeyGenerator"/>
            <value>
            Configuration of the <see cref="F:Telerik.OpenAccess.Metadata.KeyGenerator.HighLow"/> key generator.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.Runtime">
            <summary>
            Gets the configuration of the runtime behavior.
            </summary>
            <remarks>
            Settings made in the configuration will not affect the database operation after opening
            it.
            </remarks>
            <value>
            The runtime behavior configuration.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInfo">
            <summary>
            Returns information about the opened connection to a specific relational backend
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration">
            <summary>
            Configuration of the logging facilities in Telerik Data Access
            </summary>
            <remarks>
            The settings made here will not change the behavior of Telerik Data Access once the database is opened.
            </remarks>
            <seealso cref="P:Telerik.OpenAccess.BackendConfiguration.Logging"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEvents">
            <summary>
            Controls the logging level.
            </summary>
            <value>
            One of: none, errors, warning, normal, verbose, info, all
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEventsToSysOut">
            <summary>
            Controls if the log output is written to System.Console.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEventsToTrace">
            <summary>
            Controls if the log output is performed with the System.Diagnostics.Trace framework.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogErrorsToWindowsEventLog">
            <summary>
            Controls if errors are logged to the Windows Application Event Log.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.StackTrace">
            <summary>
            Controls if the logging facilities append stack trace information (time consuming).
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.MaxEvents">
            <summary>
            Controls the maximum number of log event stored in the ring buffer.
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.EventStoreCapacity">
            <summary>
            Controls the maximum number of log event stored in the ring buffer.
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.MetricStoreCapacity">
            <summary>
            Controls the capacity of the metric snapshot store
            </summary>
            <value>Default: 3600</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.MetricStoreSnapshotInterval">
            <summary>
            Controls the interval to perform metric snapshots in milliseconds
            </summary>
            <value>
            Default: 1000
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.DownloaderEnabled">
            <summary>
            Controls if the log downloader background thread is used.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.Downloader">
            <summary>
            Gets the configuration of the log downloader background thread.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration">
            <summary>
            Configuration of the log downloader background thread
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventPollSeconds">
            <summary>
            Controls the time in seconds between polls of the event ring buffer
            </summary>
            <value>Default: 1</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricPollSeconds">
            <summary>
            Controls the time in seconds between polls of the metric snapshot ring buffer
            </summary>
            <value>Default: 60</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Append">
            <summary>
            Controls if the output is appended to an existing log file or if overwrite is performed
            </summary>
            <value>Default: false (overwrite)</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MaxFileSizeKB">
            <summary>
            Controls the maximum file size in KB before a rollover is performed.
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.NumberOfBackups">
            <summary>
            Controls the number of old log files to keep (x.1, x.2, ...)
            </summary>
            <value>Default: 3</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Filename">
            <summary>
            Controls the file name of the log file.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventBinary">
            <summary>
            Controls if events should be logged in binary form
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventText">
            <summary>
            Controls if events should be logged as text files.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricBinary">
            <summary>
            Controls if the metric snapshots are logged in binary form
            </summary>
            <value>
            Default: true
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Quiet">
            <summary>
            Controls the verbosity of the log downloader background thread.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.DateFormat">
            <summary>
            Controls the date time format to be used for event text.
            </summary>
            <value>Default: HH:mm:ss.FFF</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricStoreCapacity">
            <summary>
            Controls the capacity of the metric snapshot store
            </summary>
            <value>Default: 3600</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricSnapshotIntervalMSec">
            <summary>
            Controls the interval to perform metric snapshots in milliseconds
            </summary>
            <value>
            Default: 1000
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration">
            <summary>
            Configures the runtime behavior of the second level cache.
            </summary>
            <seealso cref="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCache"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Enabled">
            <summary>
            Controls if the second level cache is enabled
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.NumberOfObjects">
            <summary>
            Controls the number of objects to be cached
            </summary>
            <value>Default: 10000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.CacheQueryResults">
            <summary>
            Controls if the second level cache should also cache query results.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.NumberOfQueryResults">
            <summary>
            Controls the number of query results to cache
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.NumberOfObjectsPerQueryResults">
            <summary>
            Controls the maximum number of object in a cached query result.
            </summary>
            <remarks>
            If the query result contains a less than or equal number of results, the query result is cache,
            if the query result contains more results, the query result is not cached.
            </remarks>
            <value>Default: 500</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Strategy">
            <summary>
            Controls the default strategy to use
            </summary>
            <remarks>
            Can be overridden on a per-class base with the settings 
            <see cref="P:Telerik.OpenAccess.Metadata.MetaPersistentType.CacheStrategy"/> property.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Synchronization">
            <summary>
            Gets the configuration for the synchronization of a distributed second level cache
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration">
            <summary>
            Configuration of the distributed second level cache synchronization
            </summary>
            <remarks>
            Synchronization of the second level cache requires Microsoft Message Queue functionality
            installed and working on all participants in the distributed second level cache.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Enabled">
            <summary>
            Controls if the distributed second level cache synchronization is enabled.
            </summary>
            <remarks>Enabling the synchronization requires an operational MSMQ installation on all participant.</remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Name">
            <summary>
            The cache cluster transport type used.
            </summary>
            <remarks>
            The assembly qualified name of a user implemented cluster transport layer. 
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Cluster.OpenAccessClusterTransport"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.MulticastAddress">
            <summary>
            Controls the multicast address that is to be used by MSMQ
            </summary>
            <value>Default: unspecified</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Localpath">
            <summary>
            Controls the name of the receiving message queue.
            </summary>
            <value>Default: unspecified, dynamically created</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.App">
            <summary>
            Controls the application value on the message for filtering purposes in external clients.
            </summary>
            <value>Default: 0</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.ExpirationMSec">
            <summary>
            Controls the number of milliseconds the message has time to be received.
            </summary>
            <value>Default: 2000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.StatusDurationMSec">
            <summary>
            Controls the number of milliseconds the status information is waited for.
            </summary>
            <value>Default: 2000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Tracing">
            <summary>
            Controls if messages are send with the UseTracing property.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.AdministrationQueue">
            <summary>
            Controls the name of the administrative queue used.
            </summary>
            <value>Default: unspecified, no admin queue used</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.InitialMessageTimeoutMsec">
            <summary>
            Controls the number of milliseconds to wait for the initial message.
            </summary>
            <value>Default: 2000</value>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration">
            <summary>
            Configures the runtime settings of the HighLow key generator.
            </summary>
            <remarks>
            The HighLow key generator can further be configured with the
            MetadataContainer (table name, column names, ...).
            </remarks>
            <see cref="e:Telerik.OpenAccess.KeyGenerator.HighLow"/>
            <see cref="P:Telerik.OpenAccess.Metadata.MetadataContainer.HighLowKeyGenerator"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.GrabSize">
            <summary>
            Controls the (minimal) number of new keys fetched in one server call.
            </summary>
            <value>Default: 10</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.Start">
            <summary>
            Controls the starting value as given out by the generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the initial starting value that used by Telerik Data Access.
            </remarks>
            <value>Default: 0</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.IgnoreMissingTables">
            <summary>
            Controls the check during database open operation.
            </summary>
            <remarks>
            If a table does not exists in the database the corresponding row in the 
            keygen table is not inserted. This leads to an exception if such an object should be stored later.
            </remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.KeyColumnName">
            <summary>
            Controls the name of the column storing the table name in the highlow key generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the name of the primary key column that stores the table name.
            </remarks>
            <value>Default: table_name</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.KeyColumnOpenAccessType">
            <summary>
            Controls the sql type of the column storing the table name in the highlow key generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the sql type of the primary key column that stores the table name.
            </remarks>
            <value>Default: 12 == VARCHAR</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.KeyColumnLength">
            <summary>
            Controls the length of the column storing the table name in the highlow key generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the length of the primary key column that stores the table name.
            </remarks>
            <value>Default: 64</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.ValueColumnName">
            <summary>
            Controls the name of the column storing the most recent pk value in the highlow key generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the name of the column that stores the most recent primary key value.
            </remarks>
            <value>Default: table_name</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.TableName">
            <summary>
            Controls the table name used by the highlow key generator.
            </summary>
            <remarks>
            When a new highlow key generator table is generated, this setting
            controls the name of the table.
            </remarks>
            <value>Default: voa_keygen</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.CreateTable">
            <summary>
            Controls whether the table used by the HighLow key generator is generated automatically.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration">
            <summary>
            Configures the database connections and the connection pool
            </summary>
            <remarks>
            This instance controls how connections to the database server are configured and how they are pooled.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.Pool">
            <summary>
            Controls which ConnectionPool behavior should be used. The behavior of the ADO driver 
            or the behavior of Telerik Data Access. 
            </summary>
            <value>Default: ConnectionPoolType.Integrated</value>
            <see cref="T:Telerik.OpenAccess.ConnectionPoolType"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ActiveConnectionTimeout">
            <summary>
            Controls the time out in seconds for active connections; controls how long query results on the server are held open.
            </summary>
            <value>Default: 120</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.BlockWhenFull">
            <summary>
            Controls the behavior of the empty connection pool when a new connection is requested.
            </summary>
            <value>Default: true (blocking)</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.Reserved">
            <summary>
            Controls the number of pooled reserved connections (e.g. used by the HighLow key generator).
            </summary>
            <remarks>The number of connections in the pool that are used for key generator purposes is controlled with this value.</remarks>
            <value>Default: 1</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxActive">
            <summary>
            Controls the maximum number of active connections in the connection pool.
            </summary>
            <remarks>This value also sets the connection pool maximum size.</remarks>
            <value>Default: 10</value>            
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.IsolationLevel">
            <summary>
            Controls the isolation level that should be used on the database server.
            </summary>
            <remarks>Not all isolation levels are available with all database backends.</remarks>
            <value>One of: ReadCommitted, ReadUncommitted, RepeatableRead, Serializable, Snapshot, Chaos, Unspecified; Default: ReadCommitted</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.InitSQL">
            <summary>
            Gets a list of SQL statements that will be executed after creation of a connection before it is 
            put into the connection pool.
            </summary>
            <remarks>
            You can append SQL statements to the InitSQL list in order to perform a customization of your connections.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.DatabaseNameMapping">
            <summary>
            Gets a map of logical database name to physical database name.
            </summary>
            <remarks>
            The map that is returned by this property is used to alter logical database names to physical database 
            names. This can be useful with f.e. MSSQL.
            </remarks>
            <value>Map that maps logical name to physical name</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.Integrated">
            <summary>
            Get the Integrated ConnectionPool settings for Telerik Data Access. This is only useful when using Pool=Integrated
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestInterval">
            <summary>
            Controls the time in seconds between subsequent tests whether an idle connection is still valid.
            </summary>
            <remarks>This setting applies only to connections held by the connection pool that are idle.</remarks>
            <value>Default: 120</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxIdle">
            <summary>
            Controls the maximum number of idle connections in the connection pool.
            </summary>
            <remarks>When a connection becomes idle (unused) and is about to be returned to the connection
            pool, the decision whether to close the connection or to pool it is based on this setting.</remarks>
            <value>Default: 10</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MinIdle">
            <summary>
            Controls the minimum number of idle connections in the connection pool.
            </summary>
            <value>Default: 2</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnAlloc">
            <summary>
            Controls if connections are tested for operation when they are unpooled
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnRelease">
            <summary>
            Controls if connections are tested for operation when they are pooled
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnException">
            <summary>
            Controls if connections are tested for operation after an exception occurred
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestWhenIdle">
            <summary>
            Controls if connections are tested when they are idle
            </summary>
            <value>Default: 1</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxConnectionAge">
            <summary>
            Controls the maximum number a connection can be returned to the connection pool before it is
            closed to free accumulated resources.
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.PreparedStatementCacheEnabled">
            <summary>
            Controls if the prepared statement pool cache is enabled.
            </summary>
            <remarks>Default: true</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.PreparedStatementCacheMax">
            <summary>
            Controls the maximum number of prepared statements to be cached on a connection
            </summary>
            <value>Default: 0, unlimited</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ValidateSQL">
            <summary>
            Controls the SQL that is used to test connections for operation
            </summary>
            <value>Default: null, automatically generated based on the backend</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ConnectRetryCount">
            <summary>
            Controls the number of connect retries that are attempted until a connection can be established
            </summary>
            <remarks>This value applies only to the non-first connection made to the database.</remarks>
            <value>Default: 30</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ConnectRetryIntervalMSec">
            <summary>
            Controls the time between connect retry attempts in milliseconds.
            </summary>
            <remarks>This value applies only to the non-first connection made to the database.</remarks>
            <value>Default: 1</value>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration">
            <summary>
            Configures settings for the Internal connection management provided by Telerik Data Access.
            </summary>
            <remarks>
            This instance controls how connections to the database server are configured and how they are pooled.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.TestInterval">
            <summary>
            Controls the time in seconds between subsequent tests whether an idle connection is still valid.
            </summary>
            <remarks>This setting applies only to connections held by the connection pool that are idle.</remarks>
            <value>Default: 120</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.MaxIdle">
            <summary>
            Controls the maximum number of idle connections in the connection pool.
            </summary>
            <remarks>When a connection becomes idle (unused) and is about to be returned to the connection
            pool, the decision whether to close the connection or to pool it is based on this setting.</remarks>
            <value>Default: 10</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.MinIdle">
            <summary>
            Controls the minimum number of idle connections in the connection pool.
            </summary>
            <value>Default: 2</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.TestOnAlloc">
            <summary>
            Controls if connections are tested for operation when they are unpooled
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.TestOnRelease">
            <summary>
            Controls if connections are tested for operation when they are pooled
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.TestOnException">
            <summary>
            Controls if connections are tested for operation after an exception occurred
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.TestWhenIdle">
            <summary>
            Controls if connections are tested when they are idle
            </summary>
            <value>Default: 1</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.MaxConnectionAge">
            <summary>
            Controls the maximum number a connection can be returned to the connection pool before it is
            closed to free accumulated resources.
            </summary>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.ConnectRetryCount">
            <summary>
            Controls the number of connect retries that are attempted until a connection can be established
            </summary>
            <remarks>This value applies only to the non-first connection made to the database.</remarks>
            <value>Default: 30</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.ConnectRetryIntervalMSec">
            <summary>
            Controls the time between connect retry attempts in milliseconds.
            </summary>
            <remarks>This value applies only to the non-first connection made to the database.</remarks>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.PreparedStatementCacheEnabled">
            <summary>
            Controls if the prepared statement pool cache is enabled.
            </summary>
            <remarks>Default: true</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.PreparedStatementCacheMax">
            <summary>
            Controls the maximum number of prepared statements to be cached on a connection
            </summary>
            <value>Default: 0, unlimited</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.IntegratedConfiguration.ValidateSQL">
            <summary>
            Controls the SQL that is used to test connections for operation
            </summary>
            <value>Default: null, automatically generated based on the backend</value>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration">
            <summary>
            Configures the runtime
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MediumTrust">
            <summary>
            Controls if medium-trust environments are supported.
            </summary>
            <remarks>Under medium trust, some operations cannot be performed and the Telerik Data Access runtime must be
            made aware of this. This affects things where privileged operations are needed.</remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.WriteArtificialTypesToDisk">
            <summary>
            Controls if assemblies containing artificial types are written to disk.
            </summary>
            <remarks>Artificial types can be generated at runtime. To aid debugging, the assemblies in which those types 
            are contained can be written to disk. Artificial types assemblies are never loaded from disk, however.</remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.SupportConcurrentThreadsInScope">
            <summary>
            Controls if the runtime supports concurrent threads within one objects scope.
            </summary>
            <remarks>
            Enabling the support for concurrent threads will turn on additional synchronization
            which can affect performance.
            </remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CheckSchemaConsistencyOnStartup">
            <summary>
            Controls if the class/table mapping is validated on startup of the application.
            </summary>
            <remarks>Enabling the startup check will require some time when the database is opened.</remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CheckObjectConsistencyOnCommit">
            <summary>
            Controls whether the consistency of the object graph in the local cache is ensured. If set to 'true', this makes sure that all birectional relationships 
            (one-many and many-many) are in sync.
            </summary>
            <remarks>
            This setting is useful when using managed collections. Since this a time consuming operation it should be used for debugging purposes only.
            </remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReadOnly">
            <summary>
            Controls if write operations against the database are permitted.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LockTimeoutMSec">
            <summary>
            Controls the lock time out in milliseconds.
            </summary>
            <remarks>The value that is given with this property is passed to the database server.</remarks>
            <value>Default: 5000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LockSqlSuffix">
            <summary>
            Gets or sets the SQL that is appended to a 'SELECT FOR UPDATE' statement which is used to obtain a write lock when using pessimistic concurrency control.
            </summary>
            <remarks>The specified value is passed to the database server when locking requests are made.</remarks>
            <value>Default: FOR UPDATE. This value is backend specific</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CloseScopesWithActiveTransaction">
            <summary>
            Controls if closing of an object scope with an active transaction is allowed.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CloseDatabaseWithActiveTransactions">
            <summary>
            Controls if closing a database with active transactions is allowed.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.PerformanceCounter">
            <summary>
            Gets or sets whether performance counters for the Second level cache and Second level cache cluster are enabled.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.PerformanceCounterName">
            <summary>
            Gets or sets the name of the performance counter instance.
            </summary>
            <value>Default: "{ConnectionId}-{ProcessId}"</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ParallelFetchingEnabled">
            <summary>
            Gets or sets whether parallel fetching of a sub collection is enabled.
            </summary>
            <remarks>
            Parallel fetching allows the use of multiple result sets, if the backend supports it, in a combined way for an improved performance
            </remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.StatementBatchingEnabled">
            <summary>
            Controls statement batching for modifying operations.
            </summary>
            <remarks>
            Some database backends (MSSQL,Oracle,Postgres) provide support for batching DML operations (INSERT/UPDATE/DELETE)
            to reduce the number of network accesses. When StatementBatchingEnabled is <c>True</c>, the DML operations will
            be done in batches if multiple rows on the same table are involved.
            <para>
            This property controls if the statement batching should occur for those database systems that support it.
            </para>
            </remarks>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.StatementBatchingThreshold">
            <summary>
            Controls the threshold for using statement batching of modifying operations.
            </summary>
            <remarks>
            This property controls the threshold that enables the statement batching. If in a transaction N similar modification
            operations need to be performed and N is bigger than the value of this property, statement batching can occur.
            <para>
            If you find the overhead of actual batching operations to big, increase the value of this property.
            </para>
            </remarks>
            <value>Default: 1 (Two or more similar rows could be handled in a batched operation.)</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.StatementBatchingSize">
            <summary>
            Controls the maximum amount of batched modification operations.
            </summary>
            <remarks>
            This property controls the amount of operations batched together on the ADO driver level. If statement batching
            occurs, the resulting network packets can get large (depending on the data used), and this setting can then
            be used to reduce the size of the packets at the expense of creating more packets overall.
            <para>
            The value is passed into the <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize"/> property.
            </para>
            </remarks>
            <value>Default: 100 (100 rows will be handled together by the ADO driver.)</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReadWithoutTransactions">
            <summary>
            Controls if normal query operations are done without database transactions.
            </summary>
            <value>Default: true</value>
            <remarks>
            This property controls whether simple queries can be performed outside of database transactions. 
            Queries issued for locking purposes or user given SQL queries will create transactions
            regardless of this setting.
            When the <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.Connection"/> property is accessed, a transaction will
            be started too.
            LINQ and OQL queries and lazy loading will obey this setting.
            <para>
            Changing this setting to <c>false</c> can have a negative effect on performance, as more client/server
            calls are involved.
            </para>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.InterceptDefaultFetchGroupFieldAccess">
            <summary>
            Gets or sets if the optimized code path is used for fields in the default fetch group
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowReadAfterDispose">
            <summary>Controls if read operations on the already fetched instances are allowed after managing context disposal.</summary>
            <remarks>This property controls if read access on existing persistent objects is allowed after the managing context has been disposed.</remarks>
            <value><c>True</c> for allowing read access after the managing context has been disposed.</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowReadAfterDelete">
            <summary>Controls if read operations on the already deleted instances are allowed.</summary>
            <remarks>This property controls if read access on existing persistent objects is allowed after it has been deleted.</remarks>
            <value><c>True</c> for allowing read access after the object has been deleted.</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.Hyperdrive">
            <summary>For internal use only</summary>
            <remarks>This property controls the HypderDrive feature.</remarks>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ClassBehavior">
            <summary>
            Controls the default modification behavior of persistent types.
            </summary>
            <value>One of: readwrite, readonly, insertonly; Default: readwrite</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CacheReferenceType">
            <summary>
            Controls the type of reference that is used in the cache of the object scope.
            </summary>
            <remarks>When objects and states (prefetched data) are held strongly, it is
            normally necessary to dispose the object scope as otherwise the referenced 
            memory cannot be garbage collected.</remarks>
            <value>Default: AUTO</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.DatabaseTransactionLocking">
            <summary>
            Controls which objects are locked when pessimistic concurrency control is used.
            </summary>
            <value>One of: FIRST, NONE, ALL; Default: FIRST</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReturnNullForRowNotFound">
            <summary>
            Controls if null is to be returned when an object is not found.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.RequirePersistentClasses">
            <summary>
            Controls if the opening of a database requires persistent classes to be present.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.Optimistic">
            <summary>
            Controls if optimistic transactions are used or pessimistic locking is to be performed.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.Concurrency">
            <summary>
            Specifies which concurrency control is used
            </summary>
            <remarks>
            Optimistic and pessimistic modes can be chosen. The pessimistic implicit mode can be fine tuned by setting 
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.DatabaseTransactionLocking"/> to "FIRST" or "ALL" additionally.
            </remarks>
            <value>The <see cref="T:Telerik.OpenAccess.TransactionMode"/> to specify the concurrency control.</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.RetainConnectionInOptimisticTransaction">
            <summary>
            Controls if the connection is to be retained in optimistic transactions.
            </summary>
            <remarks>
            The default is to return the connection back into the connection pool.
            </remarks>
            <value>One of: null, true, false; Default: null</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ScopeImplementationPoolEnabled">
            <summary>
            Controls if the implementation objects underlying the object scope can be pooled.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ScopeImplementationPoolMaxIdle">
            <summary>
            Controls the maximum number of idle scope implementation objects.
            </summary>
            <value>Default: 8</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CompiledQueryCacheSize">
            <summary>
            Controls the maximum number of queries that are kept in the precompiled query cache.
            </summary>
            <remarks>The precompiled query cache is the one that holds already computed translations from
            OQL / LINQ to the corresponding SQL expressions.</remarks>
            <value>Default: 1000, unlimited</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.UseUTCForAutoSetValues">
            <summary>
            Controls if the datetime values that are automatically set during commit will use UTC.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.UseUTCForReadValues">
            <summary>
            Controls if the datetime values that are read will be converted to use UTC.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.NullsFirst">
            <summary>
            Controls if the database will use NULLS FIRST sorting.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LikeWithEscape">
            <summary>
            Controls if the database will use the LIKE operator with the ESCAPE character set to backslash.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.HasTempTables">
            <summary>
            Controls is the database will attempt to use temporary tables.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.OnlyMetadata">
            <summary>
            Controls if the OpenAccessContext will be created to obtain only the Metadata and not actually connect to the database.
            </summary>
            <value>Default: false</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricCapacity">
            <summary>
            Controls the number of metric snapshots that will be held internally.
            </summary>
            <remarks>A value of 60*60 = 3600 would allow to buffer metric snapshots for one hour when the <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricInterval"/>
            is set to 1000 milliseconds.
            <para>
            The metric snapshots will be held in a ring buffer.
            </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/>
            <value>Default: 0</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricInterval">
            <summary>
            Controls the time span between two metric snapshots in milliseconds
            </summary>
            <remarks>A value less than 100 is not settable and will default to 1000 (=1 second).
            <para>
            The overall duration for which metric snapshots are held in the internal ring buffer can be
            calculated by <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricCapacity"/> * <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MetricInterval"/> (in milliseconds).
            Example: MetricInterval=1000ms * MetricCapacity=3600 would allow to store the metric snapshots of the last 1 hour
            </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.DatabaseMetricsCollection"/>
            <value>Default: 1000</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowNonNullableColumnsInVerticalInheritance">
            <summary>
            Allows the generation of non nullable columns in vertically inherited classes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.DefaultStreamBufferSize">
            <summary>
            Gets or sets the default buffer size for Stream fields.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.PrepareCommands">
            <summary>
            Controls the creation of prepared commands used to perform CRUD operations.
            </summary>
            <value>Default: true</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowCascadeDelete">
            <summary>
            Controls the default behavior for deletion when nothing is specified on the class level in the MetadataContainer. 
            </summary>
            <remarks>
            Cascading deletes can speed up the deletion process as dependent table rows are automatically deleted
            be the database server, eliminating costly C/S calls.
            <para>
            Cascading delete behavior is currently available for all vertical tables and multi-table entities. 
            </para>
            If nothing is specified for a given persistent type, this value controls if cascading delete is performed.
            That means, you can explicitly turn it on/off for a given class (via <see cref="P:Telerik.OpenAccess.Metadata.MetaPersistentType.UseCascadeDelete"/>) or 
            you can control the behavior by setting this AllowCascadeDelete property.
            </remarks>
            <value>Default: false</value>
            <seealso cref="T:Telerik.OpenAccess.Metadata.CascadeDeleteOption"/>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CommandTimeout">
            <summary>
            Controls the global CommainTimeout value in seconds that is set to all DbCommands used in Telerik Data Access.
            </summary>
            <remarks>
            <para>
            Different database servers can interpret the provided value differently.
            For example SQL Compact Edition currently does no support non zero timeouts.
            </para>
            <para>
            Other BackendConfiguration settings can also affect the behavior of commands and their timeout.
            See <see cref="P:Telerik.OpenAccess.RuntimeConfiguration.LockTimeoutMSec"/> and 
            <see cref="P:Telerik.OpenAccess.ConnectionPoolConfiguration.ActiveConnectionTimeout"/>.
            </para>
            </remarks>
            <value>Default: 30 (seconds)</value>
            <seealso cref="P:Telerik.OpenAccess.QueryOptions.CommandTimeout"/>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfiguration.BackendInformation">
            <summary>
            Information about the used relational Backend.
            </summary>
            <remarks>
            This class is read only and provides calculated information about the opened connection to a relational backend.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MajorVersion">
            <summary>
            The major version number reported by the connected relational server.
            </summary>
            <value>The major version as reported by the database server</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MinorVersion">
            <summary>
            The minor version number reported by the connected relational server.
            </summary>
            <value>The minor version as reported by the database server</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.ExtensionName">
            <summary>
            The name that can be used to mark mapping notes backend specific
            </summary>
            <value>The version specific name for configuration extensions</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.Name">
            <summary>
            The name of the backend.
            </summary>
            <value>The name of the database backend</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.Backend">
            <summary>
            The backend identifier.
            </summary>
            <value>The identifier for the backend.</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.ProviderFactory">
            <summary>
            Gets the provider factory of the backend.
            </summary>
            <value>The provider factory instance used</value>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MaximumNumberOfQueryParameters">
            <summary>
            Indicates what is the maximum allowed number of parameters in single SQL query
            </summary>
            <remarks>
            In case you are building big dynamic queries that rely on the maximum number of parameters, 
            please note that Telerik Data Access can introduce number internal parameters when translating LINQ queries to SQL.
            Due to this fact it is not advised to operate close to the maximum parameter count limit.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MaximumNumberOfInValues">
            <summary>
            Indicates what is the maximum allowed number of values in a SQL IN clause
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.SupportsTemporaryTables">
            <summary>
            Indicates whether the backend supports temporary table or not
            </summary>
            <remarks>
            Even it backend system supports temporary tables this feature can be disabled by backend administrators
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.Delimiters">
            <summary>
            Gets the delimiters to be used for tables and column names.
            </summary>
            <remarks>
            First element has left, second the right delimiter.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.ParameterPrefix">
            <summary>
            Gets the prefix of a parameterized value.
            </summary>
            <remarks>
            The value returned is the prefix of the parameter in the SQL (e.g. ... WHERE x.Id = @p1).
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.DatabaseLevelCache">
            <summary>
            Level two cache controlling
            </summary>
            <remarks>
            The level two cache managing instance can be reached from the <see cref="T:Telerik.OpenAccess.Database"/> instance.
            All functions can be used to control the content of the second level cache. If objects need to 
            be evicted from the cache several functions are available.
            </remarks>
            <example>
            How to evict all Person instances from the cache
            <code>
            Database db = Database.Get("DatabaseConnection1");
            db.Cache.EvictAll(typeof(Person)),false);
            </code>
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll(System.Type,System.Boolean)">
            <summary> Evict all information for all persistent instances of a Class from the
            second level cache.
            </summary>
            <param name="type">Type of persistent instances to be evicted
            </param>
            <param name="includeSubclasses">If true then instances of derived are also
            evicted
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.Evict(Telerik.OpenAccess.IObjectId)">
            <summary> Evict all information for an IObjectId instance from the second level cache. This is a NOP
            if there is no information in the cache for the IObjectId instance.
            </summary>
            <param name="oid">IObjectId of the persistent instance to be evicted
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.IObjectId})">
            <summary> Evict all information for a collection of IObjectId instances from the second level cache.
            </summary>
            <param name="oids">Collection of IObjectId of the persistent instances to be evicted
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.Evict(Telerik.OpenAccess.ObjectKey)">
            <summary> Evict all information for a specified ObjectKey instance from the second level cache. This is a NOP
            if there is no information in the cache for the ObjectKey instance.
            </summary>
            <param name="objectKey">ObjectKey of the persistent instance to be evicted
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})">
            <summary> Evict all information for a collection of ObjectKey instances from the second level cache.
            </summary>
            <param name="entityKeyList">Collection of ObjectKey of the persistent instances to be evicted
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll">
            <summary> Evict all persistent instances from the second level cache.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.IsCached(Telerik.OpenAccess.IObjectId)">
            <summary>True if object is cached, false if not.</summary>
            <param name="oid">IObjectId instance of the persistent object that should be checked.</param>
        </member>
        <member name="M:Telerik.OpenAccess.DatabaseLevelCache.IsCached(Telerik.OpenAccess.ObjectKey)">
            <summary>True if object is cached, false if not.</summary>
            <param name="objectKey">ObjectKey instance of the persistent object that should be checked.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Backend">
            <summary>
            Telerik Data Access supported backend specification
            </summary>
            <remarks>
            Higher byte represents the server family, lower byte represents a specific version.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql">
            <summary>Microsoft Sql Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2000">
            <summary>Microsoft Sql Server 2000</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2005">
            <summary>Microsoft Sql Server 2005</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2008">
            <summary>Microsoft Sql Server 2008</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2012">
            <summary>Microsoft Sql Server 2012</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2014">
            <summary>Microsoft Sql Server 2014</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2016">
            <summary>Microsoft Sql Server 2016</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle">
            <summary>Oracle Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle9">
            <summary>Oracle Server 9.0</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle10">
            <summary>Oracle Server 10.0</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle11">
            <summary>Oracle Server 11.0</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle12">
            <summary>Oracle Server 12.0</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.MySql">
            <summary>MySql Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.SqlAnywhere">
            <summary>Sybase IAnywhere Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Ads">
            <summary>Sybase Advantage Database Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Firebird">
            <summary>Firebird Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.SqlCe">
            <summary>Microsoft Sql CE Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.Azure">
            <summary>Microsoft Sql Azure Server</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.VistaDb">
            <summary>VistaDB embedded database</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.SQLite">
            <summary>SQLite embedded database</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.PostgreSql">
            <summary>PostgreSql 8.4</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.FamilyMask">
            <summary>Mask to get the server family</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Backend.VersionMask">
            <summary>Mask to get the server version</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CodeGenDataAttribute">
            <summary>
            Serves as a holder for the CLR attributes a MetaItem may be tagged with.
            These attributes are then applied during the code generation of the Telerik Data Access persistent classes when attribute only mapping is used.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.CodeGenDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the CodeGenDataAttribute class.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.DefaultMapping">
            <summary>
            Default Mapping for Metadata container
            </summary>
            <remarks>
            If a mapping is not specified, the default mapping is used.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultMapping.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultMapping.SetAttributeValue``1(System.Object,Telerik.OpenAccess.Metadata.MetadataConstants,``0)">
            <summary>
            Sets the value on a property and/or field and fires a notification event.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <param name="notifyingProperty"> The property that triggers the update notification.</param>
            <param name="key">Attribute key used to resolve the field.</param>
            <param name="value">The value of the field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultMapping.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultMapping.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.DefaultMapping.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.Default">
            <summary>
            Returns the original values for the default mappings (not altered by user).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.OptimisticConcurrencyControlStrategy">
            <summary>
            Controls the default value for the concurrency control strategy.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.CacheStrategy">
            <summary>
            Controls the default value for the cache strategy.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.InheritanceStrategy">
            <summary>
            Controls the default value for the interitance strategy.
            </summary>
            <remarks>
            Allowed values are <see cref="F:Telerik.OpenAccess.InheritanceStrategy.Flat"/> and <see cref="F:Telerik.OpenAccess.InheritanceStrategy.Vertical"/>.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.DiscriminatorValue">
            <summary>
            Controls which equation is used to calculate the discriminator value per object.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.AlwaysCreateIndexOnJoinTableValueColumns">
            <summary>
            Controls the default value for the index generation in join tables.
            </summary>
            <remarks>
            Join tables are generated for mapped collections. If only one side of the m:n is visible in the model, per default 
            only the index on the collection side is generated. This speeds up the insert operations but slows down the delete and
            extra join operations in queries. To compensate this performance drawbacks, the second index can always be generated.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.NullForeignKey">
            <summary>
            Controls the default value for whether foreign keys can be null.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseDelimitedSQL">
            <summary>
            Controls if plain or delimited SQL is used.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.ClrMap">
            <summary>
            Gets the default translation of CLR types into the ADO world.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.AdoMap">
            <summary>
            Gets the default translation of ADO types.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForInsert">
            <summary>
            Controls whether stored procedures are used for insert operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForUpdate">
            <summary>
            Controls whether stored procedures are used for update operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForDelete">
            <summary>
            Controls whether stored procedures are used for delete operations
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.FieldDirection">
            <summary>
            Defines identifiers used to indicate the direction of parameter and argument
            declarations.
            </summary>    
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.In">
            <summary>
            An incoming field.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.Out">
            <summary>
            An outgoing field.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.Ref">
            <summary>
            A field by reference.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ComposableType">
            <summary>
            Represents a wrapper around a runtime Type for design time purposes
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.String)">
            <summary>
            Initializes a new Composable type instance
            </summary>
            <param name="fullName">Defines the full name of the type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new Composable type instance
            </summary>
            <param name="name">Defines the name of the type</param>
            <param name="nameSpace">Defines the namespace of the type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.Type)">
            <summary>
            Initializes a new Composable type instance
            </summary>
            <param name="type">Defines all properties of the type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.GetFullName(System.String,System.String)">
            <summary>
            Gets the full name of a class.
            </summary>
            <param name="name">The name of the class.</param>
            <param name="nameSpace">The namespace of the class.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ComposableType.Equals(System.Object)">
            <summary>
            Determines if the underlying system type of the current System.Type is the
            same as the underlying system type of the specified System.Object.
            </summary>
            <param name="object">The System.Object whose underlying system type is to be compared with the underlying system type of the current System.Type.</param>
            <returns>
            true if the underlying system type of o is the same as the underlying system
            type of the current System.Type; otherwise, false. This method also returns
            false if the object specified by the o parameter is not a Type.
            </returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ComposableType.UnderlyingSystemType">
            <summary>
            Gets the underlying CLR Type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ComposableType.Name">
            <summary>
            Gets the name of the current type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ComposableType.FullName">
            <summary>
            Gets the full name of the current type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ComposableType.Namespace">
            <summary>
            Gets the namespace on which the current type is defined
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ComposableType.AssemblyQualifiedName">
            <summary>
            Gets the assembly qualified name if it is defined.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IColumnDescriptor">
            <summary>
            Description of a mapped column
            </summary>
            <remarks>
            The returned description provides access to the information as present in the current mapping.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/>
            <seealso cref="T:Telerik.OpenAccess.Metadata.ITableDescriptor"/>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IColumnDescriptor.Name">
            <summary>
            Gets the name of the column in delimited form.
            </summary>
            <remarks>
            The delimited form can be different between various backends. 
            </remarks>
            <example>
            <para>
            MSSQL: [My First Column]
            </para>
            <para>
            MySQL: `My First Column`
            </para>
            <para>
            Oracle: "My First Column"
            </para>
            </example>
            <value>Delimited name of the column</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IColumnDescriptor.Table">
            <summary>
            Gets the description for the table that this column is part of.
            </summary>
            <remarks>
            A table consists of at least one column.
            </remarks>
            <value>
            Description of the table
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IdentityType">
            <summary>
            Defines identifiers for types of entities identity provided by the Telerik Data Access.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.IdentityType.Default">
            <summary>
            Specifies that the default value for the identity type will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.IdentityType.Internal">
            <summary>
            Specifies that the identity is managed internally for the type by Telerik Data Access and it is not visible as a field in the type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.IdentityType.SingleField">
            <summary>
            Specifies that a single field in the respective type will hold the identity information.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.IdentityType.MultipleField">
            <summary>
            Specifies that a multiple fields in the respective type will hold the identity information.
            Also one needs to provide a class that implements the IOblectId and manages the identity information.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.InheritanceStrategy">
            <summary>
            Defines identifiers for types of inheritance provided by the Telerik Data Access.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InheritanceStrategy.Default">
            <summary>
            Specifies that the default value for the inheritance strategy will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.InheritanceStrategy.Flat">
            <summary>
            Defines an inheritance strategy where all classes share a single table. 
            Discriminator column is required for the complete definition.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InheritanceStrategy.Vertical">
            <summary>
            Defines an inheritance strategy where each type has its own table. The table contains only the members defined for the respective type.
            The root base type table must contain a discriminator column.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InheritanceStrategy.Horizontal">
            <summary>
            Defines an inheritance strategy where each type has its own table. As the base types should be abstract, they will not have tables mapped to 
            them and every concrete type will have columns that contain base class fields information.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ITableDescriptor">
            <summary>
            Contains a description of a mapped table .
            </summary>
            <remarks>
            The returned description provides access to the information as present in the current mapping.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/>
            <seealso cref="T:Telerik.OpenAccess.Metadata.IColumnDescriptor"/>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ITableDescriptor.Name">
            <summary>
            Gets the complete name of the table in delimited form.
            </summary>
            <remarks>
            <para>
            The complete name includes the schema name in delimeted form, e.g. [My Schema].[My Table] .
            </para>
            <para>
            The delimited form can be different between various backends. 
            </para>
            </remarks>
            <example>
            <para>
            MSSQL: [My First Table]
            </para>
            <para>
            MySQL: `My First Table`
            </para>
            <para>
            Oracle: "My First Table"
            </para>
            </example>
            <value>Delimited name of the column</value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.KeyGenerator">
            <summary>
            Defines the key generator used for a specific table in the backend
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Default">
            <summary>
            Specifies that the default value for the key generator will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Autoinc">
            <summary>
            Defines the 'AUTOINC' key generator
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Guid">
            <summary>
            Defines the 'Guid' key generator
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.HighLow">
            <summary>
            Defines the 'HighLow' key generator
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Verify">
            <summary>
            Defines the 'Verify' key generator
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.IncrementalGuid">
            <summary>
            Defines the 'INCREMENTALGUID' key generator
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MemberAccessModifier">
            <summary>
            Defines the access modifiers for the MetaMember class
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Public">
            <summary>
            Public
            A public member.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Assembly">
            <summary>
            Assembly
            A member that is accessible to any class within the same assembly.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Private">
            <summary>
            Private
            A private member.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Family">
            <summary>
            Family
            A member that is accessible within the family of its class and derived classes.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.FamilyOrAssembly">
            <summary>
            FamilyOrAssembly
            A member that is accessible within its class, its derived classes in any
            assembly, and any class in the same assembly.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MemberInheritanceModifier">
            <summary>
            Defines the inheritance modifiers for the MetaMember class
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.None">
            <summary>
            None
            No inheritance modifier applied.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.Abstract">
            <summary>
            Abstract
            An abstract member.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.Final">
            <summary>
            Final
            A member that cannot be overridden in a derived class.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaAttributeKind">
            <summary>
            Enumeration that specifies the kind of the MetaAttribute
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Primitive">
            <summary>
            Specifies that a meta attribute is of primitive kind
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Reference">
            <summary>
            Specifies that a meta attribute is of reference kind
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Collection">
            <summary>
            Specifies that a meta attribute is of collection kind
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Complex">
            <summary>
            Specifies that a meta attribute is of complex kind
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataContainer">
             <summary>
             On the conceptual level, the MetaDataContainer class represents a container that will be mapped to a 
             database object in the storage. The MetaDataContainer class can describe all persisant storage artifacts like tables, views, 
             stored procedures, indexes, constraints, etc. It also can describe all conceptual level artifacts like classes, properties, fields, 
             relationships, etc.
             </summary>
             <example>
             <code>
            class GenericPC
            {
            
                public GenericPC()
                {
                }
            
                public MetaDataContainer GetMetadataInfo()
                {
                    return Database.MetaData;
                }
            }
             </code>
             </example>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MetadataContainer class.
            </summary>
            <param name="description">defines the description of the MetadataContainer</param>
            <param name="name">defines the name of the MetadataContainer</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor">
            <summary>
            Initializes a new instance of the MetadataContainer class without a name and description.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MetadataContainer class with a name.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.ToString">
            <summary>
            Returns a temporary string representation of the content of this container.
            </summary>
            <remarks>The returned representation is not stable and can change at any time without further announcement.</remarks>
            <returns>Content of the container in a string representation</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.FromString(System.String)">
            <summary>
            Returns a meta data container whose content was deserialized from the temporary representation.
            </summary>
            <remarks>The value of the <paramref name="temporaryRepresentation"/> parameter can be obtained by
            the <see cref="M:Telerik.OpenAccess.Metadata.MetadataContainer.ToString"/> method.</remarks>
            <param name="temporaryRepresentation">String representation of the content</param>
            <returns>Filled MetaDataContainer</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.GetContainerIdentifier">
            <summary>
            Computes hash code identifying the object based on the PersistentTypes names
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.PersistentTypes">
            <summary>
            Gets a list of types that are mapped to the corresponding artifacts like tables available in the relational store.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Associations">
            <summary>
            Gets a list of associations that connect pairs of persistent types.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Tables">
            <summary>
            Gets a list of tables that are available in the current container instance.
            </summary>
            <remarks>During runtime the Tables collection contains both Tables and Views, because the Telerik Data Access runtime treats them in the same way.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Views">
            <summary>
            Gets a list of views that are available in the current container instance.
            </summary>
            <remarks>During runtime the Views collection will be empty.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Constraints">
            <summary>
            Gets a list of constraints that are available in the current container instance.
            </summary>
            <remarks>If the information inside the current container instance is populated by an already mapped model, it will contain only the constraints that are 
            involved in the actual model (not all available in the relational store).</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Indexes">
            <summary>
            Gets a list of indexes that are available in the current container instance.
            </summary>
            <remarks>If the information inside the current container instance is populated by an already mapped model, it will contain only the indexes that are 
            involved in the actual model (not all available in the relational store).</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.StoredProcedures">
            <summary>
            Gets a list of stored procedures that are available in the current container instance.
            </summary>
            <remarks>If the information inside the current container instance is populated by an already mapped model, it will contain only the stored procedures 
            that are auto-generated for CUD operations related to the model (the reverse-mapped procedures are directly generated as static instances on a static 
            class and they are not contained currently in the collection.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Schemas">
            <summary>
            Gets a list of schema names that are available in the current container instance.
            </summary>
            <remarks>If the information inside the current container instance is populated by an already mapped model, it will contain only the schema names that are 
            involved in the actual model (not all available in the relational store).</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Interfaces">
            <summary>
            Gets a list of persistent interfaces that can be implemented by some of the persistent types
            that are part of the current container instance
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Structs">
            <summary>
            Gets a list of persistent structs that can be referenced by some of the persistent types
            that are part of the current container instance
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.UserDefinedTypes">
            <summary>
            Gets a list of user defined types in the database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.DefaultMapping">
            <summary>
            Gets the default mapping. This is used for all non specified settings at the mapping nodes.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.HighLowKeyGenerator">
            <summary>
            Gets the settings for the high low key generator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.UniqueIdGenerator">
            <summary>
            Gets the settings for the unique id generator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.NameGenerator">
            <summary>
            Gets the settings for the name generator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.BackendType">
            <summary>
            Gets the settings for the backend type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.DefaultNamespace">
            <summary>
            Gets or sets the default namespaces for the persistent types in this metadata container.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.RootNamespace">
            <summary>
            Gets the root namespace for the persistent types in this metadata container. Used mainly in VB .NET scenarios.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Functions">
            <summary>
            Gets the functions collection.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation">
            <summary>
            Represents a foreign key association in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor">
            <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType)">
            <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
            <param name="type">Defines the association type of associations available in the Telerik Data Access meta model.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.Relational.MetaConstraint,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">Defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="constraint">Defines the constraint applied to the current association. If no constraint is applied, null is returned.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.Relational.MetaConstraint,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">Defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="constraint">Defines the constraint applied to the current association. If no constraint is applied, null is returned.</param>
            <param name="discriminatorColumn">Defines the discriminator column if this association requires a discriminator column.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.Relational.MetaConstraint,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaAssociationPart})">
            <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with all properties passed as parameters.
            </summary>
            <param name="name">Defines the name of the association</param>
            <param name="type">Defines the association type of associations available in the Telerik Data Access meta model.</param>
            <param name="source">The source persistent type of the association.</param>
            <param name="target">The target persistent type of the association.</param>
            <param name="sourceEnd">The source end navigation member of the association.</param>
            <param name="targetEnd">The target end navigation member of the association.</param>
            <param name="constraint">Defines the constraint applied to the current association. If no constraint is applied, null is returned.</param>
            <param name="associationParts">The parts that define the association.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.HasDiscriminatorColumn">
            <summary>
            Gets whether the association requires a discriminator column. If the corresponding end in the association is represented by a type
            stored in a table that is polymorphic (contains multiple types)in the data store.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.DiscriminatorColumn">
            <summary>
            Gets the discriminator column for this association if it requires a discriminator column. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.Constraint">
            <summary>
            Gets the constraint applied to the current association. If no constraint is applied, null is returned.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.ValidAssociationDiscriminations">
            <summary>
            Gets the list of MetaTypeDiscrimination instances,each of which defines a type that is a valid association end
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaFunction">
            <summary>
            Represents the conceptual model for the function 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.MetaFunctionParameter,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.String)">
            <summary>
            Initializes a new MetaFunction instance with the required parameters
            </summary>
            <param name="functionName">defines the name of the function</param>
            <param name="functionNamespace">defines the functions namespace</param>
            <param name="description">defines the description of the function</param>
            <param name="returnParameter">defines the parameter being returned from the function</param>
            <param name="procedure">defines the stored procedure that is represented by the function</param>'
            <param name="commandText">defines command text to be used with this procedure</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.#ctor">
            <summary>
            Initializes a new MetaFunction instance with the required parameters
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.Parameters">
            <summary>
            Gets the parameters of the function
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.ReturnParameter">
            <summary>
            Gets the return parameter of the function
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.StoredProcedure">
            <summary>
            Gets the stored procedure that corresponds to the function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.CommandText">
            <summary>
            Gets the defined command text
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.FunctionType">
            <summary>
            Gets or sets the type of the function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.ReturnType">
            <summary>
            Gets or sets the return type of the function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.FullName">
            <summary>
            Gets the full name that includes both namespace and name of the current function.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaFunctionParameter">
            <summary>
            Represents a function parameter
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.FieldDirection,System.String)">
            <summary>
            Initializes a new MetaFunctionParameter instance with the required parameters
            </summary>
            <param name="name">defines the name of the parameter</param>
            <param name="type">defines the type of the parameter</param>
            <param name="direction">defines the direction of the parameter</param>
            <param name="description">defines the direction of the parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.#ctor">
            <summary>
            Initializes a new MetaFunctionParameter instance with the required parameters
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunctionParameter.Type">
            <summary>
            Gets or sets the type of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaFunctionParameter.Direction">
            <summary>
            Gets or sets the direction of the parameter
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator">
            <summary>
            Represents the settings for HIGHLOW key generator.
            </summary>
            <remarks>
            The settings apply when the key generator <see cref="F:Telerik.OpenAccess.Metadata.KeyGenerator.HighLow"/> is used.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.TableName">
            <summary>
            Controls the name of the table that is used by the HighLow key generator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.KeyColumnName">
            <summary>
            Controls the name of the column that holds the table names.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.ValueColumnName">
            <summary>
            Controls the name of the column that holds the highest value.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.KeyColumnLength">
            <summary>
            Controls the length of the column that holds the table names.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.CreateTable">
            <summary>
            Controls whether the table used by the HighLow key generator is generated automatically.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.PKConstraintName">
            <summary>
            Controls the name of the primary key constraint for the table that hold the keys and values of the HighLow key generator.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaMember">
            <summary>
            Represents a member that can be declared in any MetaType. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Initializes a new instance of the MetaMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="memberType">defines the type of the member.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.#ctor(System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.LoadBehavior,System.Boolean,Telerik.OpenAccess.Metadata.MemberAccessModifier,Telerik.OpenAccess.Metadata.MemberInheritanceModifier,System.String)">
            <summary>
            Initializes a new instance of the MetaMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="memberType">defines the type of the member.</param>
            <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated with it.</param>
            <param name="artificial">defines whether this field is marked as artificial.</param>
            <param name="accessKind">defines the type of access to user data for the current type.</param>
            <param name="loadBehavior">defines whether this field is part of the default fetch group</param>
            <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
            <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
            <param name="memberAccessModifier">defines the access modifier for the member</param>
            <param name="description">defines the description for the field</param>
            <param name="inheritanceModifier">defines the inheritance modifier for the member</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.GetMetaTypeKind(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Gets the MetaAttributeKind for a MetaType instance.
            </summary>
            <param name="type">The MetaType for which the MetaAttributeKind is calculated.</param>
            <returns>MetaAttributeKind.Reference if the MetaType is a MetaPersistentType. MetaAttributeKind.Complex, otherwise. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.CheckMemberType(Telerik.OpenAccess.Metadata.MetaType)">
             <summary>
             Checks if a MetaType instance is compatible with the actual implementation of MemberType.
             </summary>
            <param name="type">The MetaType that is checked for compatibility.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaMember.CalculatePrimaryHash">
            <summary>
            Calculates the hash value that uniquely identifies this instance.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.PropertyName">
            <summary>
            Gets the property name that is associated with this member on the conceptual level.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsVisible">
            <summary>
            Gets a value indicating whether the meta member is visible on the declaring type level or only associated with it.
            For example such are the internal identity meta members - they are bound ot each entity, but they are not visible as a
            customer browsable member of the class.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.DeclaringType">
            <summary>
            Gets the type on which this member is declared.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsArtificial">
            <summary>
            Gets whether this field is marked as artificial.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.LoadingBehavior">
            <summary>
            Gets whether this field is part of the default fetch group.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.DataAccessKind">
            <summary>
            Gets the type of access to user data for the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.NullValueBehavior">
            <summary>
            Gets the behavior of the member in case null value is assigned to it
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberAccessModifier">
            <summary>
            Gets the access modifier for the member
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberInheritanceModifier">
            <summary>
            Gets the inheritance modifier for the member
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsStructMember">
            <summary>
            Gets or sets whether the current type represents a member of a structure value type.
            </summary>
            <remarks>Structures are stored as embedded resources, i.e they do not have their own table. Structure fields are stored embedded 
            in the table of their owning object, i.e. they are "flattened" as additional columns into the parents table.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberDefinitionType">
            <summary>
            Gets or sets the name of type where this member is originally defined.
            </summary>
            <remarks>
            This property is used only in cases where the member is inherited from a base type in cases of horizontal inheritance or an interface.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaMember.SplitTable">
            <summary>
            Gets the table to which this member is mapped.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaNameGenerator">
            <summary>
            Represents the settings for the default name generator.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNameGenerator.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNameGenerator.SetAttributeValue``1(System.Object,Telerik.OpenAccess.Metadata.MetadataConstants,``0)">
            <summary>
            Sets the value on a property and/or field and fires a notification event.
            </summary>
            <typeparam name="V">Type of the field value.</typeparam>
            <param name="notifyingProperty"> The property that triggers the update notification.</param>
            <param name="key">Attribute key used to resolve the field.</param>
            <param name="value">The value of the field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNameGenerator.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNameGenerator.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNameGenerator.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.Default">
            <summary>
            Returns the original default values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxTableNameLength">
            <summary> Controls the max length in characters for a table name.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxColumnNameLength">
            <summary> Controls the max length in characters for a column name.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PKFieldSuffix">
            <summary> Controls the suffix added to table or field names to name primary key
            columns. The default is _id so the pk for the employee table will
            be employee_id.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxConstraintNameLength">
            <summary> Controls the max length in characters for a constraint name.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxIndexNameLength">
            <summary> Controls the max length in characters for an index name.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxProcedureNameLength">
            <summary> Controls the max length in characters for a procedure name.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PKConstraintNamePrefix">
            <summary> Controls the prefix added to a table name to generate its primary key
            constraint name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.FKConstraintNamePrefix">
            <summary> Set the prefix added to a reference constraint name. </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.WordBreak">
            <summary> Controls the string used to break 'words' when generating names from
            field and class names and so on.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SequenceColumnName">
            <summary> Cnotrols the name used for sequence columns in link tables. These are used
            to preserve the order of elements in ordered collections (lists and
            arrays).
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.ValueColumnName">
            <summary> Controls the name used for value columns in link tables where the values
            are not references to PC instances.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.KeyColumnName">
            <summary> Controls the name used for keys columns in link tables for maps where the
            keys are not references to PC instances.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DiscriminatorColumnName">
            <summary> Controls the name used for classId columns. These are added to the table for
            the base class in an inheritance hierarchy.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.IndexNamePrefix">
            <summary> Controls the prefix used to generate index names.</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.UseModelNames">
            <summary> Controls whether shortened/mangled names are to be used for tables and
            columns or if model names (class names, field names) are to be used.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PolyRefDiscriminatorColumnSuffix">
            <summary>
            Controls the string appended for polymorphic reference class id columns.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.Disambiguate">
            <summary>
            Controls whether duplicate names are disambiguated by appending an unique number.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DisambiguateJoinTables">
            <summary>
            Controls whether duplicate join table names are disambiguated by appending an unique number.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DisambiguateConstraints">
            <summary>
            Controls whether duplicate constraint names are disambiguated by appending an unique number.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.EnforceSimpleNames">
            <summary>
            Controls if non-standard characters like '/' are replaced even when model names are used.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPDeleteFormat">
            <summary>
            Controls the name format for delete procedures.
            </summary>
            <remarks>
            The format string can use 0=tablename 1=classname 2=action 3=maxnamelength in string.Format style.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPDeleteJoinTableRowFormat">
            <summary>
            Controls the name format for join table row delete procedures.
            </summary>
            <remarks>
            The format string can use 0=tablename 1=classname 2=action 3=maxnamelength in string.Format style.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPUpdateFormat">
            <summary>
            Controls the name format for update procedures.
            </summary>
            <remarks>
            The format string can use 0=tablename 1=classname 2=action 3=maxnamelength in string.Format style.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPInsertFormat">
            <summary>
            Controls the name format for insert procedures.
            </summary>
            <remarks>
            The format string can use 0=tablename 1=classname 2=action 3=maxnamelength in string.Format style.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.NameCanStartWithUnderscore">
            <summary>
            Controls whether names can start with underscores; database dependend.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SourceStrategy">
            <summary>
            Controls whether the field or property name is used as input
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.ResolveReservedWords">
            <summary>
            Controls whether the generated identifier will be checked for conflicts with backend reserved words.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.RemoveCamelCase">
            <summary>
            Controls whether the camel casing of the input string is removed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.RemoveLeadingUnderscores">
            <summary>
            Gets or sets whether leading underscores in the input string are removed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaNavigationMember">
            <summary>
            Represents a MetaNavigationMember in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
            <param name="memberType">defines the type of the member.</param>
            <param name="association">defines the association that manages the 'end' represented by the current type.</param>
            <param name="keyType">defines the key type of the dictionary if this is member is represents a dictionary field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
            <param name="memberType">defines the type of the member.</param>
            <param name="association">defines the association that manages the 'end' represented by the current type.</param>
            <param name="master">defines the information whether the current type represents the 'master role' end of a association</param>
            <param name="managed">defines whether association's end integrity is managed by Telerik Data Access</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.LoadBehavior,System.Boolean,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,System.Boolean,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated 
            with it.</param>
            <param name="artificial">defines whether this field is marked as artificial.</param>
            <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
            <param name="memberType">defines the type of the member.</param>
            <param name="association">defines the association that manages the 'end' represented by the current type.</param>
            <param name="master">defines the information whether the current type represents the 'master role' end of a association</param>
            <param name="managed">defines whether association's end integrity is managed by Telerik Data Access</param>
            <param name="depend">defines whether the state of association's end that the current member represents is dependent on the 
            operations applied on the corresponding end of the association.</param>
            <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
            <param name="accessKind">defines the type of access to user data for the current type.</param>
            <param name="defaultFetchGroup">defines whether this field is part of the default fetch group</param>
            <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
            <param name="keyType">defines the key type of the dictionary if this is member is represents a dictionary field</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.GetMetaTypeKind(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Gets the MetaAttributeKind for a MetaType instance.
            </summary>
            <param name="type">The MetaType for which the MetaAttributeKind is calculated.</param>
            <returns>MetaAttributeKind.Reference. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.GetOppositeMember">
            <summary>
            Gets the navigation member on the opposite side of the association where the current member participates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Multiplicity">
            <summary>
            Gets the multiplicity information about the relationship's end represented by the current type. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Association">
            <summary>
            Gets the association that manages the 'end' represented by the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Master">
            <summary>
            Gets the information whether the current type represents the 'master role' end of a association.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.IsManaged">
            <summary>
            Gets whether association's end integrity is managed by Telerik Data Access.
            </summary>
            <remarks>
            It is important that one-to-many and many-to-many relationships are consistent in your model. 
            If one side of the relationship is out of sync with the other side then either the database will not be updated properly 
            or stale data will be left in the 2nd level cache. If you are using managed relationships then this is usually taken care of 
            by Telerik Data Access. If you are using unmanaged relationships then you must handle this in your code.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.IsDependent">
            <summary>
            Gets whether the state of association's end that the current member represents is dependent on the operations applied on the 
            corresponding end of the association. It allows operations like cascading deletes to be executed.
            </summary>
            <remarks>Cascading deletes are disabled by default and are only enabled for references specified as dependent, by adding the 
            [OpenAccess.Depend] attribute to the referenced persistent class.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.OrderBy">
            <summary>
            Gets or sets the 'OrderBy' expression used in the SQL query when obtaining the records 
            that are part of a collection.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.KeyType">
            <summary>
            Gets the key type of the member if this member represents a dictionary field.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.ClrType">
            <summary>
            Gets the .Net runtime type
            </summary>
            <remarks>
            This property will have a value of <c>null</c> during design time.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaPersistentType">
            <summary>
            Represents a persistent type in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.MetaPersistentType.MetadataId">
            <summary>
            MetaItem metadata Id.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="nameSpace">defines the namespace of the type</param>
            <param name="table">defines the table mapped to the current type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="nameSpace">defines the namespace of the type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor">
            <summary>
            Initializes a new instance of the MetaType class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.InheritanceStrategy,Telerik.OpenAccess.Metadata.KeyGenerator,System.Nullable{System.Int32},System.String,Telerik.OpenAccess.OptimisticConcurrencyControlStrategy,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.IdentityType,System.String,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.CacheStrategy,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.String)">
            <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="nameSpace">defines the namespace of the type</param>
            <param name="container">defines the root container that contains the whole metadata model.</param>
            <param name="table">defines the table mapped to the current type</param>
            <param name="inheritanceStrategy">defines the inheritance strategy</param>
            <param name="keyGenerator">defines the key generator used</param>
            <param name="classId">defines the class Id</param>
            <param name="discriminatorValue"></param>
            <param name="optimisticConcurrencyControlStrategy">defines the concurrency control mechanism.</param>
            <param name="updateSchema">defines whether the relational store definition for the current type requires modification.</param>
            <param name="artificial">defines value that represents if the current type is artificial.</param>
            <param name="identityType">defines the identity type of the current type.</param>
            <param name="identityClassType">defines the System.Type of the class that represents the identity of the current type</param>
            <param name="accessKind">defines the type of access to user data for the current type.</param>
            <param name="cacheStrategy">The database level cache strategy </param>
            <param name="discriminatorColumn">defines the column that hold the discriminator value</param>
            <param name="description">defines the description of the class</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.InheritanceStrategy,Telerik.OpenAccess.Metadata.KeyGenerator,System.Nullable{System.Int32},System.String,Telerik.OpenAccess.OptimisticConcurrencyControlStrategy,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.IdentityType,System.String,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.CacheStrategy,Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.TypeAccessModifier,Telerik.OpenAccess.Metadata.TypeInheritanceModifier,System.String)">
            <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
            <param name="name">defines the name of the type</param>
            <param name="nameSpace">defines the namespace of the type</param>
            <param name="container">defines the root container that contains the whole metadata model.</param>
            <param name="table">defines the table mapped to the current type</param>
            <param name="inheritanceStrategy">defines the inheritance strategy</param>
            <param name="keyGenerator">defines the key generator used</param>
            <param name="classId">defines the class Id</param>
            <param name="discriminatorValue"></param>
            <param name="optimisticConcurrencyControlStrategy">defines the concurrency control mechanism.</param>
            <param name="updateSchema">defines whether the relational store definition for the current type requires modification.</param>
            <param name="artificial">defines value that represents if the current type is artificial.</param>
            <param name="identityType">defines the identity type of the current type.</param>
            <param name="identityClassType">defines the System.Type of the class that represents the identity of the current type</param>
            <param name="accessKind">defines the type of access to user data for the current type.</param>
            <param name="cacheStrategy">The database level cache strategy </param>
            <param name="discriminatorColumn">defines the column that hold the discriminator value</param>
            <param name="accessModifier">defines the Type access modifier for the class</param>
            <param name="inheritanceModifier">defines the Type inheritance modifier for the class</param>
            <param name="description">defines the description of the class</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.OnPropertyChanged(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Allows clients to receive property change notification.
            </summary>
            <param name="owner">The instance that raised the event.</param>
            <param name="propertyName">The name of the changed property.</param>
            <param name="newValue">The value of the property before the change.</param>
            <param name="oldValue">THe new value assigned to the property.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.CalculatePrimaryHash">
            <summary>
            Calculates the hash value that uniquely identifies this instance.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.CreateEntityInstance">
            <summary>
            Creates a new entity instance of the current persistent type
            </summary>
            <remarks>
            In order to create a new instance the FullName of the current MetaPersistentType should be valid.
            Returns new entity instance described by the current MetaPersistentType instance.
            </remarks>
            <returns>New entity instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.CreateEntityInstance(Telerik.OpenAccess.OpenAccessContextBase)">
            <summary>
            Creates a new entity instance of the current persistent type
            </summary>
            <remarks>
            Returns new entity instance described by the current MetaPersistentType instance.
            </remarks>
            <param name="context">The OpenAccessContext instance that should handle this type.</param>
            <returns>New entity instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.GetMembers(System.Boolean)">
            <summary>
            Returns enumeration of the persistent type's members
            </summary>
            <remarks>
            If includeBaseTypeMembers is set to True, the function will enumerate all members including the ones defined in the inheritance hierarchy.
            Otherwise will return only the members defined in the immediate MetaPersistentType instance.
            </remarks>
            <param name="includeBaseTypeMembers">Flag indicating whether or not to include inherited members from base class(es)</param>
            <returns>Enumeration of MetaMembers that are contained in the current persistent type or it's base type(s)</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.Table">
            <summary>
            Gets the MetaTable instance that is mapped to the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.BaseType">
            <summary>
            Gets or sets the type from which the current type directly inherits.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DerivedTypes">
            <summary>
            Gets a list of types that have the current type as their base type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.InheritanceStrategy">
            <summary>
            Gets the inheritance strategy for the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.KeyGeneratorName">
            <summary>
            Gets the name of the key generator used.
            </summary>
            <remarks>Currently no custom key generators are allowed, only the provided with Telerik Data Access</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.KeyGeneratorMember">
            <summary>
            Gets the name of the field name used by the key generator .
            </summary>
            <remarks>Currently only one field can be marked as THE field:</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.ClassId">
            <summary>
            The in-memory Id used to distinguish a particular instance.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DiscriminatorValue">
            <summary>
            The database class ID used to distinguish a particular instance when loaded.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DiscriminatorColumn">
            <summary>
            Gets the column that holds the discriminator value
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.OptimisticConcurrencyControlStrategy">
            <summary>
            Gets the concurrency control strategy used during write time.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.ShouldUpdateSchema">
            <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IsArtificial">
            <summary>
            Gets whether this field is marked as artificial.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IdentityType">
            <summary>
            Gets the identity type of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IdentityClassTypeName">
            <summary>
            Gets the name for the class that represents the identity of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DataAccessKind">
            <summary>
            Gets the type of access to user data for the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.FetchGroups">
            <summary>
            Gets the fetch groups defined for the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.CacheStrategy">
            <summary>
            Gets the database level cache strategy 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.ShouldDeleteOrphans">
            <summary>
            Control if an instance of this class should be deleted when it has no parent instance in a 1:m relationship.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.SplitTables">
            <summary>
            Gets a list of table that have the current type is mapped to.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.UseCascadeDelete">
            <summary>
            Controls the Cascade Delete behavior for this class.
            </summary>
            <remarks>
            If <code>Default</code> is specified, the behavior is controlled by 
            the <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.AllowCascadeDelete"/> property.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaPrimitiveMember">
            <summary>
            Represents a member that can be declared in any MetaType. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="memberType">defines the type of the member.</param>
            <param name="column">defines the name of the column within the data source to map from.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="memberType">defines the type of the member.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.LoadBehavior,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.MemberAccessModifier,System.String,Telerik.OpenAccess.Metadata.MemberInheritanceModifier,Telerik.OpenAccess.Metadata.DateTimeAutosetMode)">
            <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
            <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
            <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
            <param name="memberType">defines the type of the member.</param>
            <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated with it.</param>
            <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
            <param name="artificial">defines whether this field is marked as artificial.</param>
            <param name="column">defines the name of the column within the data source to map from.</param>
            <param name="identity">defines whether the current type represents the owner's type identity.</param>
            <param name="version">defines whether the current type represents the owner's type version.</param>
            <param name="accessKind">defines the type of access to user data for the current type.</param>
            <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
            <param name="classId">defines whether the current type represents the owner's class identity.</param>
            <param name="defaultFetchGroup">defines whether this field is part of the default fetch group</param>
            <param name="serializedToBlob">defines whether this field is serialized to a blob column</param>
            <param name="accessModifier">defines the access modifier for the member</param>
            <param name="description">defines the description of the member</param>
            <param name="inheritanceModifier">defines the inheritance modifier for the member</param>
            <param name="autosetMode">controls the DateTime field actions during insert and update operations</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor">
            <summary>
            Initializes a new instance of the MetaPrimitiveMember class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.GetMetaTypeKind(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Gets the MetaAttributeKind for a MetaType instance.
            </summary>
            <param name="type">The MetaType for which the MetaAttributeKind is calculated.</param>
            <returns>MetaAttributeKind.Reference. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.CheckMemberType(Telerik.OpenAccess.Metadata.MetaType)">
             <summary>
             Checks if a MetaType instance is compatible with the actual implementation of MemberType.
             </summary>
            <param name="type">The MetaType that is checked for compatibility.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.OnPropertyChanged(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Allows clients to receive property change notification.
            </summary>
            <param name="owner">The instance that raised the event.</param>
            <param name="propertyName">The name of the changed property.</param>
            <param name="newValue">The value of the property before the change.</param>
            <param name="oldValue">THe new value assigned to the property.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.Column">
            <summary>
            Gets the name of the column within the data source to map from.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsIdentity">
            <summary>
            Gets whether the current type represents the owner's type identity.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsClassId">
            <summary>
            Gets whether the current type represents the owner's type class id.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsSerializedToBlob">
            <summary>
            Gets whether the data in the current field is serialized to a blob column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsVersion">
            <summary>
            Gets whether the current type represents the owner's version in cases of 'version' concurrency mechanism.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.DateTimeAutosetMode">
            <summary>
            Defines whether DateTime fields are automatically updated during insert and update operations
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaPrimitiveType">
            <summary>
            Represents a primitive type in the Telerik Data Access meta model
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MetaPrimitiveType by a given clr type
            </summary>
            <param name="clrType">Defines the clr type that is represented by this primitive type</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the MetaPrimitiveType by a given CLR type
            </summary>
            <param name="clrType">Defines the CLR type that is represented by this primitive type</param>
            <param name="description">defines the description of the member</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.ClrType">
            <summary>
            Gets the CLR Type representation of this primitive type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.IsNullable">
            <summary>
            Gets whether this primitive type is a nullable type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.IsEnum">
            <summary>
            Gets whether this primitive type is an enum type
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.FullName">
            <summary>
            Gets the full name of the current primitive type. If the ClrType is available, the FulllName of the ClrType is returned.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaScopedItem">
            <summary>
            Represents the base item class for all the metadata in the Telerik Data Access metadata type hierarchy that is a part of a 
            relational schema. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaScopedItem.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaScopedItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaScopedItem class with the required schema name as a parameter.
            </summary>
            <param name="name">defines the name of the item</param>
            <param name="schemaName">defines the schema name of the item</param>
            <param name="description">defines the description of the item</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaScopedItem.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaScopedItem.SchemaName">
            <summary>
            Gets or sets the name of the schema of the current type.
            </summary>
            <remarks>If there is no schema or it is the default one String.Empty is returned.</remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaStruct">
            <summary>
            Represents a persistent struct type in the Telerik Data Access meta model
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor(System.String,System.String)">
            <summary>
            Initializes a new MetaStruct instance with the required parameters
            </summary>
            <param name="name">defines the name of the struct</param>
            <param name="nameSpace">defines the namespace of the struct</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.TypeAccessModifier,Telerik.OpenAccess.Metadata.TypeInheritanceModifier,System.String)">
            <summary>
            Initializes a new MetaStruct instance with the required parameters
            </summary>
            <param name="name">defines the name of the struct</param>
            <param name="nameSpace">defines the namespace of the struct</param>
            <param name="container">defines the root container that contains the whole metadata model.</param>
            <param name="accessModifier">defines the Type access modifier for the stucture</param>
            <param name="inheritanceModifier">defines the Type inheritance modifier for the structure</param>
            <param name="description">defines the description of the struct</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor">
            <summary>
            Initializes a new MetaStruct instance.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaStruct.DeclaringMember">
            <summary>
            Gets the namespace of the current type.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination">
            <summary>
            Represents the information necessary to discriminate a type from other types in a hierarchy.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.#ctor">
            <summary>
            Initializes a new instance of the MetaTypeDiscrimination class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.#ctor(Telerik.OpenAccess.Metadata.MetaPersistentType,System.String)">
            <summary>
            Initializes a new instance of the MetaTypeDiscrimination type
            </summary>
            <param name="persistentType">specifies the MetaPersistentType which needs to be discriminated within the hierarchy</param>
            <param name="typeId">specifies the value used to discriminate 'persistentType' from other types within a hierarchy</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.#ctor(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType,System.String)">
            <summary>
            Initializes a new instance of the MetaTypeDiscrimination type
            </summary>
            <param name="description">specifies the description of the discrimination</param>
            <param name="persistentType">specifies the MetaPersistentType which needs to be discriminated within the hierarchy</param>
            <param name="typeId">specifies the value used to discriminate 'persistentType' from other types within a hierarchy</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.PersistentType">
            <summary>
            Gets the MetaPersistentType for which 'this' instance holds discriminating information
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.DiscriminatingValue">
            <summary>
            Gets the value used to discriminate the 'PersistentType' within a hierarchy
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Multiplicity">
            <summary>
            Represents the multiplicity information about the End of a relationship type. 
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.ZeroOrOne">
            <summary>
            A lower bound is zero and an upper bound is one.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.One">
            <summary>
            A lower bound is one and an upper bound is one.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.Many">
            <summary>
            A lower bound is zero and an upper bound is N (one or more).
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.NullValueBehavior">
            <summary>
            Enumeration specifying the behavior of the fields that have null value assigned
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.Exception">
            <summary>
            Specifies that an exception will be raised when a field has null value assigned
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.Default">
            <summary>
            Specifies that the default action will be taken, should null value be assigned to a field
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.None">
            <summary>
            Specifies that there will be no exception when a field has a null value assigned
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy">
            <summary>
            Specifies the concurrency control options for the persistent types in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Default">
            <summary>
            Defines that the default value for the optimistic concurrency control strategy will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.None">
            <summary>
            Defines that no concurrency checks will be done on the database server.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Version">
            <summary>
            Defines that a version column is used to detect concurrent updates. The version number is incremented on every update and the previous version 
            number is included in the where clause. This is the fastest and safest optimistic concurrency control mode. 
            This is the default and suggested concurrency mode.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Timestamp">
            <summary>
            Defines that a timestamp column is to be used to detect concurrent updates. The timestamp is set on every update and the previous value 
            is included in the where clause. This may not be safe if updates happen quicker than the resolution of the timestamp field. 
            It is included to support legacy database schemas.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed">
            <summary>
            Defines that previous values of all changed columns will be included in the where clause. This provides more fine-grained optimistic 
            concurrency control as different transactions may modify different fields of the same instance. This mode can be used when the database 
            schema allows no modifications (adding a version column for example). Float and double fields are excluded as they are not exact (rounding procedures are different across databases and also
            differ from the way .NET is handling it).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Backend">
            <summary>
            Defines that a backend specific concurrency control mechanism is used.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.All">
            <summary>
            Defines that the values of all columns (changed or not) will be included in the where clause.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CacheStrategy">
            <summary>
            Describes the strategy for the database level cache
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.Default">
            <summary>
            Specifies that the default value for the cache strategy will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.No">
            <summary> Do not cache instances of this class.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.Yes">
            <summary> Cache instances of this class.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.All">
            <summary> Cache all instances of this class as soon as an instance is requested.
            All rows from its table will be read and cached whenever an instance
            is requested but not found in cache. This may work well for small
            static tables when using a big cache.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaInterface">
            <summary>
            Represents a persistent interface in the Telerik Data Access meta model
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
            <param name="name">defines the name of the interface</param>
            <param name="nameSpace">defines the namespace of the interface</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.TypeAccessModifier,System.String)">
            <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
            <param name="name">defines the name of the interface</param>
            <param name="nameSpace">defines the namespace of the interface</param>
            <param name="accessModifier">defines the access modifier for the interface</param>
            <param name="description">defines the description of the interface</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.TypeAccessModifier,System.String)">
            <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
            <param name="name">defines the name of the interface</param>
            <param name="nameSpace">defines the namespace of the interface</param>
            <param name="accessModifier">defines the access modifier for the interface</param>
            <param name="description">defines the description of the interface</param>
            <param name="container">The parent MetadataContainer instance.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaInterface.Implementations">
            <summary>
            Gets a collection of the persistent types that implement this interface
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping">
            <summary>
            Represents an index column mapping in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.#ctor">
            <summary>
            Instantiates a new MetaIndexColumnMapping object.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Int32,Telerik.OpenAccess.Metadata.Relational.SortOrder)">
            <summary>
            Instantiates a new MetaIndexColumnMapping object.
            </summary>
            <param name="name">The name of the mapping object.</param>
            <param name="column">The column that the mapping refers to.</param>
            <param name="position">The position of the column in the index.</param>
            <param name="order">The sorting order of the column in the index.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.MetaMember,System.Int32,Telerik.OpenAccess.Metadata.Relational.SortOrder)">
            <summary>
            Instantiates a new MetaIndexColumnMapping object.
            </summary>
            <param name="name">The name of the mapping object.</param>
            <param name="column">The column that the mapping refers to.</param>
            <param name="member">The member that the mapping refers to.</param>
            <param name="position">The position of the column in the index.</param>
            <param name="order">The sorting order of the column in the index.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.Column">
            <summary>
            Gets or sets the column that this mapping is used for.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.Member">
            <summary>
            Gets or sets the member that this mapping is used for.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.Position">
            <summary>
            Gets or sets the position in the index for this column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndexColumnMapping.SortOrder">
            <summary>
            Gets or sets whether the column order is ascending or descending.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.SortOrder">
            <summary>
            Defines the order of sorting for a column.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.SortOrder.Ascending">
            <summary>
            Ascending ordering.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.SortOrder.Descending">
            <summary>
            Descending ordering.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaResultSet">
             <summary>
             Describes the result set that is returned by a stored procedure.
             </summary>
            <remarks>
            A stored procedure can return one or more results,possibly via select queries, as a result of it's execution. The <see cref="T:Telerik.OpenAccess.Metadata.Relational.MetaResultSet"/> 
            describes the columns returned in a single result set.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.#ctor">
            <summary>
            Initializes a new instance of the MetaResultSet class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Initializes a new instance of the MetaResultSet class with the specified stored procedure.
            </summary>
            <param name="name"></param>
            <param name="procedure">A <see cref="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure"/> instance that represents the stored procedure that returns this result set</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.Columns">
            <summary>
            Gets the list of columns in the result set.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaResultSet.Procedure">
            <summary>
            Gets the stored procedure that is associated with this result set.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaResultSetColumn">
            <summary>
            Provides meta information about a column in  a result set returned by a stored procedure
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaColumn">
            <summary>
            Provides meta information about a column
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Initializes a new instance of the MetaColumn class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="table">defines the table that is associated with the current column.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the MetaColumn class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="sqlType">defines the type of data stored in the column.</param>
            <param name="nullable">defines or sets a value that indicates whether the column accepts null values.</param>
            <param name="precision">defines the maximum number of digits used to represent the column contents.</param>
            <param name="scale">defines the number of decimal places to which the values are resolved.</param>
            <param name="table">defines the table that is associated with the current column.</param>
            <param name="primaryKey">defines a value indicating whether or not the current column is a primary key in a constraint.</param>
            <param name="autoInc">defines a value that indicates whether the column automatically increments the value of the column for new rows added to the table.</param>
            <param name="isBackendVersion">defines if the current column is a backend specific version column.</param>
            <param name="adoType">defines the internal type mapping.</param>
            <param name="description">defines the description of the column</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.CalculatePositionHash">
            <summary>
            Calculates the hash value that uniquely identifies the position of this instance in the metadata model.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.CalculatePrimaryHash">
            <summary>
            Calculates the hash value that uniquely identifies this instance.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.SqlType">
            <summary>
            Gets the type of data stored in the column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the column accepts null values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Length">
            <summary>
            Gets the maximum number of digits used to represent the column contents.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Scale">
            <summary>
            Gets the number of decimal places to which the values are resolved.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Table">
            <summary>
            Gets the table that is associated with the current column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsPrimaryKey">
            <summary>
            Gets a value indicating whether or not the current column is a primary key in a constraint.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsBackendCalculated">
            <summary>
            Gets a value that indicates whether the column is calculated by the backend.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.AdoType">
            <summary>
            The internal type mapping.
            </summary>
            <remarks>In later versions an enumeration will be provided.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.TargetField">
            <summary>
            Gets or Sets the field this column might be pointing to, in case it is part of a FK reference.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.TargetClass">
            <summary>
            Gets the class this column might be pointing to, in case it is part of a FK reference.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsBackendVersion">
            <summary>
            Gets or sets if the column is a backend-specific version column
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.BackingUDT">
            <summary>
            Gets the User Defined Type, if any, on which this MetaColumn is based
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Converter">
            <summary>
            Gets the type converter for this column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.HasDefaultValue">
            <summary>
            Defines if this column will use backend calculated default value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSetColumn.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSetColumn.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaResultSetColumn.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaResultSetColumn.BackendProposedClrType">
            <summary>
            Gets the ADO.NET driver proposed CLR type that this column can be mapped to
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget">
            <summary>
            Represents the target of a procedure parameter mapping. A procedure parameter can be mapped to a single column,single columned field,
            constant or it could be an OUT parameter that carries the 'RowsAffected' value or the identity value generated for a primary 
            key column
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Column">
            <summary>
            Denotes that the procedure parameter obtains it's value from a column with the specfied name
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Field">
            <summary>
            Denotes that the procedure parameter obtains it's value from a field with the specified name
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Constant">
            <summary>
            Denotes that the procedure parameter takes the constant value that is specified
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping">
            <summary>
            Describes the structure defining a parameter mapping.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget)">
            <summary>
            Initializes an instance of the MetaParameterMapping
            </summary>
            <param name="requiredParameter">defines the name of the artifact that will supply the value for the parameter.It could be a field,column etc depending on the
            'mappingTarget'</param>
            <param name="mappedParameter">defines the name of the parameter as it should be on the database</param>
            <param name="mappingTarget">specifies the target of the parameter mapping</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.RequiredParameter">
            <summary>
            Gets the required parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.MappedParameter">
            <summary>
            Gets the Mapped parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.MappingTarget">
            <summary>
            Gets or sets the target of a procedure parameter mapping. A procedure parameter can be mapped to a single column,single columned field,
            constant or it could be an OUT parameter that carries the 'RowsAffected' value or the identity value generated for a primary 
            key column
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping">
            <summary>
            Describes a mapping between the CLR type system and the database type system.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.#ctor">
            <summary>
            Initializes a new instance of the DefaultTypeMapping class
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ToString">
            <summary>
            Gives a string representation for this type mapping.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.CompareCore(System.Object)">
            <summary>
            Compares two type mappings based upon their attributes collection. 
            </summary>
            <param name="otherItem">type mapping being compared to.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.SqlType">
            <summary>
            Gets the type of data stored in the column.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the column accepts null values.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Length">
            <summary>
            Gets the maximum number of digits used to represent the column contents.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Scale">
            <summary>
            Gets the number of decimal places to which the values are resolved.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ClrType">
            <summary>
            Controls the name for the CLR type that is mapped.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.AdoType">
            <summary>
            The internal type mapping.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Equality">
            <summary>
            Controls whether this mapping can be used for equality tests on the database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Backend">
            <summary>
            Controls the name of the backend when set.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ConverterFactory">
            <summary>
            Controls the name of a converter factory that should be used for this mapping.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Enabled">
            <summary>
            Controls if the mapping is enabled.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaConstraint">
            <summary>
            Represents a constraint definition in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.NoConstraint">
            <summary>
            Denotes that a relational constraint should not be generated for a MetaForeignKeyAssociation or a MetaJoinTableAssociation.
            Use this instance as a value to the 'Constraint' property, to specify that no relational constraint should be generated for an association.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Initializes a new instance of the MetaConstraint class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="source">defines the "source table" that takes part in this constraint.</param>
            <param name="destination">defines the "destination table" that takes part in this constraint.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
            <summary>
            Initializes a new instance of the MetaConstraint class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="schemaName">defines the schema of the current type.</param>
            <param name="fullName">defines the full name of the type</param>
            <param name="source">defines the "source table" that takes part in this constraint.</param>
            <param name="destination">defines the "destination table" that takes part in this constraint.</param>
            <param name="description">defines the description of the constraint</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.FullName">
            <summary>
            Gets the full name that includes both schema and name of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.SourceTable">
            <summary>
            Gets the "source table" that takes part in this constraint.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.DestinationTable">
            <summary>
            Gets the "destination table" that takes part in this constraint.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.SourceColumns">
            <summary>
            Gets the list of source columns for the "source table" on which this constraint is defined.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.DeleteAction">
            <summary>
            Gets action to be performed on delete.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup">
            <summary>
            Represents a fetch group in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.#ctor(System.String)">
            <summary>
            Creates a new MetaFetchGroup instance based on the name and the user-defined condition passed 
            as arguments.
            </summary>
            <param name="name">The name of the fetch group.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new MetaFetchGroup instance based on the name and the user-defined condition passed 
            as arguments.
            </summary>
            <param name="name">The name of the fetch group.</param>
            <param name="userDefined">Indicates whether the current fetch group is defined by the user.</param>
            <param name="description">the description of the fetch group.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.IsUserDefined">
            <summary>
            Indicates whether the current fetch group is defined by the user.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.FetchGroupMembers">
            <summary>
            Gets a list of fetch group members, represented by the current fetch group. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember">
            <summary>
             Represents a fetch group member in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.#ctor(Telerik.OpenAccess.Metadata.MetaMember)">
            <summary>
            Creates a new MetaFetchGroupMember instance based on the MetaMember instance passed as an argument.
            </summary>
            <param name="member">defines the member instance that is part of a fetch group.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.#ctor(System.String,Telerik.OpenAccess.Metadata.MetaMember,System.String)">
            <summary>
            Creates a new MetaFetchGroupMember instance based on the MetaMember instance passed as an argument.
            </summary>
            <param name="name">defines the name of the fetch group member.</param>
            <param name="member">defines the member instance that is part of a fetch group.</param>
            <param name="description">defines the description of the fetch group member</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.Member">
            <summary>
            Represents a concrete meta member used in the current fetch group.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaIndex">
            <summary>
            Represents an index definition in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Initializes a new instance of the MetaIndex class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="table">defines the table that is associated with the current index.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.#ctor(System.String,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
            <summary>
            Initializes a new instance of the MetaIndex class with the required parameters.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="clustered">defines whether the index is clustered.</param>
            <param name="unique">defines whether the index is unique.</param>
            <param name="table">defines the table that is associated with the current index.</param>
            <param name="description">defines the description of the index</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Clustered">
            <summary>
            Gets whether the index is clustered.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Unique">
            <summary>
            Gets whether the index is unique.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Columns">
            <summary>
            Gets the list of columns included in the index.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Table">
            <summary>
            Gets the table that is associated with the current index.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure">
            <summary>
             Represents a stored procedure in the Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MetaStoredProcedure class
            </summary>
            <param name="name">defines the name of the current type.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaStoredProcedure class
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="schemaName">defines the schema name of the current type.</param>
            <param name="fullName">defines the full name that includes both the schema and the name of the current type.</param>
            <param name="description">defines the description of the stored procedure</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the MetaStoredProcedure class
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="schemaName">defines the schema name of the current type.</param>
            <param name="fullName">defines the full name that includes both the schema and the name of the current type.</param>
            <param name="shouldUpdateSchema">defines if the schema should be updated</param>
            <param name="description">defines the description of the stored procedure</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.FullName">
            <summary>
            Gets the full name that includes both the schema and the name of the current type.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.HasMultipleResultSet">
            <summary>
            Gets a value indicating whether the relational store definition for the current type returns multiple result sets.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.Parameters">
            <summary>
            Gets the parameters list of the stored procedure. The default is an empty collection.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.ShouldUpdateSchema">
            <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.IsDeterministic">
            <summary>
            Indicates whether the user-defined function is deterministic.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.IsFunction">
            <summary>
            Indicates whether this is database function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.ReturnType">
            <summary>
            Get or sets the return type of the function.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.ResultSets">
            <summary>
            Gets the list of result sets that are returned by this stored procedure. The default is an empty collection.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping">
            <summary>
            Describes the stored procedure and its parameters.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.DynamicSql">
            <summary>
            Denotes that dynamically created Sql will be used to perform the operation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor">
            <summary>
            Creates an empty stored procedure mapping instance which denotes that dynamically created Sql will be used to perform the operation 
            for which this instance is created.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Initializes a stored procedure mapping.
            </summary>
            <param name="procedure">represents existing procedure</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.String)">
            <summary>
            Initializes a stored procedure mapping.
            </summary>
            <param name="name">defines the name of the stored procedure mapping</param>
            <param name="schemaName">defines the schema to which this procedure belongs</param>
            <param name="procedure">represents existing procedure</param>
            <param name="description">defines the description of the procedure mapping</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.Procedure">
            <summary>
            Gets the stored procedure
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.ParameterDefinition">
            <summary>
            Gets the parameters used in the stored procedure
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.ParameterDefinitionOld">
            <summary>
            Gets the parameters used for concurency control
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.UseDynamicSql">
            <summary>
            Gets whether dynamically created Sql will be used to perform the operation for which this instance is created.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.RowsAffectedParameter">
            <summary>
            Gets or sets the name of the parameter that carries the count of number of rows affected, after the procedure is executed.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.AutoIncParameter">
            <summary>
            Gets or sets the name of the parameter that carries the identity value generated by the server for a column,usually the primary key column
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter">
            <summary>
            Describes the parameters of an MetaStoredProcedure class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="mode">defines the mode of the parameter</param>
            <param name="sqlType">represents the sql type of the parameter</param>
            <param name="scale">defines the scale of the parameter</param>
            <param name="length">defines the length of the parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.String)">
            <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="mode">defines the mode of the parameter</param>
            <param name="sqlType">represents the sql type of the parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
            <param name="name">defines the name of the current type.</param>
            <param name="mode">defines the mode of the parameter</param>
            <param name="adoType">represents the ado type of the parameter</param>
            <param name="sqlType">represents the sql type of the parameter</param>
            <param name="scale">defines the scale of the parameter</param>
            <param name="length">defines the length of the parameter</param>
            <param name="isNull">defines if the parameter is nullable</param>
            <param name="description">defines the description of the procedure parameter</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Mode">
            <summary>
            Gets or sets the mode of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.AdoType">
            <summary>
            Gets or sets the ado type of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.SqlType">
            <summary>
            Gets or sets the SQL type of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Length">
            <summary>
            Gets or sets the length of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Scale">
            <summary>
            Gets or sets the scale of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.IsNullable">
            <summary>
            Gets or sets the nullable attribute of the parameter
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.DeclaringProcedure">
            <summary>
            Gets or sets the MetaStoredProcedure on which this parameter is declared.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Type">
            <summary>
            Gets or sets the type that the stored procedure parameter is mapped to.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.BackingUDT">
            <summary>
            Gets the User Defined Type, if any, on which this MetaColumn is based
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaTable">
            <summary>
            Describes a database table.
            </summary>
            <remarks>
            If the database is opened against different backends the information might be different.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.#ctor(System.String)">
            <summary>
            Constructs a table instance.
            </summary>
            <param name="name">Table name</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.#ctor(System.String,System.String,System.String,System.Boolean,System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,System.String)">
            <summary>
            Constructs a table instance.
            </summary>
            <param name="name">Table name</param>
            <param name="schemaName">Name of database schema to which the table belongs.</param>
            <param name="fullName">Table name with schema and database prefix, should be delimited.</param>
            <param name="readOnly">true if table does not accept insert, update or delete operations</param>
            <param name="pkConstraintName">The name of the primary key constraint</param>
            <param name="insertProcedure">MetaStoredProcedureMapping for the insert procedure</param>
            <param name="updateProcedure">MetaStoredProcedureMapping for the update procedure</param>
            <param name="deleteProcedure">MetaStoredProcedureMapping for the delete procedure</param>
            <param name="removeRowsProcedure">MetaStoredProcedureMapping for the remove rows procedure</param>
            <param name="description">defines the description of the table</param>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.Relational.MetaTable.SchemaAndNameComparer">
            <summary>
            Provides a comparer for table based on schema and table name.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.CalculatePositionHash">
            <summary>
            Calculates the hash value that uniquely identifies the position of this instance in the metadata model.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.CalculatePrimaryHash">
            <summary>
            Calculates the hash value that uniquely identifies this instance.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.FullName">
            <summary>
            Gets or sets the full name of the database table, prefixed with schema and database name if valid. 
            If the backend support delimitation it is delimited.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Columns">
            <summary>
            Gets the list of columns in this table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.ReadOnly">
            <summary>
            Gets the read only state of the table
            </summary>
            <remarks>true means that no insert, update or delete operations are allowed.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.PKConstraintName">
            <summary>
            Gets the name of the primary key constraint of this table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Constraints">
            <summary>
            Gets a list of constraints that are defined on this table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Indexes">
            <summary>
            Gets a list of indexes that are defined on this table.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.InsertStoredProcedure">
            <summary>
            Gets or sets the stored procedure used for all insert operations. This can be null.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.UpdateStoredProcedure">
            <summary>
            Gets or sets the stored procedure mapping used for all update operations. This can be null.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.DeleteStoredProcedure">
            <summary>
            Gets or sets the stored procedure mapping mapping used for all delete operations. This can be null.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.RemoveRowsStoredProcedure">
            <summary>
            Gets or sets the stored procedure mapping used for all join table operations to delete a specific collection content. This can be null.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.IsJoinTable">
            <summary>
            Gets a value indicating whether the table is a join table
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaUDT">
            <summary>
            Provides meta information about a User defined sql type
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.AddAttribute(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Adds a newly created attribute value holder to the attributes collection
            </summary>
            <param name="key">The key of the attribute.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.#ctor">
            <summary>
            Initializes a new instance of the MetaUDT class with default values
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes a new instance of the MetaUDT class with specified properties
            </summary>
            <param name="name">The name of the UDT</param>
            <param name="schemaName">The name of the schema in which the UDT is defined</param>
            <param name="fullName">Full name of the UDT which includes the database name, schema name and the actual name of the UDT</param>
            <param name="baseSqlType">The sql type on which this UDT is based</param>
            <param name="length">Length of the UDT</param>
            <param name="scale">Scale of the UDT</param>
            <param name="defaultVal">The default value,if any, of the UDT</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaUDT class with specified properties
            </summary>
            <param name="name">The name of the UDT</param>
            <param name="schemaName">The name of the schema in which the UDT is defined</param>
            <param name="fullName">Full name of the UDT which includes the database name, schema name and the actual name of the UDT</param>
            <param name="baseSqlType">The sql type on which this UDT is based</param>
            <param name="length">Length of the UDT</param>
            <param name="scale">Scale of the UDT</param>
            <param name="defaultVal">The default value,if any, of the UDT</param>
            <param name="isAssemblyType">Is this UDT defined in a separate CLR assembly</param>
            <param name="assemblyQualifiedName">The assembly qualified name of the class that implements the UDT</param>
            <param name="description"></param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.GetDefaultValue``1(Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Returns the type specific static store for the default values.
            </summary>
            <typeparam name="Z">Type of the field value.</typeparam>
            <param name="key">The key of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.Clone">
            <summary>
            Clones this meta item.
            </summary>
            <returns>A cloned instance of this meta item.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaUDT.CompareCore(System.Object)">
            <summary>
            Compares the current meta item with another meta item of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other meta item.
            </summary>
            <param name="otherItem">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.FullName">
            <summary>
            Gets the full name of the UDT, prefixed with schema and database name if valid. 
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.BaseSqlType">
            <summary>
            Gets the sql type on which this UDT is based
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.Length">
            <summary>
            Gets the maximum number of digits that can be stored by this UDT.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.Scale">
            <summary>
            Gets the maximum number of digits that can be stored to the right of the decimal point, by this UDT
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.DefaultValue">
            <summary>
            Gets the default value for columns based on this UDT
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.IsAssemblyType">
            <summary>
            Gets whether this UDT is defined within a CLR assembly that is registered with the database
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.AssemblyQualifiedName">
            <summary>
            Gets the assembly qualified name of the class that implements the UDT
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.ConverterName">
            <summary>
            Gets or sets the name of the type converter that is to be used with this UDT
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaUDT.IsNullable">
            <summary>
            Gets whether the type can hold a null value. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaView">
            <summary>
            Describes a database view.
            </summary>
            <remarks>
            If the database is opened against different backends the information might be different.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaView.#ctor(System.String)">
            <summary>
            Constructs a view instance.
            </summary>
            <param name="name">View name</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaView.#ctor(System.String,System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,System.String)">
            <summary>
            Constructs a view instance.
            </summary>
            <param name="name">View name</param>
            <param name="schemaName">Name of database schema to which the view belongs.</param>
            <param name="fullName">View name with schema and database prefix (usual equals to name)</param>
            <param name="readOnly">true if the view does not accept insert, update or delete operations</param>
            <param name="insertProcedure">Procedure used for insert operations</param>
            <param name="updateProcedure">Procedure used for update operations</param>
            <param name="deleteProcedure">Procedure used for delete operations</param>
            <param name="removeRowsProcedure">Procedure to delete all rows in a join table for a specific collection</param>
            <param name="description">defines the description of the view</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaView.#ctor(System.String,System.String,System.String,System.Boolean,System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,System.String)">
            <summary>
            Constructs a view instance.
            </summary>
            <param name="name">View name</param>
            <param name="schemaName">Name of database schema to which the view belongs.</param>
            <param name="fullName">View name with schema and database prefix (usual equals to name)</param>
            <param name="readOnly">true if the view does not accept insert, update or delete operations</param>
            <param name="pkConstraintName">The name of the primary key constraint</param>
            <param name="insertProcedure">Procedure used for insert operations</param>
            <param name="updateProcedure">Procedure used for update operations</param>
            <param name="deleteProcedure">Procedure used for delete operations</param>
            <param name="removeRowsProcedure">Procedure to delete all rows in a join table for a specific collection</param>
            <param name="description">defines the description of the view</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.FullName">
            <summary>
            Gets the full name of the database view, prefixed with schema and database name if valid. Usually equals to the Name.
            </summary>
            <value>Fully qualified name of the view</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Columns">
            <summary>
            Gets the list of columns in this view.
            </summary>
            <value>List of all columns in this view.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.ReadOnly">
            <summary>
            Gets the read only state of the view
            </summary>
            <value>True means that no insert, update or delete operations are allowed.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.PKConstraintName">
            <summary>
            Gets the name of the primary key constraint of this view.
            </summary>
            <value>Primary key constraint name</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Constraints">
            <summary>
            Gets a list of constraints that are defined on this view.
            </summary>
            <value>List of all constraints that are defined on this view.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Indexes">
            <summary>
            Gets a list of indexes that are defined on this view.
            </summary>
            <value>List of all indexes that defined on this view.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.IsJoinTable">
            <summary>
            Gets a value indicating whether the table is a join table.
            This property is inherited from MetaTable and cannot be set for MetaView instances.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.DataAccessKind">
            <summary>
            Describes the type of access to user data for a persistent type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.DataAccessKind.Default">
            <summary>
            Specifies that the default value for the data access kind will be used by the runtime.
            </summary>
            <remarks>The runtime might calculate this value on a later stage depending on the other settings of the meta model or the 
            specific backend used.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.DataAccessKind.ReadWrite">
            <summary>
            The type or field allows full access to user data. All CRUD modifications are allowed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.DataAccessKind.InsertOnly">
            <summary>
            The type or field allows only reading and inserting user data. No modifications (update or delete) are allowed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.DataAccessKind.ReadOnly">
            <summary>
            The type or field allows only reading user data. No CUD modifications (create, update or delete) are allowed.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ParameterMode">
            <summary>
            Defines identifiers used to indicate the direction of parameter 
            </summary>    
        </member>
        <member name="F:Telerik.OpenAccess.ParameterMode.In">
            <summary>
            An incoming parameter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterMode.Out">
            <summary>
            An outgoing parameter
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ParameterMode.InOut">
            <summary>
            An inout parameter
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ISchemaReader">
            <summary>
            Represents a schema reader
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.FillDefaults(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Fills the default mapping values for a specified metadata container.
            </summary>
            <param name="container">The metadata container.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetTypeResolver(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Returns the Type resolver used to reverse map.
            </summary>
            <param name="container">The container with the UDTs to use.</param>
            <returns>Returns the Type resolver used to reverse map.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetDatabaseSchema">
            <summary>
            Gets the database schema.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetSchemas">
            <summary>
            Obtains the list of schemas in the database. The returned list of schemas can be used to filter objects to be fetched via the 
            GetSchema(SchemaReadParameters) method.
            </summary>
            <returns>array of database schemas</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetSchema(Telerik.OpenAccess.SPI.SchemaReadParameters)">
            <summary>
            Returns database metadata based on the SchemaReadParameters specified in the 'readParameters' parameter.
            The default SchemaReadParameters instance fetches all schema objects i.e tables,views,stored procedures,constraints,indexes.
            Use the parameter to customize metadata retrieval.
            </summary>
            <param name="readParameters">specifies which database objects to retrieve</param>
            <returns>A MetaDataContainer created from the database metadata that is read in</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetProcedureResultSets(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Populates a collection of meta result sets representing the schemas of the stored procedure result.
            </summary>
            <param name="metaStoredProcedure">The procedure whose results schema is requested.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaReader.GetServerVersion">
            <summary>
            Returns the version of the server that this reader is connected to
            </summary>
            <returns>The server version</returns>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.ISchemaReader.ADODriverName">
            <summary>
            An AssemblyName instance that describes the ADO.NET driver that is used to retrieve the schema information.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IDefaultSchemaMapper">
            <summary>
            Provides all the default information for a particular backend 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultSchemaMapper.FillDefaults(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Fills the default mapping values for a specified metadata container.
            </summary>
            <param name="container">The metadata container.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultSchemaMapper.GetTypeResolver(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Returns the Type resolver used to reverse map.
            </summary>
            <param name="container">The container with the UDTs to use.</param>
            <returns>Returns the Type resolver used to reverse map.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultSchemaMapper.GetSqlTypes">
            <summary>
            Gets a list of Sql types for the backend that this instance represents.
            </summary>
            <returns>Read only collection of sql types</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultSchemaMapper.GetKnownConverters">
            <summary>
            Gets a list of type converters for the backend that this instance represents.
            </summary>
            <returns>A dictionary of an sql type to the converter that is used to read/write such values </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultSchemaMapper.GetDefaultMappedSchema(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.BackendConfiguration)">
            <summary>
            Gets the default relational schema for a specified conceptual model.
            </summary>
            <param name="conceptualModel">The conceptual model for which the relational model is to be calculated</param>
            <param name="backendConfiguration">The BackendConfiguration of the model</param>
            <returns>An instance of a type that implements <see cref="T:Telerik.OpenAccess.SPI.IDefaultMappedSchema"/> that provides the default relational schema and any associated information</returns>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IDefaultMappedSchema">
            <summary>
            Provides the default mapped relational schema for a conceptual model and error information,if any. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultMappedSchema.HasErrors(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Returns 'true' if errors were encountered while trying to generate the default relational schema for the specified persistent type
            </summary>
            <param name="persistentType">The <see cref="T:Telerik.OpenAccess.Metadata.MetaPersistentType"/> instance which is queried for errors</param>
            <returns>'true' if the specified persistent type has errors in it's mapping</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDefaultMappedSchema.GetErrors(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets a read-only collection of errors encountered while processing the metadata for a specified persistent type
            </summary>
            <param name="persistentType">The <see cref="T:Telerik.OpenAccess.Metadata.MetaPersistentType"/> instance whose errors are requested</param>
            <returns>A read-only collection of <see cref="T:Telerik.OpenAccess.Exceptions.MetadataException"/> instances</returns>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDefaultMappedSchema.DefaultRelationalModel">
            <summary>
            Gets a <see cref="T:Telerik.OpenAccess.Metadata.MetadataContainer"/> that contains the default mapped relational model for a specified conceptual model or null if the runtime metadata
            could not be initialized.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDefaultMappedSchema.Errors">
            <summary>
            Gets a read-only collection of errors were encountered while trying to default map a conceptual model
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.SchemaReadParameters">
            <summary>
            Controls the behavior of the SchemaReader.GetSchema method. 
            </summary>
            <remarks>
            Use this class to filter the objects to be retrieved.
            All schema objects are retrieved by default. Tables and view are always fetched or omitted together. It is curently not 
            possible to fetch only 1 type and not the other. The 'Constraints' and 'Indexes' properties are used only if the 'TablesAndViews' is 
            set to true i.e constraints and indexes are fetched together only with tables and not independently.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.SchemaReadParameters.#ctor(System.String[])">
            <summary>
            Creates an instance using the 'schemas' parameter as a filter.
            Use this constructor to fetch all schema objects in the specified schemas
            </summary>
            <param name="schemas"></param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.SchemaReadParameters.ReadAdditionalDatabase(System.String)">
            <summary>
            Gets a list of databases, can be used for MS SQL Server to tunnel calls to other databases.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.Schemas">
            <summary>
            Gets a list of schemas
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.Databases">
            <summary>
            Gets a list of databases, can be used for MS SQL Server to tunnel calls to other databases.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.StoredProcedures">
            <summary>
            Gets or sets a value indicating whether to read stored procedures
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.Constraints">
            <summary>
            Gets or sets a value indicating whether to read constraints
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.Indexes">
            <summary>
            Gets or sets a value indicating whether to read indexes
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.TablesAndViews">
            <summary>
            Gets or sets a value indicating whether to read tables and views
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.UserDefinedTypes">
            <summary>
            Gets or sets a value indicating whether to read user defined types
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.SchemaReadParameters.DatabaseSchemas">
            <summary>
            Defines a schema list per database
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.SchemaReadParameters.DatabaseSchemas.#ctor(System.String,System.String[])">
            <summary>
            Constructs a database schema list object.
            </summary>
            <param name="database">Mandatory, database must exists and be accessible from the used connection.</param>
            <param name="schemas">List of schemas in the referenced database, schema must exist or list must be empty to read the default schema.</param>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.DatabaseSchemas.DatabaseName">
            <summary>
            Name of tunneled database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaReadParameters.DatabaseSchemas.SchemaFilter">
            <summary>
            List of schemas in the tunneled database.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ReflectionHelper">
            <summary>
            A class containing helper methods for doing common reflection tasks
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsAutoProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the given property info instance is an automatic property.
            </summary>
            <param name="property">The property.</param>
            <returns>Whether the property is an automatic property.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsMarkedWithAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines if the given member is decorated with an attribute of type T.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="member">The member.</param>
            <returns>Whether the member is decorated with an attribute of the given type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsMarkedWithAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines if the given member is decorated with an attribute of type T.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="member">The member.</param>
            <param name="inherit"></param>
            <returns>Whether the member is decorated with an attribute of the given type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.GetStorageForAutoProperty(System.Reflection.PropertyInfo,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
            <summary>
            Finds the field that is used for storage by an automatic property.
            </summary>
            <param name="property">The automatic property.</param>
            <param name="persistentFields">The list of fields to be searched.</param>
            <returns>The backing field for the given automatic property, if found; null otherwise.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.GetStorageForAutoProperty(System.String,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
            <summary>
            Finds the field that is used for storage by an automatic property.
            </summary>
            <param name="propertyName">The name of the automatic property.</param>
            <param name="persistentFields">The list of fields to be searched.</param>
            <returns>The backing field for the given automatic property, if found; null otherwise.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.GetUnderlyingTypeForNullableType(System.Type)">
            <summary>
            Gets the underlying type for a nullable Clr type.
            </summary>
            <param name="nullableType">The nullable type.</param>
            <returns>The underlying Clr type if the passed argument is nullable type. Otherwise it will return the type that was passed as an argument.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.TypeAccessModifier">
            <summary>
            Defines the Type access modifiers
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.TypeAccessModifier.Public">
            <summary>
            Public
            A public member.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.TypeAccessModifier.Assembly">
            <summary>
            Assembly
            A member that is accessible to any class within the same assembly.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.TypeInheritanceModifier">
            <summary>
            Defines the Type inheritance enumeration
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.None">
            <summary>
            None
            No inheritance modifier applied.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.Abstract">
            <summary>
            Abstract
            An abstract type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.Final">
            <summary>
            Final
            A type that cannot be overridden in a derived class.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem">
            <summary>
            Represents a ComboBox item with a name.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.#ctor(System.Object,System.String)">
            <summary>
            Creates a new ComboBox item with a name.
            </summary>
            <param name="item">The item</param>
            <param name="displayMember">The item name</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.#ctor(System.Object,System.String,System.String)">
            <summary>
            Creates a new ComboBox item with a name.
            </summary>
            <param name="item">The item</param>
            <param name="displayMember">The item name</param>
            <param name="tooltipText">The tooltip text</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.#ctor">
            <summary>
            Creates a new ComboBox with default values.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.ToString">
            <summary>
            Returns the display name of the ComboBox item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.ItemName">
            <summary>
            Gets the item name.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.TooltipText">
            <summary>
            Gets the tooltip text.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction">
            <summary>
            Represents a resolution action for a model item which requires multiple items to be selected from a collection.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction.SelectedItems">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction.AvailableItems">
            <summary>
            Gets the available items to choose from.
            </summary>
            <value>The available items.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IValidationRuleProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IValidationRuleProvider.GetValidationRuleList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationRuleProvider.AddResolutionActions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.GetMetadataAction">
            <summary>
            A delegate used to obtain metadata.
            </summary>
            <returns>A metadata container</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IRenameOperation.NamingRules">
            <summary>
            Gets or sets the naming rules which will be used if the operation is executed
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.RenameOperation`1">
            <summary>
            A batch operation for renaming meta items based on user-defined naming rules.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.RenameOperation`1.#ctor">
            <summary>
            Creates a new instance of the RenameOperation class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.RenameOperation`1.#ctor(Telerik.OpenAccess.Metadata.EnumerableHelper.Func{`0,System.String},Telerik.OpenAccess.Metadata.EnumerableHelper.Action{`0,System.String},Telerik.OpenAccess.Metadata.MetadataConstants)">
            <summary>
            Creates a new instance of the RenameOperation class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.RenameOperation`1.Execute">
            <summary>
            Executes the rename operation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.RenameOperation`1.Reset">
            <summary>
            Resets the state of the operation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.RenameOperation`1.Initialize(Telerik.OpenAccess.Metadata.IStoreDataContainer)">
            <summary>
            Initializes the rename operation action with some specific settings.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.RenameOperation`1.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.RenameOperation`1.NamingRules">
            <summary>
            Gets or sets the naming rules which will be used if the operation is executed
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.RenameClassOperation.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.RenamePropertyOperation.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.RenameFieldOperation.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IGenerateDefaultMappingAction">
            <summary>
            Interface used to generate default mapping for Meta Items.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IGenerateDefaultMappingAction.GenerateDefaultMappingForMember(Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.BackendConfiguration)">
            <summary>
            Gets a default MetaColumn for a given MetaMember.
            </summary>
            <param name="member">The member for which a column will be generated.</param>
            <param name="settings">The beckend settings used by the project.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IGenerateDefaultMappingAction.GetDefaultSchemaMapperFor(Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Gets the ISchemaReader instance for the given backend.
            </summary>
            <param name="backend">The backend for which the ISchemaReader instance will be initialized.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IGenerateDefaultMappingAction.GetProviderNameFor(Telerik.OpenAccess.Metadata.Backend)">
            <summary>
            Gets the provider name the given backend.
            </summary>
            <param name="backend">The backend for which the provider name will be obtained.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ResolutionActionKind">
            <summary>
            Specifies the kind of the resolution action.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ResolutionActionKind.Automatic">
            <summary>
            Automatic resolution action.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ResolutionActionKind.Manual">
            <summary>
            Manual resolution action.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IStoreDataContainer">
            <summary>
            An object that stores and retrieves values by key.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IStoreDataContainer.ContainsKey(System.String)">
            <summary>
            Checks whether there is a value with the specified key in the container.
            </summary>
            <param name="key">The key</param>
            <returns>True if there is a value with the specified key in the container; otherwise false;</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IStoreDataContainer.GetData``1(System.String)">
            <summary>
            Retrieves a value from the container using the specified key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value or null if there is no value with the specified key in the container.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IStoreDataContainer.SetData``1(System.String,``0)">
            <summary>
            Stores a value in the container by the specified key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IValidationDetail">
            <summary>
            Represents a validation detail used by the Telerik Data Access meta model validation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Type">
            <summary>
            Gets the type of the validation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.OriginalException">
            <summary>
            Gets the original exception.
            </summary>
            <value>The original exception.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationMode">
            <summary>
            Specifies the validation mode used during Telerik Data Access meta model validation
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationMode.StopOnFirstError">
            <summary>
            Validation stops on the first error.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationMode.FindAllErrors">
            <summary>
            Finds all errors
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaModelValidation">
            <summary>
            Class used for validation of a Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.#ctor">
            <summary>
            Initializes a new instance of the MetaModelValidation class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MetaModelValidation class.
            </summary>
            <param name="addResolutionActions">Specifies whether resolution actions will be added for validation details.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.Validate(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Validates the specified meta model.
            </summary>
            <param name="metaModel">The meta model.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.Validate(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.ValidationMode)">
            <summary>
            Validates the specified meta model.
            </summary>
            <param name="metaModel">The meta model.</param>
            <param name="validationMode">The validation mode.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaModelValidation.ValidationRuleProvider">
            <summary>
            Gets or sets the IValidationRuleProvider instance used to obtain a list of validation rules.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaModelValidation.Walker">
            <summary>
            Gets or sets the MetadataWalker instance used to traverse the metadata.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaModelValidation.DataContainer">
            <summary>
            Gets or sets the IStoreDataContainer instance used to carry various settings needed for the validation process.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ModelChangedEventArgs">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelChangedEventArgs.OldValue">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelChangedEventArgs.NewValue">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelChangedEventArgs.MetaItem">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ModelChangedEventArgs.MetaItemAttributeKey">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.#ctor(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckForAssociationEndsIssues(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckThatTargetFieldIsPrimaryKey(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckForColumnsDoubling(Telerik.OpenAccess.Metadata.MetaAssociation,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckAssociationPartsTypeCompatibility(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckAssociationPartColumnTypeCompatibility(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.AssociationValidationRule.CheckAssociationPartMemberTypeCompatibility(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.MetaPrimitiveMember,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ColumnValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ColumnValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ColumnValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ColumnValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ColumnValidationRule.IsAdoTypeDefined(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ConstraintValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ConstraintValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ConstraintValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ConstraintValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ContainerValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ContainerValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ContainerValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ContainerValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule.CheckNoColumns(Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ForeignKeyAssociationValidationRule.CheckColumnConsistency(Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckColumnsCount(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckIfColumnsBelongToTable(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckColumnCollectionsIntersection(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckSequenceColumnExistence(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckDictionaryJoinTable(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.JoinTableAssociationValidationRule.CheckTableBelongsToContainer(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MemberValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MemberValidationRule.#ctor(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MemberValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MemberValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MemberValidationRule.InvalidIdentifierAction">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.CheckForColumnsFromOtherTables(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.AddErrorForMissingTable(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.AddErrorForMissingColumns(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaIndexValidationRule.CheckForMissingName(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MetaItemNameValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaItemNameValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaItemNameValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaItemNameValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.MetaItemNameValidationRule.ProjectLanguage">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureMappingValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureMappingValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureMappingValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureMappingValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.IsAdoTypeDefined(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.CheckForClrTypeIssues(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter,Telerik.OpenAccess.Metadata.ITypeResolver,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureParameterValidationRule.CreateSelectParameterClrTypeAction(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter,System.Collections.Generic.IList{System.Type})">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule.CheckForIncorrectReference(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.MetaStoredProcedureValidationRule.CheckForNameIssues(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule.CheckDeclaringType(Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.NavigationMemberValidationRule.CheckMultiplicityAndType(Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule.SetPrimaryKey(Telerik.OpenAccess.Metadata.MetaPersistentType,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPrimitiveMember},System.Action{Telerik.OpenAccess.Metadata.ModelChangedEventArgs})">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.PersistentTypeValidationRule.ProjectLanguage">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.PrimitiveMemberValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PrimitiveMemberValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PrimitiveMemberValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.PrimitiveMemberValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.TableValidationRule">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.TableValidationRule.#ctor(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.TableValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.TableValidationRule.ValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.TableValidationRule.CheckForColumnIssues(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.TableValidationRule.CheckForNameIssues(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.ValidationResult)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.StoreDataContainer">
            <summary>
            An object that stores and retrieves values (used by validation rules) by key.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.StoreDataContainer.ContainsKey(System.String)">
            <summary>
            Checks whether there is a value with the specified key in the container.
            </summary>
            <param name="key">The key</param>
            <returns>True if there is a value with the specified key in the container; otherwise false;</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.StoreDataContainer.GetData``1(System.String)">
            <summary>
            Retrieves a value from the container using the specified key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value or null if there is no value with the specified key in the container.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.StoreDataContainer.SetData``1(System.String,``0)">
            <summary>
            Stores a value in the container by the specified key.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationDetail">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationDetail.#ctor(Telerik.OpenAccess.Metadata.ValidationDetailType,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationDetail.ToString">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationDetail.Equals(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationDetail.GetHashCode">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationDetail.Type">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationDetail.Message">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationDetail.OriginalException">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationDetail.Actions">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationDetail.ResolutionActionFactoryMethod">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationDetailType">
            <summary>
            Enumeration that specifies the validation detail type
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationDetailType.Error">
            <summary>
            Defines the detail as error
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.ValidationDetailType.Warning">
            <summary>
            Defines the detail as warning
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.Validation.ValidationException">
            <summary>
            This exception is thrown when there validation errors.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.Validation.ValidationException.#ctor(Telerik.OpenAccess.Metadata.IValidationResult)">
            <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
            <param name="validationResult">The validation result containing the validation errors.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.Validation.ValidationException.ValidationResult">
            <summary>
            The validation result containing the validation details.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IValidationResult">
            <summary>
            Represents the result of the validation of a specific Telerik Data Access meta model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IValidationResult.Details">
            <summary>
            Gets the validation details.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.ValidationResult">
            <summary>
            Represents the result of the validation of a specific Telerik Data Access meta model.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the ValidationResult class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.#ctor(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.IValidationDetail})">
            <summary>
            Initializes a new instance of the ValidationResult class with a list of IValidationDetail objects.
            </summary>
            <param name="validationDetails">The list of IValidationDetail objects</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.GetValidationStatus">
            <summary>
            Gets the validation status.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.Telerik#OpenAccess#Metadata#IValidationResult#Details">
            <summary>
            Gets the validation details.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.Details">
            <summary>
            Gets the validation details.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.PropertyValueHandler">
            <summary>
            A helper class to do property change notification.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PropertyValueHandler.SetValue``1(System.Object,System.Object,``0@,``0,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.IMetadataStatusCallback})">
            <summary>
            Sets the field to the new value and raises appropriate notification event.
            </summary>
            <remarks>Does nothing if the new value equals the old.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PropertyValueHandler.SetAttributeValue``1(System.Object,System.Object,Telerik.OpenAccess.Metadata.IMetaItemAttribute,``0,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.IMetadataStatusCallback})">
            <summary>
            Sets the field to the new value and raises appropriate notification event.
            </summary>
            <remarks>Does nothing if the new value equals the old.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PropertyValueHandler.SetDictionaryValue``1(System.Object,System.Object,System.Collections.Generic.Dictionary{Telerik.OpenAccess.Metadata.MetadataConstants,Telerik.OpenAccess.Metadata.IMetaItemAttribute}@,Telerik.OpenAccess.Metadata.MetadataConstants,``0,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.IMetadataStatusCallback})">
            <summary>
            Sets the dictionary entry to the new value and raises appropriate notification event.
            </summary>
            <remarks>Does nothing if the new value equals the old</remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.PropertyMapForType">
            <summary>
            Property map for a particular type.  Only instantiate this directly if you have a special need to
            do so, and you take care of your own thread safety (if you share instances between threads).  
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataWalker">
            <summary>
            Class used to traverse Telerik Data Access metadata items.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.Traverse(Telerik.OpenAccess.Metadata.MetaItem,Telerik.OpenAccess.Metadata.IMetaItemVisitor)">
            <summary>
            Traverses a MetaItem and its subitems.
            </summary>
            <param name="rootMetaItem">The root MetaItem instance</param>
            <param name="visitor">The Visit method of this IMetaItemVisitor instance will be called for each traversed MetaItem</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.StartTraverse(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Starts the traversing process.
            </summary>
            <param name="rootMetaItem">The root MetaItem instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.CanContinueTraversing">
            <summary>
            Determines whether the traversing process can continue.
            </summary>
            <returns>A boolean value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.GetNextItem">
            <summary>
            Gets the next MetaItem instance.
            </summary>
            <returns>The MetaItem instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.AddItemForVisiting(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Adds a MetaItem to the list of items to be visited.
            </summary>
            <param name="item">The MetaItem instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.EndTraverse(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Ends the traversing process.
            </summary>
            <param name="rootMetaItem">The root MetaItem instance</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWalker.GetChildItems(Telerik.OpenAccess.Metadata.MetaItem)">
            <summary>
            Gets the list of child MetaItems for a MetaItem.
            </summary>
            <param name="metaItem">The MetaItem instance</param>
            <returns>The list of child meta items</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.CUDOperation">
            <summary>
            Enumeration specifying the operation for the CUD mapping.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Insert">
            <summary>
            The insert operation.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Update">
            <summary>
            The update operation.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Delete">
            <summary>
            The delete operation.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.InheritanceWorker">
            <summary>
            Helper class to be used when working with inheritance hierarchy.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.#ctor(Telerik.OpenAccess.Metadata.MetadataWorker,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Class that manages operations in an inheritance hierarchy.
            </summary>
            <param name="worker">MetadataWorker instance that manages regular metadata operations with the model.</param>
            <param name="persistentType">The persistent type which is treated as the 'owner' of the hierarchy.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.BreakHierarchyAtCurrentLevel">
            <summary>
            Breaks the hierarchy at the level of the owner of the hierarchy. The owner has no bas after this operation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.AddBaseClassToHierarchy(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Adds a class to a hierarchy as a top-most base class.
            </summary>
            <param name="persistentType">The class to be added as a base class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.CanAddBaseClassToHierarchy(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Verifies if a class can be installed as a top-most base class in a hierarchy.
            </summary>
            <param name="persistentType">The class that is verified.</param>
            <returns>True if the class can be installed a top-most base class in the current class hierarchy.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.IsBaseInHierarchy(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Checks if a class is a base class for the owner of the hierarchy.
            </summary>
            <param name="baseType">The Base Type to be checked.</param>
            <returns>True, if the baseType is direct base or higher in the hierarchy of the owner of the hierarchy.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.ImplementHorizontalBaseClassMembersInDerivations(Telerik.OpenAccess.Metadata.MetaPersistentType,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType})">
            <summary>
            Implements the members of a base class in its derived classes. It is required when the base class has horizontal inheritance strategy set.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="derivations">The derived types.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.AddNewHorizontalBaseClassMemberInDerivations(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaMember)">
            <summary>
            Adds a new member from horizontal base class in its derived classes.
            </summary>
            <param name="baseType">The horizontal base class where the new member is added.</param>
            <param name="newMember">The new member of the horizontal base class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RemoveHorizontalBaseClassMembersFromDerivations(Telerik.OpenAccess.Metadata.MetaType,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType},Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Removes the members that derived classes inherit from a horizontal base class. It is required when the base class changes its inheritance strategy.
            </summary>
            <param name="baseType">The horizontal base class.</param>
            <param name="derivations">The derived classes.</param>
            <param name="worker">A metadata worker instance used for removal of the meta members.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RemoveImplementationsForRemovedBaseClassMember(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Removes the implementations for a member that has been removed from a horizontal base class.
            </summary>
            <param name="baseType">The horizontal base class.</param>
            <param name="removedMember">The member that has been removed.</param>
            <param name="worker">MetadataWorker instance.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.CopyFieldsFromAllHorizontalBaseTypesToDerivation(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Copies the fields from all classes higher in the hierarchy in one derivation.
            </summary>
            <param name="bottomHorizontalBase">The class that is bottom most in the hierarchy and has horizontal inheritance strategy.</param>
            <param name="derivation">The derived class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.AddNewMetaMemberToInterfaceImplementors(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Adds a new member to the target metaInterface and implements it in the classes that implement the interface.
            </summary>
            <param name="metaInterface">The interface with the new member.</param>
            <param name="newMember">The new member that is added to the interface.</param>
            <param name="worker">The new member that is added to the interface.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RemoveMetaMemberFromInterface(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Removes the specified member from the interface and all classes that implement the interface.
            </summary>
            <param name="metaInterface">The interface from which a member is removed.</param>
            <param name="removedMember">The member that is removed from the interface.</param>
            <param name="worker">MetadataWorker instance.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RenameInterfaceMember(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetaMember,System.String)">
            <summary>
            Handles renaming of a member in an interface. When the interface member is renamed, the members
            that represent implementations of the renamed member in the implementing classes also get renamed.
            </summary>
            <param name="metaInterface">The interface for which a member is renamed.</param>
            <param name="renamedMember">The member that is renamed.</param>
            <param name="originalName">The original name of the renamed member.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.ImplementMembersFromInterface(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Copies a MetaMember from a base type to its inheritor.
            </summary>
            <param name="metaInterface">The meta interface to which the member belongs.</param>
            <param name="targetClass">The implementing class.</param>
            <param name="worker">Worker instance.</param>       
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.ImplementMetaMemberFromBaseClass(Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Implements a MetaMember from an abstract base class.
            </summary>
            <param name="baseMember">The MetaPrimitiveMember to implement.</param>
            <param name="targetClass">The inheritor class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.GetImplementedMetaMember(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetaMember,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetadataWorker)">
            <summary>
            Gets an implemented meta member.
            </summary>
            <param name="worker">MetadataWorker instance used for calculating the field name of the implemented member if such is not provided.</param>
            <param name="targetClass">The class where the member will be implemented.</param>
            <param name="baseMember">The base class member that gets implemented.</param>
            <param name="metaInterface">The interface where the implemented member is defined.</param>
            <returns>Meta member that represents an implementation of a base class member.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.GetImplementedMetaMember(System.String,System.String,Telerik.OpenAccess.Metadata.MetaMember)">
            <summary>
            Gets an implemented meta member.
            </summary>
            <param name="fieldName">The field name of the meta member.</param>
            <param name="propertyName">The property name of the meta member.</param>
            <param name="baseMember">The base class member that gets implemented.</param>
            <returns>Meta member that represents an implementation of a base class member.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RenameClassInHierarchy(Telerik.OpenAccess.Metadata.MetaPersistentType,System.String,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType})">
            <summary>
            Handles renaming of a class that is part of a hierarchy. In case the class has horizontal inheritance strategy, the fields that its derivations
            inherit from it are also renamed.
            </summary>
            <param name="renamedClass"></param>
            <param name="originalFullName">The original name of the class before it was renamed.</param>
            <param name="derivations">The derived classes whose members get changed by the renaming of the base class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RenameInterfaceInHierarchy(Telerik.OpenAccess.Metadata.MetaInterface,System.String,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType})">
            <summary>
            Handles renaming of a class that is part of a hierarchy. In case the class has horizontal inheritance strategy, the fields that its derivations
            inherit from it are also renamed.
            </summary>
            <param name="renamedInterface"></param>
            <param name="originalFullName">The original name of the class before it was renamed.</param>
            <param name="derivations">The derived classes whose members get changed by the renaming of the base class.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RenameBaseMember(Telerik.OpenAccess.Metadata.MetaMember,System.String)">
            <summary>
            Handles renaming of a member in a class that acts as a base horizontal class in a hierarchy. When a base class member is renamed, the members
            that represent implementations of the renamed member in the derived classes of the base also get renamed.
            </summary>
            <param name="renamedMember">The member that was renamed in the base class.</param>
            <param name="originalName">The original name of the member before it was renamed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.RenameBaseMember(Telerik.OpenAccess.Metadata.MetaMember,System.String,Telerik.OpenAccess.Metadata.MetaType,System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPersistentType})">
            <summary>
            Renames a member of a horizontal base class.
            </summary>
            <param name="renamedMember">The renamed members.</param>
            <param name="originalName">The original name of the renamed member.</param>
            <param name="baseType">The base type which is owner of the renamed member.</param>
            <param name="derivations">The derived classes that implement the renamed member.</param>
        </member>
        <member name="M:Telerik.OpenAccess.InheritanceWorker.IsHigherInHierarchy(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Checks if a class is higher in the inheritance hierarchy from another class. Higher means base for the other class.
            </summary>
            <param name="baseClass">The class that is checked if it is higher in hierarchy than the second class.</param>
            <param name="derivedClass">The class that is checked if it is lower in hierarchy than the first class.</param>
            <returns>True, if firstClass is higher in the inheritance hierarchy from secondClass.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataWorker">
            <summary>
            A class used for Telerik Data Access meta model manipulation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneStringList(System.Collections.Generic.IList{System.String})">
            <summary>
            Clones the string list.
            </summary>
            <param name="stringList">The string list.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaItemHelper``1(``0,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta item helper.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metaItem">The meta item.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaItemHelper``1(``0,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.AggregationOptions,Telerik.OpenAccess.Metadata.MetaItemComparerFactory,Telerik.OpenAccess.Metadata.MonikerFactory)">
            <summary>
            Clones the meta item helper.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metaItem">The meta item.</param>
            <param name="container">The container.</param>
            <param name="options">Resolution options.</param>
            <param name="comparerFactory">Comparer factory used.</param>
            <param name="monikerFactory">Moniker factory used.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the metadata container.
            </summary>
            <param name="metadataContainer">The metadata container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.AggregationOptions)">
            <summary>
            Clones the metadata container.
            </summary>
            <param name="metadataContainer">The metadata container.</param>
            <param name="options">Resolution options.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.AggregationOptions,Telerik.OpenAccess.Metadata.MetaItemComparerFactory,Telerik.OpenAccess.Metadata.MonikerFactory)">
            <summary>
            Clones the metadata container.
            </summary>
            <param name="metadataContainer">The metadata container.</param>
            <param name="options">Resolution options.</param>
            <param name="comparer">The comparer used.</param>
            <param name="factory">The moniker factory used.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Clones the meta table.
            </summary>
            <param name="metaTable">The meta table.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaTable(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta table.
            </summary>
            <param name="metaTable">The meta table.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Clones the meta column.
            </summary>
            <param name="metaColumn">The meta column.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaIndex(Telerik.OpenAccess.Metadata.Relational.MetaIndex)">
            <summary>
            Clones the index of the meta.
            </summary>
            <param name="metaIndex">Index of the meta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaIndex(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the index of the meta.
            </summary>
            <param name="metaIndex">Index of the meta.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaView(Telerik.OpenAccess.Metadata.Relational.MetaView)">
            <summary>
            Clones the meta view.
            </summary>
            <param name="metaView">The meta view.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaView(Telerik.OpenAccess.Metadata.Relational.MetaView,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta view.
            </summary>
            <param name="metaView">The meta view.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Clones the type of the meta persistent.
            </summary>
            <param name="metaPersistentType">Type of the meta persistent.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the type of the meta persistent.
            </summary>
            <param name="metaPersistentType">Type of the meta persistent.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPrimitiveType(Telerik.OpenAccess.Metadata.MetaPrimitiveType)">
            <summary>
            Clones the type of the meta primitive.
            </summary>
            <param name="metaPrimitiveType">Type of the meta primitive.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaType(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Clones the type of the meta.
            </summary>
            <param name="metaType">Type of the meta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaConstraint(Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
            <summary>
            Clones the meta constraint.
            </summary>
            <param name="metaConstraint">The meta constraint.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaConstraint(Telerik.OpenAccess.Metadata.Relational.MetaConstraint,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta constraint.
            </summary>
            <param name="metaConstraint">The meta constraint.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
            <summary>
            Clones the meta interface.
            </summary>
            <param name="metaInterface">The meta interface.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta interface.
            </summary>
            <param name="metaInterface">The meta interface.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStruct(Telerik.OpenAccess.Metadata.MetaStruct)">
            <summary>
            Clones the meta struct.
            </summary>
            <param name="metaStruct">The meta struct.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStruct(Telerik.OpenAccess.Metadata.MetaStruct,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta struct.
            </summary>
            <param name="metaStruct">The meta struct.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping)">
            <summary>
            Clones the meta stored procedure mapping.
            </summary>
            <param name="storedProcedureMapping">The stored procedure mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta stored procedure mapping.
            </summary>
            <param name="storedProcedureMapping">The stored procedure mapping.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaParameterMapping(Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping)">
            <summary>
            Clones the meta parameter mapping.
            </summary>
            <param name="parameterMapping">The parameter mapping.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
            <summary>
            Clones the meta stored procedure parameter.
            </summary>
            <param name="storedProcedureParameter">The stored procedure parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta stored procedure parameter.
            </summary>
            <param name="storedProcedureParameter">The stored procedure parameter.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Clones the meta stored procedure.
            </summary>
            <param name="storedProcedure">The stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta stored procedure.
            </summary>
            <param name="storedProcedure">The stored procedure.</param>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFetchGroupMember(Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta fetch group member.
            </summary>
            <param name="metaFetchGroupMember">The meta fetch group member.</param>
            <param name="container">The metadata container, used to resolve the references.</param>
            <returns>A clone of the meta fetch group member.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFetchGroup(Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Clones the meta fetch group.
            </summary>
            <param name="metaFetchGroup">The meta fetch group.</param>
            <param name="container">The metadata container, used to resolve the references.</param>
            <returns>A clone of the meta fetch group.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFunctionParameter(Telerik.OpenAccess.Metadata.MetaFunctionParameter)">
            <summary>
            Clones the meta function parameter.
            </summary>
            <param name="metaFunctionParameter">The meta function parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFunction(Telerik.OpenAccess.Metadata.MetaFunction)">
            <summary>
            Clones the meta function.
            </summary>
            <param name="metaFunction">The meta function.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaForeignKeyAssociation(Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation)">
            <summary>
            Clones the meta foreign key association.
            </summary>
            <param name="metaForeignKeyAssociation">The meta foreign key association.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaJoinTableAssociation(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation)">
            <summary>
            Clones the meta join table association.
            </summary>
            <param name="metaJoinTableAssociation">The meta join table association.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaAssociation(Telerik.OpenAccess.Metadata.MetaAssociation)">
            <summary>
            Clones the meta association.
            </summary>
            <param name="metaAssociation">The meta association.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaNavigationMember(Telerik.OpenAccess.Metadata.MetaNavigationMember)">
            <summary>
            Clones the meta navigation member.
            </summary>
            <param name="metaNavigationMember">The meta navigation member.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPrimitiveMember(Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Clones the meta primitive member.
            </summary>
            <param name="metaPrimitiveMember">The meta primitive member.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaMember(Telerik.OpenAccess.Metadata.MetaMember)">
            <summary>
            Clones the meta member.
            </summary>
            <param name="metaMember">The meta member.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDatabaseSchema(Telerik.OpenAccess.SPI.ISchemaReader)">
            <summary>
            Initializes a MetadataContainer instance containing the information about
            the full database schema.
            </summary>
            <param name="reader">A SchemaReader instance that contains information about the schema 
            like connection string, database provider name etc.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaTables(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the tables that are part of a given database schema.
            </summary>
            <param name="schemaName">The name of the database schema.</param>
            <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaViews(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the database views that are part of a given database schema.
            </summary>
            <param name="schemaName">The name of the database schema.</param>
            <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaStoredProcedures(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the stored procedures that are part of a given database schema
            </summary>
            <param name="schemaName">The name of the database schema</param>
            <param name="container">The MetadataContainer that contains the full database with all it's
            schemas</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaConstraints(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the foreign key constraints that are part of a given database schema.
            </summary>
            <param name="schemaName">The name of the database schema.</param>
            <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetTableConstraints(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the foreign key constraints that are part of a given table.
            </summary>
            <param name="fullName">The name of the table.</param>
            <param name="container">The MetadataContainer that contains the given table</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetPrimitiveMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the primitive members that belong to a persistent type.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetPrimitiveMembers(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Gets the primitive members that belong to a persistent type.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetAllMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the members that belong to a persistent type, including the members inherited from base classes.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetAllPrimitiveMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the primitive members that belong to a persistent type, including the members inherited from base classes.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetNotNullablePrimitiveMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the primitive members that belong to a persistent type that are not nullable.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetNavigationMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the navigation members that belong to a persistent type.
            </summary>
            <param name="persistentType">The persistent type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetTableConstraints(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the foreign key constraints that are part of a given table.
            </summary>
            <param name="table">The table that owns the constraints.</param>
            <param name="container">The MetadataContainer that contains the given table</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveBrokenConstraints(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaTable})">
            <summary>
            Removes the foreign key constraints which point to tables not contained in the collection.
            </summary>
            <param name="tables">The tables that own the constraints.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveBrokenConstraints(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.Relational.MetaTable},System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.Relational.MetaTable})">
            <summary>
            Removes the foreign key constraints which point to tables not contained in the collection.
            </summary>
            <param name="tables">The tables that own the constraints.</param>
            <param name="availableTables">A list of available tables to be used when checking if a constraint is to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRegularTablesFromModelForDefaultMapping(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Obtains a collection of tables that should be mapped to a Persistent Class by default.
            These tables have not been detected as join tables.
            </summary>
            <param name="container">The MetadataContainer instance that contains the tables.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRegularTablesFromModel(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Obtains a collection of tables that should be mapped to a Persistent Class by default.
            These tables have not been detected as join tables.
            </summary>
            <param name="container">The MetadataContainer instance that contains the tables.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetJoinTablesFromModelForDefaultMapping(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Obtains a collection of tables that are detected as join tables by the default mapping mechanism.
            </summary>
            <param name="container">The MetadataContainer instance that contains the tables.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.SetIsJoinTableValueForTables(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Sets the IsJoinTable value to true for all tables recognized as join tables from a given MetadataContainer.
            </summary>
            <param name="container">The MetadataContainer instance that contains the tables.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetJoinTablesFromModel(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Obtains a collection of tables that have the IsJoinTable option enabled.
            </summary>
            <param name="container">The MetadataContainer instance that contains the tables.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsJoinTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Evaluates a table if it is a join table.
            </summary>
            <param name="table">The table to be evaluated.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRelationshipsForClass(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Finds all relationships that a persistent type belongs to.
            </summary>
            <param name="persistentType">The persistent type.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
            <summary>
            Retrieves a column from a given table by its name.
            </summary>
            <param name="table">The table that contains the column.</param>
            <param name="columnName">The name of the searched column.</param>
            <returns>The MetaColumn with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
            <summary>
            Retrieves a column from a given table by its name.
            </summary>
            <param name="container">The MetadataContainer instance that contains the table or the view of
            the searched column.</param>
            <param name="tableName">The name of the table or the view that contains the searched column.</param>
            <param name="columnName">The name of the searched column.</param>
            <returns>MetaColumn instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintBySourceColumns(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
            <summary>
            Retrieves a foreign key constraint by the columns that define the constraint in the owner table.
            In a 1:n relationshpip, these columns define the '1' end of the relationship.
            </summary>
            <param name="columns">The columns that define the constraint.</param>
            <returns>MetaConstraint instance that is associated with the given foreign key columns.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
            <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
            <param name="ownerTable">The table that owns the constraint.</param>
            <param name="constraintName">The name of the searched foreign key constraint.</param>
            <returns>MetaConstraint instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByFullName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
            <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
            <param name="container">The MetadataContainer instance that contains the constraint.</param>
            <param name="constraintName">The full name of the searched foreign key constraint.</param>
            <returns>MetaConstraint instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
            <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
            <param name="container">The MetadataContainer instance that contains the constraint.</param>
            <param name="constraintName">The name of the searched foreign key constraint.</param>
            <returns>MetaConstraint instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaIndexByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
            <summary>
            Retrieves a database index by its name.
            </summary>
            <param name="table">The name of the table associated with the searched index.</param>
            <param name="indexName">The name of the searched index.</param>
            <returns>MetaIndex instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
            <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
            <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
            <param name="tableName">The name of the table that maps to the searched persistent type.</param>
            <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
            <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
            <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
            <param name="tableName">The name of the table that maps to the searched persistent type.</param>
            <param name="schemaName">The name of the database schema that contains the table.</param>
            <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
            <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
            <param name="table">The table that maps to the searched persistent type.</param>
            <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned. If more than one persistent type are mapped to the same table, 
            the top one in the inheritance hierarchy will be returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
            <summary>
            Retrieves a table by its name.
            </summary>
            <param name="container">The MetadataContainer instance that contains the table.</param>
            <param name="tableName">The name of the searched table.</param>
            <param name="schemaName">The schema of the searched table.</param>
            <returns>MetaTable instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
            <summary>
            Retrieves a database view by its name.
            </summary>
            <param name="container">The MetadataContainer instance that contains the database view.</param>
            <param name="viewName">The name of the searched database view.</param>
            <param name="schemaName">The name of the schema of the searched database view.</param>
            <returns>MetaView instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetClrTypeForRelationalItem(Telerik.OpenAccess.Data.IDataColumn)">
            <summary>
            Resolves the .Net type for a database column or stored procedure parameter.
            </summary>
            <param name="dataColumn">The column or stored procedure parameter whose type is required.</param>
            <returns>System.Type that reflects the database type of the column or stored procedure parameter.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetAssociationPartsForAssociation(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.AssociationPartType)">
            <summary>
            Gets a list of MetaAssociationPart objects that define a specific aspect of an association.
            </summary>
            <param name="association">The association.</param>
            <param name="partType">The type of the searched parts.</param>
            <returns>List of MetaAssociationPart objects that are of the specified type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetPrimaryKeyColumns(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Gets the columns that are part of the primary key for a given table.
            </summary>
            <param name="table">The table whose primary key columns are to be obtained.</param>
            <returns>List of MetaColumn instances that are part of the primary key for the specified table.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetKeyGeneratorForTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Gets the relational key generator for a given table.
            </summary>
            <param name="table">The table whose key generator is to be obtained.</param>
            <returns>String representation of the relational key generator used for the specified table.
            If the table has no relational key generator - string.Empty is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityType(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Gets the identity type for a given table.
            </summary>
            <param name="table">The table whose identity type is to be obtained.</param>
            <returns>IdenetityType.Single if the table has single primary key column. 
            IdentityType.Multiple if the table has a composite primary key.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the identity type for a given persistentType.
            </summary>
            <param name="type">The persistent type whose identity type is to be obtained.</param>
            <returns>IdenetityType.Single if the persistent type has single identity member. 
            IdentityType.Multiple if the persistent type has multiple identity members.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Gets the identity members for a persistent type.
            </summary>
            <param name="persistentType">The persistent type whose identity members are queried.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetGenericCollectionType(System.Type[])">
            <summary>
            Retrieves the System.Type for a generic collection by its generic arguments.
            </summary>
            <param name="genericArguments">The generic arguments of the collection.</param>
            <returns>System.Type that presents the type of the collection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(System.String,System.String)">
            <summary>
            Retrieves a column from a given table by its name.
            </summary>
            <param name="tableName">The name of the table that contains the searched column.</param>
            <param name="columnName">The name of the searched column.</param>
            <returns>MetaColumn instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByTargetField(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Retrieves a column from a given table by its target field.
            </summary>
            <param name="table">The table that contains the searched column.</param>
            <param name="targetMember">The target field.</param>
            <returns>MetaColumn instance targeting the specified member.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(System.String)">
            <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
            <param name="tableName">The name of the table that maps to the searched persistent type.</param>
            <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Retrieves a persistent type that is mapped to a given table. 
            </summary>
            <param name="table">The table that maps to the searched persistent type.</param>
            <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned. If more than one persistent type are mapped to the same table, 
            the top one in the inheritance hierarchy will be returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(System.String)">
            <summary>
            Retrieves a table by its name.
            </summary>
            <param name="tableName">The name of the searched table.</param>
            <returns>MetaTable instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(System.String,System.String)">
            <summary>
            Retrieves a table by its name.
            </summary>
            <param name="tableName">The name of the searched table.</param>
            <param name="schemaName">The name of the schema of the searched table.</param>
            <returns>MetaTable instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(System.String)">
            <summary>
            Retrieves a database view by its name.
            </summary>
            <param name="viewName">The name of the searched database view.</param>
            <returns>MetaView instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(System.String,System.String)">
            <summary>
            Retrieves a database view by its name.
            </summary>
            <param name="viewName">The name of the searched database view.</param>
            <param name="schemaName">The name of the database schema.</param>
            <returns>MetaView instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByFullName(System.String)">
            <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
            <param name="constraintFullName">The full name of the searched foreign key constraint.</param>
            <returns>MetaConstraint instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(System.String,System.String)">
            <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
            <param name="constraintName">The name of the searched foreign key constraint.</param>
            <param name="tableName">The name of the table of the searched foreign key constraint.</param>
            <returns>MetaConstraint instance with the specified name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(System.String,System.String,System.String)">
            <summary>
            Retrieves a persistent class by its full name.
            </summary>
            <param name="name">The name of the class.</param>
            <param name="nameSpace">The namespace of the class.</param>
            <param name="rootNamespace">The root namespace of the model, required for VB.Net projects.</param>
            <returns>MetaPersistentType instance that has the specified name and namespace.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(System.String,System.String)">
            <summary>
            Retrieves a persistent class by its full name.
            </summary>
            <param name="name">The name of the class.</param>
            <param name="nameSpace">The namespace of the class.</param>
            <returns>MetaPersistentType instance that has the specified name and namespace.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(System.String)">
            <summary>
            Retrieves a persistent class by its full name.
            </summary>
            <param name="fullName">The full name of the class.</param>
            <returns>MetaPersistentType instance that has the specified full name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
            <summary>
            Retrieves a persistent class by its full name.
            </summary>
            <param name="container">The meta model that contains the searched type.</param>
            <param name="fullName">The full name of the class.</param>
            <returns>MetaPersistentType instance that has the specified full name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaMemberByFieldName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Retrieves a member of a persistent type by its field name.
            </summary>
            <param name="fieldName">The name of the searched member.</param>
            <param name="ownerType">The persistent type that owns the member.</param>
            <returns>MetaMember instance that has the specified field name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaMemberByName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Retrieves a member of a persistent type by its field or property name.
            </summary>
            <param name="name">The name of the searched member.</param>
            <param name="ownerType">The persistent type that owns the member.</param>
            <returns>MetaMember instance that has the specified field or property name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPrimitiveMembersMappedToColumns(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Retrieves a list of primitive members of a persistent type mapped to a list of columns.
            </summary>
            <param name="columns">The columns mapped to the primitive members.</param>
            <param name="ownerType">The persistent type that owns the member.</param>
            <returns>A list of MetaPrimitiveMember instances that are mapped to the List of columns passed as an argument.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPrimitiveMemberMappedToColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Retrieves a primitive member of a persistent type mapped to particular column.
            </summary>
            <param name="column">The column mapped to the primitive member.</param>
            <param name="ownerType">The persistent type that owns the member.</param>
            <returns>MetaMember instance that has the specified field or property name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPrimitiveMemberMappedToColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Retrieves a primitive member of a persistent type mapped to particular column.
            </summary>
            <param name="column">The column mapped to the primitive member.</param>
            <returns>MetaMember instance that has the specified field or property name.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMultiplicityForReference(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
            <summary>
            Finds the multiplicity for a reference by the foreign key columns that define that reference.
            </summary>
            <param name="foreignKeyColumns">The foreign key columns that define the reference.</param>
            <returns>Multiplicity.One if there is at least one non-nullable column. Otherwise,
            Multiplicity.ZeroOrOne is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMultiplicityForReference(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPrimitiveMember})">
            <summary>
            Finds the multiplicity for a reference by the foreign key columns that define that reference.
            </summary>
            <param name="foreignKeyMembers">The foreign key members that define the reference.</param>
            <returns>Multiplicity.One if there is at least one non-nullable column. Otherwise,
            Multiplicity.ZeroOrOne is returned.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindPrimaryKeyMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Finds the primary key members for a specified persistent type
            </summary>
            <param name="persistentType">The persistent type that owns the primary key members.</param>
            <returns>Collection of all fields that are part of the identity of the specified persistent type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindUnmappedColumns(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Finds the columns of a table that are not mapped to members of a persistent type.
            </summary>
            <param name="declaringType">The persistent type.</param>
            <returns>The columns that are not mapped.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapTableToPersistentType(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Maps a table to a persistent class that contains no members.
            </summary>
            <param name="table">The table that is being mapped.</param>
            <returns>MetaPersistentType that contains no members.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapPrimitiveMember(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Maps a column to a primitive member.
            </summary>
            <param name="column">The column that is to be mapped.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapReference(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember,System.Boolean)">
            <summary>
            Maps a reference member of a persistent type.
            </summary>
            <param name="ownerType">The owner type of the reference.</param>
            <param name="referencedType">The type of the reference.</param>
            <param name="metaForeignKeyMember">The foreign key member which particiaptes in the association.</param>
            <param name="isManaged"></param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.HandleInheritanceInOneToOneRelationship(Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
            <summary>
            Handles a one-to-one relationship as vertical inheritance.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapCollection(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Maps a collection member of a persistent type without a reference member on the opposite side 
            of the association
            </summary>
            <param name="ownerOfCollection">The persistent type that owns the collection member</param>
            <param name="referencedType">The referenced type of the collection. This is the
            type of the elements of the collection</param>
            <param name="metaForeignKeyMember">The foreign key member which particiaptes in the association.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapJoinTableCollection(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Maps a join table to collections on both sides of an 
            m:n relationship associated with the join table.
            </summary>
            <param name="ownerType">The persistent type that owns the master collection.</param>
            <param name="referencedType">The type of the elements in the master collection.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CreateInverseCollection(Telerik.OpenAccess.Metadata.MetaNavigationMember,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Creates an inverse collection for 1:n or m:n relationships. 
            Such collection can be created when a reference or master collection is already defined 
            on the other side of the relationship.
            </summary>
            <param name="master">The master of the inverse collection. That is the navigation member 
            on the opposite side of the relationship.</param>
            <param name="metaForeignKeyMember">The foreign key member which particiaptes in the association.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CreateInverseReference(Telerik.OpenAccess.Metadata.MetaNavigationMember)">
            <summary>
            Creates an inverse reference for 1:1 relationships. 
            Such reference can be created when a master reference is already defined 
            on the other side of the relationship.
            </summary>
            <param name="master">The master of the inverse reference. That is the navigation member 
            on the opposite side of the relationship.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.ChangeNamespace(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaType},System.String)">
            <summary>
            Changes the namespace of a collection of persistent types.
            </summary>
            <param name="persistentTypes">The persistent types whose namespace is to be changed.</param>
            <param name="nameSpace">The new namespace for the specified persistent types.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetUniqueNamespaces">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRequiredNamespaces(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Gets the namespaces of the member types that are part of the meta model.
            </summary>
            <param name="container">The meta model.</param>
            <returns>List of the unique namespaces of the members.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.UpdateSchemasCollection(Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Ensures that the Schemas collection of the MetadataContainer contains all schemas from the model
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Adds a persistent type in an existing model. Reference members are created 
            for all already mapped persistent types
            whose tables have foreign key constraints pointing to the table of the newly mapped type.
            </summary>
            <param name="persistentType">The new persistent type to be added in the model.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemovePersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Removes a persistent type from an existing model. All references and collections of other existing
            persistent types that point to this persistent type are also removed.
            </summary>
            <param name="persistentType">The persistent type to be removed from the model.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
            <summary>
            Adds a new interface to the meta model.
            </summary>
            <param name="newInterface">The interface to be added.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
            <summary>
            Removes an interface from the meta model.
            </summary>
            <param name="removedInterface">The interface to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Remove a table from the relational model
            </summary>
            <param name="table">The table that is to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Removes a stored procedure from the metadata container
            </summary>
            <param name="procedure">The procedure to be removed</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
            <summary>
            Removes a column from the relation model
            </summary>
            <param name="column">The column that is to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddPrimitiveMember(Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Adds a primitive member to a mapped persistent type.
            </summary>
            <param name="persistentType">The persistent type that is the owner of the new 
            primitive member.</param>
            <param name="field">The new primitive member added.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemovePrimitiveMember(Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
            <summary>
            Removes a primitive member from a mapped persistent type. 
            </summary>
            <param name="persistentType">The persistent type that is the owner of the 
            primitive member to be removed.</param>
            <param name="field">The primitive member to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AreAllIdentityMembersUsedAsForeignKeys(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPrimitiveMember},System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.MetaPrimitiveMember})">
            <summary>
            All id members should be used as part of the foreign key, to guarantee that no other object could reference the same target object.
            Additional non-id members could also be part of the foreign key.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CreateNewTable(System.String,System.String)">
            <summary>
            Creates a new table with the given name and schema name
            </summary>
            <param name="name">The name of the created table</param>
            <param name="schemaName">The schema name of the created table</param>
            <returns>The created MetaTable</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CreateStoredProcedure(System.String,System.String)">
            <summary>
            Creates a stored procedure with the specified name and schema name
            </summary>
            <param name="name">The name of the created procedure</param>
            <param name="schemaName">The schema name of the created procedure</param>
            <returns>The created MetaStoredProcedure</returns>        
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveReference(Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
            <summary>
            Removes a reference member from a persistent type. If an inverse collection
            exists at the referenced type, it is removed as well.
            </summary>
            <param name="ownerOfReference">The persistent type that is the owner of the
            reference member to be removed.</param>
            <param name="reference">The reference member to be removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveCollection(Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
            <summary>
            Removes a collection member from a persistent type. If the removed collection is 
            a master collection and an inverse collection exists, the inverse collection is made a master 
            so it does not get removed too.
            </summary>
            <param name="ownerOfCollection">The persistent type that is the owner of the
            collection member to be removed. </param>
            <param name="collection">The collection member that is being removed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.SyncImplementationPropertiesOnNamespaceChanged(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
            <summary>
            Synchronizing the MemberDefinitionType and name properties of the Implementation properties with the
            new FullName of their Definition Types after changing the root namespace of the container.
            </summary>
            <param name="metadataContainer">The metadata for the domain model</param>
            <param name="oldRootNamespace">The old value of the Root namespace in VB project.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.SyncImplementationPropertiesOnNamespaceChanged(Telerik.OpenAccess.Metadata.MetaType,System.String)">
            <summary>
            Synchronizing the MemberDefinitionType property of the Implementation properties with the
            new FullName of their Definition Type after changing its namespace.
            </summary>
            <param name="metaType">MetaInterface or base MetaPersistentType from a Horizontal inheritance</param>
            <param name="oldNamespace">The old value of the MetaType namespace.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.SyncImplementationPropertiesOnNamespaceChanged(Telerik.OpenAccess.Metadata.MetaType,System.String,System.String)">
            <summary>
            Synchronizing the MemberDefinitionType and name properties of the Implementation properties with the
            new FullName of their Definition Type after changing the new namespace to the MetaType or 
            the Root Namespace of the container.
            </summary>
            <param name="metaType">MetaInterface or base MetaPersistentType from a Horizontal inheritance</param>
            <param name="oldNamespace">The old value of the MetaType namespace (or the current value if only the Root namespace is changed in VB).</param>
            <param name="oldRootNamespace">The old value of the Root namespace in VB project (or the current value if only the MetaType namespace is changed).</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDerivedTypes(Telerik.OpenAccess.Metadata.MetaType)">
            <summary>
            Get the derived types found for the given MetaType including the non direct ones or an empty list if no derived types found.
            </summary>
            <param name="metaType">The base meta type</param>
            <returns>All of the derived types found for the given MetaType.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDerivedTypes(Telerik.OpenAccess.Metadata.MetaPersistentType)">
            <summary>
            Get the derived types found for the given MetaPersistentType including the non direct ones or an empty list if no derived types found.
            </summary>
            <param name="persistentType">The base meta type</param>
            <returns>All of the derived types found for the given MetaPersistentType.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDerivedTypes(Telerik.OpenAccess.Metadata.MetaInterface)">
            <summary>
            Get the implementation types found for the given MetaInterface including the non direct ones or an empty list if no implementations found.
            </summary>
            <param name="metaInterface">The base meta type</param>
            <returns>All of the implementation types found for the given MetaInterface.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsMapped(Telerik.OpenAccess.Metadata.MetaItem,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Determines whether a relational MetaItem is mapped to a conceptual entity.
            </summary>
            <param name="itemToCheck">The relational item.</param>
            <param name="container">MetadataContainer where the mapping is defined.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsReservedTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Determines whether a table can be mapped to a class.
            </summary>
            <param name="table">The table to check for</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsReservedTable(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Determens whether a table can be mapped to a class.
            </summary>
            <param name="table">The table to check for</param>
            <param name="container">The metadata container for which the check will be performed.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetMetaStoredProcedure(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.CUDOperation)">
            <summary>
            Gets a new meta stored procedure based on the persisten type and CUD operation
            </summary>
            <param name="persistentType">The persistent type.</param>
            <param name="operation">Create/Update/Delete operation</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CanMapToProcedure(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.CUDOperation)">
            <summary>
            Determines whether the procedure is valid for mapping to this CUD operation
            </summary>
            <param name="persistentType">The persistent type.</param>
            <param name="procedure">Target store procedure.</param>
            <param name="operation">Create/Update/Delete operation.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
            <summary>
            Creates a stored procedure object based on the persistent type and CUD operation
            </summary>
            <param name="persistentType">The persistent type.</param>
            <param name="procedure">Target store procedure.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.SetMetaStoredProcedureParameterClrType(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
            <summary>
            Updates the CLR type of the MetaStoredProcedureParameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsSingleFieldIdentityPossible(System.String)">
            <summary>
            Determines whether the given field type has a corresponding single field identity type associated.
            </summary>
            <param name="fieldType">The FullName of the type of the field (int, string, ...)</param>
            <returns><c>True</c> if there is a single field identity type for the given field type.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaAssociationParts(Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.AssociationPartType)">
            <summary>
            Retrieves the specified association part from the specified association
            </summary>
            <param name="association">The association which containts the required part</param>
            <param name="partType">The type of the association part to be returned</param>
            <returns>A list of MetaAssociationPart instances with specifed partType,else null</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AreCollectionsEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Compare two collections for equality.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="firstCollection">The first collection.</param>
            <param name="secondCollection">The second collection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetConstraintsForSplitTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
            <summary>
            Retrieves the constrains for a given split table.
            </summary>
            <param name="table">The split table.</param>
            <returns>A collection of constraints.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MarkForDropping(Telerik.OpenAccess.Metadata.MetaItem,System.Boolean)">
            <summary>
            Denote that the table for MetaPersistentType should be dropped or not during the next schema migration
            </summary>
            <param name="item">MetaPersistentType instance whose table is to be dropped </param>
            <param name="drop">'True' if the table of the MetaPersistentType should be dropped, else 'False'</param>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaItem`1">
            <summary>
            Delegate invoking a method that implements the cloning of a Meta Item
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.MetaWorkerContext">
            <summary>
            Represents a class that is contracted to a MetadataWorker class and serves as a context 
            for different artifacts used by a MetadataWorker instance
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.SPI.ISchemaReader,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Initializes a new MetaWorkerContext instance with a SchemaReader parameter
            </summary>
            <param name="reader">defines the schema reader used for obtaining the meta model that
            is part of this context</param>
            <param name="container">defines the metamodel that will be used in this context</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy)">
            <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
            <param name="container">defines the metamodel that will be used in this context</param>
            <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,Telerik.OpenAccess.Metadata.ITypeResolver)">
            <summary>
            Initializes a new MetaWorkerContext instance with a meta model, a naming strategy and a type resolver
            </summary>
            <param name="container">defines the metamodel that will be used in this context</param>
            <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
            <param name="typeResolver">Allows the mapping from a sql column type to a clr type.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,System.String)">
            <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
            <param name="container">defines the metamodel that will be used in this context</param>
            <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
            <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,System.String,System.Boolean)">
            <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
            <param name="container">defines the metamodel that will be used in this context</param>
            <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
            <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
            <param name="generateNamespacesBySchemaNames">defines if the namespaces of the mapped 
            classes will reflect the schema names of the corresponding tables</param>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.ITypeResolver)">
            <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
            <param name="container">defines the metamodel that will be used in this context</param>
            <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
            <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
            <param name="rootNamespace">defines the root namespace for the model. Mainly used for VB .Net models.</param>
            <param name="generateNamespacesBySchemaNames">defines if the namespaces of the mapped 
            classes will reflect the schema names of the corresponding tables</param>
            <param name="typeResolver">Allows the mapping from a sql column type to a clr type.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.NamingStrategy">
            <summary>
            Gets the naming strategy that is going to be used by the worker that is contracted to this context
            when generating names during mapping operations
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.DatabaseSchema">
            <summary>
            Gets the meta model that contains the full database schema
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.DefaultMapper">
            <summary>
            Gets the default mapper used for executing mapping operations with the defult rules
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.Worker">
            <summary>
            Gets the MetadataWorker instance used for executing operations on the meta model that
            is part of this context
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.GenerateNamespacesBySchemaNames">
            <summary>
            Gets whether the namespaces of the mapped 
            classes will reflect the schema names of the corresponding tables
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectId">
            <summary>
            Represents the unique identity of a persistent object.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IObjectId">
            <summary>
            Database object identifiers of persistent objects.
            </summary>
            <remarks>
            <para>
            Instances of this type can be created from a string representation
            using the
            <see cref="M:Telerik.OpenAccess.Database.ParseObjectId(System.Type,System.String)">Database.ParseObjectId</see> method
            and can also be obtained from the 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">IObjectContext.GetObjectId</see>
            and
            <see cref="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)">Database.GetObjectId</see>
            methods.
            </para>
            <para>
            Instances of this type are serializable.
            </para>
            <para>
            Instances of this type support the <see cref="M:System.Object.Equals(System.Object)"/>
            and <see cref="M:System.Object.GetHashCode"/> methods.
            </para>
            <para>
            Instances of this type are serializable.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes an instance of the ObjectId with the given primary key values and Type.
            For internal and enhanced code usage.
            </summary>
            <param name="values">The primary key values</param>
            <param name="pcType">Type of the persistent class</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the ObjectKey from a string of identity values and type of the persistent class
            </summary>
            <param name="pcType">Type of the persistent class</param>
            <param name="idValues">String representation of identity values separated by <see cref="P:Telerik.OpenAccess.ObjectId.ValueSeparator"/>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectKey from a string of identity values
            </summary>
            <param name="idValues">String representation of identity values separated by <see cref="P:Telerik.OpenAccess.ObjectId.ValueSeparator"/> and the type name.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.ToString">
            <summary>
            Returns the type name and identity values as a string value.
            </summary>
            <remarks>
            The different key parts are separated by <see cref="P:Telerik.OpenAccess.ObjectId.ValueSeparator"/>.
            </remarks>
            <returns>String representation that is usable with <see cref="M:Telerik.OpenAccess.ObjectId.#ctor(System.String)"/>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.Equals(System.Object)">
            <summary>
            Determines whether the specified ObjectId instance is equal to the current ObjectKey instance
            </summary>
            <param name="obj">The ObjectId to compare with the current ObjectId</param>
            <returns>true if the specified ObjectId is equal to the current ObjectId; otherwise, false</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.GetHashCode">
            <summary>
            Serves as a hash function for an instance of ObjectId. 
            </summary>
            <returns>A hash code for the current ObjectId</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectId.AppendValue(System.Text.StringBuilder,System.Object)">
            <summary>
            Helper method to append the given value to the given StringBuilder in a format that is parseable by Telerik Data Access. 
            </summary>
            <remarks>
            Telerik Data Access uses the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to produce string representations.
            The string representation must be round-trip safe.
            </remarks>
            <param name="stringBuilder">The StringBuilder instance where the string representation of the <paramref name="value"/> should be appended.</param>
            <param name="value">The value that is to be appended.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectId.Item(System.Int32)">
            <summary>
            Controls the value of the specified identity field 
            </summary>
            <param name="index">Index of the identity field</param>
            <value>Value of the specified identity field</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectId.PersistentType">
            <summary>
            Gets the type of the persistent class whose identity is represented by this instance
            </summary>
            <value>The type of the instance that this ObjectId refers to.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectId.ValueSeparator">
            <summary>
            Controls the character that is used to separate the key value parts in the string representation of ObjectId.
            </summary>
            <remarks>If the character (default: ';') is set to be in the private use area 0xe000-0xf8ff, the string representation of
            string key fields is changed and no length is prepended.
            </remarks>
            <value>Character that is used to separate the key value parts</value>
            <exception cref="T:System.ArgumentOutOfRangeException">When invalid value is attempted to be set</exception>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectKey">
            <summary>
            Represents a context independent representation of the identity of a persistent object.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey(Telerik.OpenAccess.ObjectKey)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor">
            <summary>
            Initializes a new instance of the ObjectKey class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ObjectKey class with a type name and a key value.
            </summary>
            <remarks>This constructor should be used for persistent types whose identity is made up of a single primitive member. This also applies to persistent types
            whose identity member is managed by Telerik Data Access internally.</remarks>
            <param name="typeName">A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</param>
            <param name="keyValue">An <see cref="T:System.Object"/> that is the value of the key</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> or <paramref name="keyValue"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKeyMember})">
            <summary>
            Initializes a new instance of the ObjectKey class with a type name and an IEnumerable&lt;T&gt; collection of ObjectKeyMember objects.
            </summary>
            <param name="typeName">A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</param>
            <param name="objectKeyValues">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of ObjectKeyMember objects with which to initialize the key. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> or <paramref name="objectKeyValues"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string</exception>
            <exception cref="T:System.ArgumentException">If the key or value of any item in the <paramref name="objectKeyValues"/> collection is a null reference.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKeyMember},System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectVersionMember})">
            <summary>
            Initializes a new instance of the ObjectKey class with a type name and an IEnumerable&lt;T&gt; collection of ObjectKeyMember objects.
            </summary>
            <param name="typeName">A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</param>
            <param name="objectKeyValues">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of ObjectKeyMember objects with which to initialize the key. </param>
            <param name="objectVersionValues">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of ObjectVersionMember objects with which to initialize the key. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> or <paramref name="objectVersionValues"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string</exception>
            <exception cref="T:System.ArgumentException">If the key or value of any item in the <paramref name="objectVersionValues"/> collection is a null reference.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the ObjectKey class with a type name and a generic KeyValuePair collection.
            </summary>
            <param name="typeName">A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</param>
            <param name="objectKeyValues">Each key/value pair has a property/field field name as the key and the value of that property/field as the value. 
            There should be one pair for each member that is part of the identity of the persistent type. The order of the key/value pairs is not important.This constructor
            can also be called with an <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> or <paramref name="objectKeyValues"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string</exception>
            <exception cref="T:System.ArgumentException">If the key or value of any item in the <paramref name="objectKeyValues"/> collection is a null reference.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the ObjectKey class with a type name and a generic KeyValuePair collection.
            </summary>
            <param name="typeName">A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</param>
            <param name="objectKeyValues">Each key/value pair has a property/field field name as the key and the value of that property/field as the value. 
            There should be one pair for each member that is part of the identity of the persistent type. The order of the key/value pairs is not important.This constructor
            can also be called with an <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </param>
            <param name="objectVersionValues">Each key/value pair has a property/field field name as the key and the value of that property/field as the value. 
            There should be one pair for each member that is part of the versioning of the persistent type. The order of the key/value pairs is not important.This constructor
            can also be called with an <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> or <paramref name="objectKeyValues"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string</exception>
            <exception cref="T:System.ArgumentException">If the key or value of any item in the <paramref name="objectKeyValues"/> collection is a null reference.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified ObjectKey. 
            </summary>
            <remarks>Two ObjectKeys are considered equal if their <see cref="P:Telerik.OpenAccess.ObjectKey.TypeName"/> refers to the same persistent type and the
            key and version values are equal. The order of they key and version members is not considered.</remarks>
            <param name="other">An <see cref="T:Telerik.OpenAccess.ObjectKey"/> object to compare with this instance.</param>
            <returns>true if this instance and 'other' have equal values; otherwise, false. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.GetHashCode">
            <summary>
            Serves as a hash function for the current ObjectKey instance. 
            </summary>
            <returns>A hash code for the current <see cref="T:Telerik.OpenAccess.ObjectKey"/> instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.ToString">
            <summary>
            Returns a string that represents the current ObjectKey.
            </summary>
            <returns>A string that represents the current ObjectKey</returns>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectKey.CompareWithoutVersion">
            <summary>
            Provides an equality comparer that ignores the version information in the ObjectKey.
            </summary>
            <remarks>
            The ObjectKey in it's Equals and GetHashCode methods takes the version information into account.
            The CompareWithoutVersion instances ignores the version information.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.Equals(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object. 
            </summary>
            <param name="other">An <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>true if this instance and the specified object have equal values; otherwise, false. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)">
            <summary>
            Creates an ObjectKey instance from a given persistent entity 
            </summary>
            <remarks>The <paramref name="entity"/> parameter should be persistence capable and should be managed by an OpenAccessContext instance. 
            The returned ObjectKey does not have version information. In order to obtain a key with version information use the <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> method.
            </remarks> 
            <param name="entity">Persistent entity whose ObjectKey instance is to be created</param>
            <returns>ObjectKey instance representing the identity information of the <paramref name="entity"/> parameter</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entity"/> is not managed by a context</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)">
            <summary>
            Creates an ObjectKey instance with version information, from a given persistent entity. 
            </summary>
            <remarks>The <paramref name="entity"/> parameter should be persistence capable and should be managed by an OpenAccessContext instance.
            The returned ObjectKey contains version information for the specified entity. The version information consists of key/value pairs for each field that is 
            used to perform optimistic concurrency checks. If the type of the persistent entity uses the <see cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.None"/> the 
            returned ObjectKey does not contain any version information. No version information is returned for a new entity that is added to a context but not yet
            committed to the database via call to <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/>. Similarly no version information is returned for an entity that is
            removed from the context via <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Object)"/>.
            </remarks>
            <param name="entity">Persistent entity whose ObjectKey is to be created</param>
            <returns>ObjectKey instance representing the identity and version information of the <paramref name="entity"/> parameter</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entity"/> is not managed by a context</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.GetWithoutVersion">
            <summary>
            Returns a copy of the current ObjectKey instance but without any version information
            </summary>
            <returns>An ObjectKey instance that is a copy of the current instance but has no version information.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Returns the XML schema for the ObjectKey type.
            </summary>
            <param name="xs">Target XML schema set</param>
            <returns>XML qualified name</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.Object)">
            <summary>
            For Telerik Data Access internal use only.
            </summary>
            <param name="tag">For OpenAccess internal use only.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKey.TypeName">
            <summary>
            Gets or sets the name of the persistent type
            </summary>
            <value>A <see cref="T:System.String"/> that specifies the name of the persistent type. This value should uniquely identify a persistent type 
            within the domain model.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKey.ObjectKeyValues">
            <summary>
            Gets or sets the key values associated with this ObjectKey.
            </summary>
            <value>A read-only collection of key values of this ObjectKey</value>
            <remarks>Once the key values of an ObjectKey are set using the parameterized constructors, they cannot be modified.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKey.ObjectVersionValues">
            <summary>
            Gets the version values associated with this ObjectKey.
            </summary>
            <value>A read-only collection of version values of this ObjectKey if this instance has version information, else null</value>
            <remarks>This property returns an <see cref="T:Telerik.OpenAccess.ObjectVersionMember"/> instance for each field of the persistent type that is used to 
            perform optimistic concurrency checks. This property should not be set explicitly by the user.</remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKey.HasVersion">
            <summary>
            Gets whether this ObjectKey has version information.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that specifies whether this ObjectKey has version information for the entity that it represents</value>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectKeyMember">
            <summary>
            Represents a key name and value pair that is part of an ObjectKey.
            </summary>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey(Telerik.OpenAccess.ObjectKey)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectKeyMember.UnspecifiedKeyName">
            <summary>
            Represents a key without a name.
            </summary>
            <remarks>This member can be used as the name of a key for persistent types whose identity is made up of a single primitive member. It is not required to
            explicitly specify the key name in such cases as this information can be easily inferred. If you want construct an ObjectKey by specifying just the persistent type 
            name and the key value, you can use the <see cref="T:Telerik.OpenAccess.ObjectKey"/>.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectKeyMember.InternalIdentityField">
            <summary>
            Represents a identity member that is managed internally by Telerik Data Access and does not have a corresponding primitive member declared in the persistent type.
            </summary>
            <remarks>An ObjectKeyMember instance with a key name 'InternalIdentityField' indicates that the identity member for the it's persistent type is managed
            internally by Telerik Data Access.The persistent type does not have a field or property declared explicitly within code.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectKeyMember.InternalVersionField">
            <summary>
            Represents a primitive member used for optimistic concurrency checks that is managed internally by Telerik Data Access and does not have a corresponding primitive member 
            declared in the persistent type.
            </summary>
            <remarks>An ObjectVersionMember instance with a key name 'InternalVersionField' indicates that the version member for the it's persistent type is managed
            internally by Telerik Data Access.The persistent type does not have a field or property declared explicitly within code.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMember.#ctor">
            <summary>
            Initializes a new instance of the ObjectKeyMember class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMember.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ObjectKeyMember class with the specified object key pair.
            </summary>
            <param name="keyName">A <see cref="T:System.String"/> that is the name of the key.</param>
            <param name="keyValue">An <see cref="T:System.Object"/> that is the key value.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMember.ToString">
            <summary>
            Returns a string representation of the object key.
            </summary>
            <remarks>The ToString method returns a string in the format "[keyName, keyValue]".</remarks>
            <returns>A string.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKeyMember.Key">
            <summary>
            The name of the object key.
            </summary>
            <value>A <see cref="T:System.String"/> that is the key name.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKeyMember.Value">
            <summary>
            The value of the object key.
            </summary>
            <value>An <see cref="T:System.Object"/> that is the key value.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectKeyMember.HasBinaryValue">
            <summary>
            Determines whether the value is represented in a binary form.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectVersionMember">
            <summary>
            Represents a field or property name and value pair that forms a part of the version information of the persistent entity.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectVersionMember.#ctor">
            <summary>
            Initializes a new instance of the ObjectVersionMember class.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectVersionMember.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ObjectVersionMember class with the specified object key pair.
            </summary>
            <remarks>The <paramref name="keyName"/> specifies the name of a member that is used to perform optimistic concurrency checks.</remarks>
            <param name="keyName">A <see cref="T:System.String"/> that is the name of the version member.</param>
            <param name="keyValue">An <see cref="T:System.Object"/> that is the value of the version member.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ValueTypeEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectKeyConverter">
            <summary>
            Converts a ObjectKey object from one data type to another. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object to the given destination type using the context.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context. </param>
            <param name="destinationType">A Type object that represents the type you want to convert to. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a ObjectKey object.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, 
            and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
            <param name="value">The object to convert. </param>
            <returns>The converted object. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, 
            and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
            <param name="value">The object to convert. </param>
            <param name="destinationType">The type to convert the object to. </param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectVersionMemberConverter">
            <summary>
            Converts a ObjectVersionMember object from one data type to another. 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectKeyMemberConverter">
            <summary>
            Converts a ObjectKeyMember object from one data type to another. 
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMemberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMemberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object to the given destination type using the context.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context. </param>
            <param name="destinationType">A Type object that represents the type you want to convert to. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMemberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a ObjectKeyMember object.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, 
            and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
            <param name="value">The object to convert. </param>
            <returns>The converted object. </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMemberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, 
            and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
            <param name="value">The object to convert. </param>
            <param name="destinationType">The type to convert the object to. </param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectKeyMemberConverter.CreateInstance(System.String)">
            <summary>
            Creates a new instance of the ObjectKeyMember type.
            </summary>
            <param name="key">The key name for the new instance</param>
            <returns> An ObjectKeyMember instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectVersionMemberConverter.CreateInstance(System.String)">
            <summary>
            Creates a new instance of the ObjectVersionMember type.
            </summary>
            <param name="key">The key name for the new instance</param>
            <returns> An ObjectKeyMember instance.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IModelTreeNode">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Util.ITreeNodeWithKey">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.ITreeNodeWithKey.GetKey">
            <summary>
            hidden.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.OpenAccess.Util.ITreeNodeWithKey.IsExpanded">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.ITreeNodeWithKey.IsSelected">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.ITreeNodeWithKey.Children">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.ITreeNodeWithKey.Parent">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IModelTreeNode.OnDoubleClick">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.Name">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.IsChecked">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.IsCheckAllowed">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.Item">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.ImageUri">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.Owner">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IModelTreeNode.Nodes">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Util.TreeNodeKey">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.TreeNodeKey.#ctor(System.Type,System.String)">
            <summary>
            hidden.
            </summary>    
        </member>
        <member name="M:Telerik.OpenAccess.Util.TreeNodeKey.Equals(System.Object)">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.TreeNodeKey.GetHashCode">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.TreeNodeKey.ToString">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.TreeNodeKey.Equals(Telerik.OpenAccess.Util.TreeNodeKey)">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.TreeNodeKey.Type">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.TreeNodeKey.Name">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Util.ModelTreeNodeComparer">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.ModelTreeNodeComparer.Compare(Telerik.OpenAccess.Util.IModelTreeNode,Telerik.OpenAccess.Util.IModelTreeNode)">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Util.DragDropLocal">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.DragDropLocal.#ctor(System.Object)">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.DragDropLocal.GetObject">
            <summary>
            hidden.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfigurationManager">
            <summary>
            Class managing the backend configuration merge process between entries specified in configuration file ones defined imperatively in code.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfigurationManager.MergeBackendConfigurationFromConfigFile(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.ConfigurationMergeMode)">
            <summary>
            Merges the configuration file entries to a BackendConfiguration object defined imperatively in code.
            </summary>
            <param name="fromCode">The compiled<see cref="T:Telerik.OpenAccess.BackendConfiguration"/> object where the settings read from configuration file will be merged to.</param>
            <param name="mergeMode">The merge mode used in case configuration properties are explicitly specified in configuration file and in code.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfigurationManager.MergeBackendConfigurationFromConfigFile(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.ConfigurationMergeMode,System.String)">
            <summary>
            Merges the configuration file entries to a BackendConfiguration object defined imperatively in code.
            </summary>
            <param name="fromCode">The compiled<see cref="T:Telerik.OpenAccess.BackendConfiguration"/> object where the settings read from configuration file will be merged to.</param>
            <param name="mergeMode">The merge mode used in case configuration properties are explicitly specified in configuration file and in code.</param>
            <param name="configurationName">The name of the backendConfiguration entry specified in the configuration file.</param>
        </member>
        <member name="T:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet">
            <summary>
            An object holding configuration properties and their values specified in a configuration file.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.ApplyConfiguration(System.Object,Telerik.OpenAccess.ConfigurationMergeMode)">
            <summary>
            Applies the backend configuration properties read from configuration file to a configuration object. The type of the configuration object must be
            equal to the type specified in the ConfigurationType property.
            </summary>
            <param name="configuration">The configuration object to which the properties will be applied.</param>
            <param name="mergeMode">The mode in which the properties will be applied.</param>
        </member>
        <member name="M:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.AddChildPropertySet(Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet)">
            <summary>
            Adds a child property set to the current backend configuration property set.
            </summary>
            <param name="child">The child configuration property set.</param>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.ConfigurationType">
            <summary>
            The type of the configuration object for which values have been read from configuration file.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.PropertyValues">
            <summary>
            Values for a configuration object read from a configuration file.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.ListPropertyValues">
            <summary>
            Values for all collection properties of the configuration.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.BackendConfigurationConfigFilePropertySet.ChildPropertySets">
            <summary>
            Child configuration property sets.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ConfigurationMergeMode">
            <summary>
            Specifies the mode in which a backend configuration object can be modified from configuration file.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConfigurationMergeMode.ConfigFileDefinitionWins">
            <summary>
            If a configuration property is explicitly set in code and in configuration file, the value from 
            configuration file will be the one that will be used during runtime.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConfigurationMergeMode.CompiledConfigurationWins">
            <summary>
            If a configuration property is explicitly set in code and in configuration file, the value set
            in code will be the one that will be used during runtime.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ConfigurationMergeMode.LoggingOnly">
            <summary>
            Defines a mode in which the only settings read from configuration file will be the logging settings. If a logging setting is
            explicitly set in code and in configuration file, the value from the configuration file will be the one
            used by the runtime.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.UniqueIdGenerator">
            <summary>
            Specifies setting for a unique integer key generation.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UniqueIdGenerator.name">
            <summary>
            The name of the sequence for which the UniqueIdGenerator object will be used.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UniqueIdGenerator.seedValue">
            <summary>
            The seed that will be used as the starting value by the unique id generator.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.UniqueIdGenerator.grabSize">
            <summary>
            The grab size of the unique id generator.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.UniqueIdGenerator.#ctor(System.String)">
            <summary>
            Initializes an instance of the UniqueIdGenerator class.
            </summary>
            <param name="name">The name of the sequence for which the UniqueIdGenerator object will be used.</param>
        </member>
        <member name="M:Telerik.OpenAccess.UniqueIdGenerator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of the UniqueIdGenerator class.
            </summary>
            <param name="name">The name of the sequence for which the UniqueIdGenerator object will be used.</param>
            <param name="grabSize">The grab size of the unique id generator.</param>
        </member>
        <member name="M:Telerik.OpenAccess.UniqueIdGenerator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the UniqueIdGenerator class.
            </summary>
            <param name="name">The name of the sequence for which the UniqueIdGenerator object will be used.</param>
            <param name="seed">The seed that will be used as the starting value by the unique id generator.</param>
            <param name="grabSize">The grab size of the unique id generator.</param>
        </member>
        <member name="M:Telerik.OpenAccess.UniqueIdGenerator.Initialize(Telerik.OpenAccess.OpenAccessContextBase)">
            <summary>
            Initializes the settings for the unique id generator. 
            This method can be overridden to initialize the seed value that will be used to obtain a unique id.
            </summary>
            <param name="context">An OpenAccessContext instance that can be used to perform any queries that might be required to initialize this instance</param>
        </member>
        <member name="P:Telerik.OpenAccess.UniqueIdGenerator.Name">
            <summary>
            Gets the name of the unique id sequence for which unique id values should be generated.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.UniqueIdGenerator.Seed">
            <summary>
            Gets the seed that will be used as the starting value by the unique id generator.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.UniqueIdGenerator.GrabSize">
            <summary>
            Gets the grab size of the unique id generator.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.OpenAccessContextBase">
            <summary>
            OpenAccess context base class for .NET 2.0 usage.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IOpenAccessContextOptions">
             <summary>Defines options that affect the behavior of the OpenAccessContextBase.
             </summary>
             <remarks>
            <para>
            Instances of this class can be obtained
            from the <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.ContextOptions">
            </see> property, which will always contain the current context options
            of the <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/>.
            </para>
             </remarks>
            <seealso cref="T:Telerik.OpenAccess.OpenAccessContextBase"/>
        </member>
        <member name="P:Telerik.OpenAccess.IOpenAccessContextOptions.EnableDataSynchronization">
            <summary>
            Gets or sets a Boolean value that determines whether the context behaves in data synchronization mode during Insert and Update operations. 
            If the OpenAccessContextBase is in this mode, OpenAccess will skip calculation of the DateTime and version field values.
            </summary>
            <remarks>
            This property should be set to 'True' only if the context instance is used to synchronize the data between two databases. In such a scenario it is desired that the 
            auto calculated fields such as the 'version' field are not recalculated since an exact copy of the data should be inserted in the target database.
            
            <note>
            Do not set this property to 'True' for a context that is used for normal operations. If set, it could lead to undesired database exceptions due to the 
            default value of the field being inserted or updated.
            </note>
            </remarks>
            /// <returns>A <see cref="T:System.Boolean"/> value that is true when data synchronization mode
            is enabled; otherwise false.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues">
            <summary>
            Controls weather the original values are loaded and kept when a field is changed.
            </summary>
            <remarks>
            MaintainOriginalValues has to set to true if the original values have to be available. The memory consumption might increase per persistent object.
            </remarks>
            <value>True if all original values should be kept in memory, false otherwise.</value>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetOriginalValue``1(System.Object,System.String)"/>
        </member>
        <member name="P:Telerik.OpenAccess.IOpenAccessContextOptions.RefreshObjectsAfterSaveChanges">
             <summary>
             Controls weather all loaded objects are refreshed in a new transaction.
             </summary>
             <remarks>
             If SaveChanges() or ClearChanges() is called, the data in the loaded objects managed by the context might no longer reflect the database content.
             Other processes or clients might have modified data in the database as well. To make the optimistic concurrency control working better, Telerik Data Access
             reloads all data in a subsequent transaction.
            <para>
            The default is <c>true</c>, and this setting should only be changed with
            great care, as setting it to <c>false</c> might result in long-living
            stale objects.
            </para>
            <para>
            Note, that the default value of <c>true</c> does not guarantee non-stale
            objects when using optimistic transactions. It does only guarantee, that
            objects used in previous transactions are refreshed on the first read access
            in subsequent transactions of the same context.
            </para>		
             </remarks>
             <value>True if all objects should be refreshed in subsequent transactions, false otherwise. True is the default.</value>
        </member>
        <member name="P:Telerik.OpenAccess.IOpenAccessContextOptions.IsolationLevel">
            <summary>
            Controls the isolation level of this contexts resources.
            </summary>
            <remarks>
            When an isolation level is specified, the context will need to use transactions for read access.
            <para>
            When <c>null</c> is specified, the default isolation level (ReadCommitted) is used and transactions around read requests might be omitted (depending on the
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReadWithoutTransactions"/> setting).
            </para>
            <para>
            Not all database systems support all possible isolation levels, therefore only Snapshot, ReadCommitted and ReadUncommitted are currently supported.
            </para>
            <para>
            The second level cache will not be used or populated when any value except <c>null</c> is specified for this context.
            </para>
            </remarks>
            <value>Isolation Level (Default: null)</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong isolation level, only Snapshot, ReadCommitted and ReadUncommitted allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Isolation level cannot be changed because a connection is active.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource)">
            <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string, the backend type must be set.
            </param>
            <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource)">
            <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="cacheKey">The key to be used when caching the model metadata.</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string, the backend type must be set.
            </param>
            <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string, the backend type must be set.
            </param>
            <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="cacheKey">The key to be used when caching the model metadata.</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string, the backend type must be set.
            </param>
            <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
            <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string. The backend type must be set then.
            </param>
            <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
            <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
            <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="cacheKey">The key to be used when caching the model metadata.</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string. The backend type must be set then.
            </param>
            <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
            <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource,System.Reflection.Assembly)">
            <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string. The backend type must be set then.
            </param>
            <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
            <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource,System.Reflection.Assembly)">
            <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
            <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
            <param name="cacheKey">The key to be used when caching the model metadata.</param>
            <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connection string. The backend type must be set then.
            </param>
            <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
            <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(Telerik.OpenAccess.OpenAccessContextBase)">
            <summary>
            Copy constructor, the same database connection and configuration will be used.
            </summary>
            <param name="otherContext">An existing not disposed context</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Init(System.String,System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
            <summary>
            Initializes this context instance.
            </summary>
            <param name="connectionString">A connections string.</param>
            <param name="cacheKey">The key to be used when caching the model metadata.</param>
            <param name="backendConfiguration">A BackendConfiguration instance.</param>
            <param name="metadataContainer">A MetadataContainer instance.</param>
            <param name="callingAssembly">The calling assembly.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Init(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
            <summary>
            Initializes this context instance.
            </summary>
            <param name="connectionString">A connections string.</param>
            <param name="backendConfiguration">A BackendConfiguration instance.</param>
            <param name="metadataContainer">A MetadataContainer instance.</param>
            <param name="callingAssembly">The calling assembly.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Init(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Initializes this context instance.
            </summary>
            <param name="connectionString">A connections string.</param>
            <param name="backendConfiguration">A BackendConfiguration instance.</param>
            <param name="metadataContainer">A MetadataContainer instance.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ReplaceMetadata(Telerik.OpenAccess.OpenAccessContextBase,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.SchemaUpdateCallback)">
            <summary>
            Replaces the metadata definition with a running context instance used for new instances.
            </summary>
            <param name="context">The context that has initiated the mapping update.</param>
            <param name="newMetadata">Metadata definition to use for new contexts.</param>
            <param name="callback">A callback to integrate schema migration tasks if necessary.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges">
            <summary>
            Saves all changes in the context
            </summary>
            <remarks>
            If a current transaction <see cref="P:System.Transactions.Tranaction.Current"/> is available it is used. 
            If not the changes are committed immediately.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges(Telerik.OpenAccess.ConcurrencyConflictsProcessingMode)">
            <summary>
            Saves the changes with the specified concurrency mode
            </summary>
            <remarks>
            If all failures during commit should be collected and not only the first one the mode 
            <see cref="E:ConcurrencyConflictsProcessingMode.AggregateAll"/> has to be used.
            This can be time consuming.
            </remarks>
            <param name="failureMode">Mode to use</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges">
            <summary>
            Rolls back all changes in the context
            </summary>
            <remarks>
            All changes made so far in this context are rolled back.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.FlushChanges">
            <summary>
            Flushes all current changes to the database but keeps the transaction running.
            </summary>
            <remarks>
            All changes made so far in this context are sent to the server but the transaction is not committed. 
            A following SaveChanges or ClearChanges is necessary to complete the operations. Flush can be used to 
            see all changed information in the following queries or to get the server side calculated primary keys
            immediately.
            <para>
            FlushChanges will pin a database connection to the context, start a server side transaction and keeps that 
            running until ClearChanges or SaveChanges is called. The time between FlushChanges and ClearChanges or 
            SaveChanges should be kept minimal so that the server side transaction is short.
            There should not be a user interaction between the FlushChanges and the following ClearChanges or SaveChanges call.
            </para>
            <para>
            For longer running import operations use <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.FlushChanges(System.Boolean)"/>
            </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.FlushChanges(System.Boolean)">
            <summary>
            Flushes all current changes to the database but keeps the transaction running.
            </summary>
            <remarks>
            All changes made so far in this context are sent to the server but the transaction is not committed. 
            A following SaveChanges or ClearChanges is necessary to complete the operations. Flush can be used to 
            see all changed information in the following queries or to get the server side calculated primary keys
            immediately. Use parameter 'true' during import operations. This helps freeing the memory for the flushed data.
            <para>
            FlushChanges will pin a database connection to the context, start a server side transaction and keeps that 
            running until ClearChanges or SaveChanges is called. The time between FlushChanges and ClearChanges or 
            SaveChanges should be kept minimal so that the server side transaction is short.
            There should not be a user interaction between the FlushChanges and the following ClearChanges or SaveChanges call.
            </para>
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.HasChanges"/> property returns a 'false' if the memory has been released.
            </para>
            <para>
            The memory optimization might lead to level two cache anomalies. You can avoid them by manually evicting the level
            two cache after your final SaveChanges call.
            </para>
            </remarks>
            <param name="releaseMemory">Clean up the used memory of the participating objects.</param>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetChanges">
            <summary>
            Returns all objects that will be inserted, deleted or updated during the next commit.
            </summary>
            <returns><see cref="T:Telerik.OpenAccess.ContextChanges"/> to access all pending inserts, deletes or updates.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetSchemaHandler">
            <summary>
            Gets schema handling instance. Must be called and used before any object scope is obtained.
            </summary>
            <remarks>
            With the schema handler, the database schema can be checked and migrated.
            </remarks>
            <returns>Schema Handler instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <typeparam name="T">The return type, can be a persistent class or 'Object' or Object[]</typeparam>
            <param name="procedureName">The name of the stored procedure, can be delimited if necessary.</param>
            <param name="parameterDefinition">A list of <see cref="C:SqlParameter"/> defining the stored procedure parameter.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>List of persistent classes or a IList&lt;object&gt; or a IList&lt;object[]&gt;</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <typeparam name="T">The return type, can be a persistent class, 'Object' or Object[]</typeparam>
            <param name="procedureName">The name of the stored procedure, can be delimited if necessary.</param>
            <param name="parameterDefinition">A list of <see cref="C:SqlParameter"/> defining the stored procedure parameter.</param>
            <param name="parameterValues">The parameter values.</param>
            <param name="outParameter">If the stored procedure has out parameter the dictionary contains</param>
            <returns>List of persistent classes or a IList&lt;object&gt; or a IList&lt;object[]&gt;</returns>        
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command text using the context owned connection and materializes the results to instances of T.
            </summary>
            <remarks>
            <para>
            The reader obtained by executing the command is iterated completely and materialized into instances of <typeparamref name="T"/>
            </para>
            <para>The command is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <typeparam name="T">The type to materialize each row into</typeparam>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <returns>A list of objects of type T</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteQuery``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command text using the context owned connection and materializes the results to instances of T.
            </summary>
            <remarks>
            <para>
            The reader obtained by executing the command is iterated completely and materialized into instances of <typeparamref name="T"/>
            </para>
            <para>The command is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <typeparam name="T">The type to materialize each row into</typeparam>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <param name="commandType">The command type</param>
            <returns>A list of objects of type T</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteScalar``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. 
            All other columns and rows are ignored.
            </summary>
            <remarks>
            <para>The query is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the query
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. This method assumes the specified sql to be a query and not a stored procedure name. In case you need to execute a stored procedure that
            returns a scalar value you can use the overload that takes a <see cref="T:System.Data.CommandType"/> parameter.
            </para>
            </remarks>
            <typeparam name="T">The type of the expected scalar value</typeparam>
            <param name="commandText">The sql to execute</param>
            <param name="parameters">The parameters required to execute the sql</param>
            <returns>The value in the first column of the first row in the result set</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. 
            All other columns and rows are ignored.
            </summary>
            <remarks>
            <para>The query is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the query
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. This method assumes the specified sql to be a query and not a stored procedure name. In case you need to execute a stored procedure that
            returns a scalar value you can use the overload that takes a <see cref="T:System.Data.CommandType"/> parameter.
            </para>
            </remarks>
            <typeparam name="T">The type of the expected scalar value</typeparam>
            <param name="commandText">The sql to execute</param>
            <param name="commandType">The command type</param>
            <param name="parameters">The parameters required to execute the sql</param>
            <returns>The value in the first column of the first row in the result set</returns>        
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement using the context owned connection.
            </summary>
            <remarks>
            <para>The statement is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement using the context owned connection.
            </summary>
            <remarks>
            <para>The statement is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="commandType">The command type</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Translate``1(System.Data.Common.DbDataReader)">
            <summary>
            Lazily materializes the current result of a DbDataReader into a specified type.
            </summary>
            <remarks>
            <para>
            If a persistence capable type is specified, the result will be attached (merged) into the context.
            </para>
            <para>
            The returned enumerable is evaluated lazily: No result element is created when the enumeration is
            not performed. This requires the calling code to either ensure that the reader is not closed or disposed
            until all the needed result elements are obtained. Usually, this can be forced with a .ToList() call.
            </para>
            </remarks>
            <typeparam name="T">Target type</typeparam>
            <param name="reader">Source data reader</param>
            <returns>Materialized result</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteQuery(System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command text using the context owned connection and materializes the results to instances defined by persistentTypeFullName.
            </summary>
            <remarks>
            <para>
            The reader obtained by executing the command is iterated completely and materialized into instances defined by <paramref name="persistentTypeFullName"/>
            </para>
            <para>The command is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <param name="persistentTypeFullName">Full name of the type that should be generated</param>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <returns>A list of objects of the specified type</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteQuery(System.String,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the command text using the context owned connection and materializes the results to instances defined by persistentTypeFullName.
            </summary>
            <remarks>
            <para>
            The reader obtained by executing the command is iterated completely and materialized into instances defined by <paramref name="persistentTypeFullName"/>
            </para>
            <para>The command is executed within a transaction that is managed by the context. To commit or rollback the actions performed by the statement
            you need to call the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> 
            method respectively.
            </para>
            <para>
            The parameters passed to this method can be instances of the <see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> class or provider specific instances that 
            implement the <see cref="T:System.Data.Common.DbParameter"/> class. 
            </para>
            </remarks>
            <param name="persistentTypeFullName">Full name of the type that should be generated</param>
            <param name="commandText">The text of the command to run against the data source.</param>
            <param name="commandType">The command type</param>
            <param name="parameters">The parameters(<see cref="T:Telerik.OpenAccess.Data.Common.OAParameter"/> or <see cref="T:System.Data.Common.DbParameter"/>) required to execute the statement</param>
            <returns>A list of objects of the specified type</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Translate(System.String,System.Data.Common.DbDataReader)">
            <summary>
            Lazily materializes the current result of a DbDataReader into a specified type.
            </summary>
            <remarks>
            <para>
            If a persistence capable type is specified, the result will be attached (merged) into the context.
            </para>
            <para>
            The returned enumerable is evaluated lazily: No result element is created when the enumeration is
            not performed. This requires the calling code to either ensure that the reader is not closed or disposed
            until all the needed result elements are obtained. Usually, this can be forced with a .ToList() call.
            </para>
            </remarks>
            <param name="persistentTypeFullName">Full name of the type that should be generated</param>
            <param name="reader">Source data reader</param>
            <returns>Materialized result</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Collections.IEnumerable)">
            <summary>
            Refreshes a collection of entity objects according to the specified mode. 
            </summary>
            <param name="mode">Defines if dirty fields stay dirty.</param>
            <param name="entities">List of entities to be refreshed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Object[])">
            <summary>
            Refreshes a number of entities according to the specified mode. 
            </summary>
            <param name="mode">Defines if dirty fields stay dirty.</param>
            <param name="entities">List of entities to be refreshed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Object)">
            <summary>
            Refreshes a collection of entity objects according to the specified mode. 
            </summary>
            <param name="mode">Defines if dirty fields stay dirty.</param>
            <param name="entity">Entity to be refreshed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObject``1(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
            <param name="key">The unique describing a persistent entity.</param>
            <typeparam name="T">The expected object type. If unknown use <see cref="T:System.Object"/></typeparam>
            <returns>The persistent object found in the context or loaded from the database</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)">
            <summary>
            Creates an ObjectKey instance from a given persistent entity 
            </summary>
            <example>
            The following example retrieves a single employee object from the Nortwhind database and uses the CreateDetachedCopy method 
            to create a detached copy of the object. The employeeCopy object will not be tracked by Telerik Data Access and any changes
            made to it will not be persisted.
            <code>
                Northwind.Employee employee = context.GetAll&lt;Northwind.Employee&gt;().Single(x =&gt; x.Id == 1);
                Northwind.Employee employeeCopy = context.CreateDetachedCopy&lt;Northwind.Employee&gt;(employee);        
            </code>
            </example>
            <remarks>The <paramref name="entity"/> parameter should be persistence capable and should be managed by this OpenAccessContext instance. 
            The returned ObjectKey does not have version information. In order to obtain a key with version information use the <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/> method.
            </remarks> 
            <param name="entity">Persistent entity whose ObjectKey instance is to be created</param>
            <returns>ObjectKey instance representing the identity information of the <paramref name="entity"/> parameter</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entity"/> is not managed by this context</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)">
            <summary>
            Creates an ObjectKey instance with version information, from a given persistent entity. 
            </summary>
            <remarks>The <paramref name="entity"/> parameter should be persistence capable and should be managed by this OpenAccessContext instance.
            The returned ObjectKey contains version information for the specified entity. The version information consists of key/value pairs for each field that is 
            used to perform optimistic concurrency checks. If the type of the persistent entity uses the <see cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.None"/> the 
            returned ObjectKey does not contain any version information. No version information is returned for a new entity that is added to a context but not yet
            committed to the database via call to <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/>. Similarly no version information is returned for an entity that is
            removed from the context via <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Object)"/>.
            </remarks>
            <param name="entity">Persistent entity whose ObjectKey is to be created</param>
            <returns>ObjectKey instance representing the identity and version information of the <paramref name="entity"/> parameter</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException"><paramref name="entity"/> is not managed by this context</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns an object identified by the specified object key.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specifying it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context with the same database identity as specified by the  <paramref name="key"/> parameter, this method 
            checks the second level cache,if it is enabled, to see if the object is present there and returns it.
            If the object is still not found this method executes a query in an attempt to load the object from the database and returns it. 
            </para>
            <para> 
            This method raises an <see cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException"/> if no row with the specified identity is found.
            </para>
            <para>
            If the <paramref name="key"/> contains version information this method will attempt to return an entity that is exactly the same version as specified in the key, else
            an <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> is raised. The version information present in the key is compared against the version 
            information read from the database. This comparison is not performed on the database server.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            <seealso cref="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <returns>The persistent object found in the context or loaded from the database</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">When object with specified identity and version is not found.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">When object with specified identity is found but the version does not match.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)">
            <summary>
            Returns an object identified by the specified object key.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specify it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context with the same database identity as specified by the  <paramref name="key"/> parameter, this method 
            checks the second level cache,if it is enabled, to see if the object is present there and returns it.
            If the object is still not found this method executes a query in an attempt to load the object from the database and returns it. 
            </para>
            <para>
            If the <paramref name="key"/> contains version information this method will attempt to return an entity that is exactly the same version as specified in the key, else
            an <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> is raised. The version information present in the key is compared against the version 
            information read from the database. This comparison is not performed on the database server.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <para>
            Use the TryGetObjectByKey method to avoid handling the <see cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException"/> or the <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> 
            raised by GetObjectByKey when the object cannot be found.
            This method will raise a <see cref="T:System.ArgumentException"/> if the metadata in the key is incompatible with the type of the requested entity.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey(Telerik.OpenAccess.ObjectKey)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            <seealso cref="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <param name="entity">When this method returns contains the persistent object, found in the context or loaded from the database</param>
            <returns>true if the object was retrieved successfully.false if the object with the specified identity and version is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey``1(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns an object identified by the specified object key.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specifying it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context with the same database identity as specified by the  <paramref name="key"/> parameter, this method 
            checks the second level cache,if it is enabled, to see if the object is present there and returns it.
            If the object is still not found this method executes a query in an attempt to load the object from the database and returns it. 
            </para>
            <para> 
            This method raises an <see cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException"/> if no row with the specified identity is found.
            </para>
            <para>
            If the <paramref name="key"/> contains version information this method will attempt to return an entity that is exactly the same version as specified in the key, else
            an <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> is raised. The version information present in the key is compared against the version 
            information read from the database. This comparison is not performed on the database server.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            <seealso cref="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <typeparam name="T">The type of the expected object. If unknown use <see cref="T:System.Object"/></typeparam>
            <returns>The persistent object found in the context or loaded from the database</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">When object with specified identity and version is not found.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">When object with specified identity is found but the version does not match.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey``1(Telerik.OpenAccess.ObjectKey,``0@)">
            <summary>
            Returns an object identified by the specified object key.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specify it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context with the same database identity as specified by the  <paramref name="key"/> parameter, this method 
            checks the second level cache,if it is enabled, to see if the object is present there and returns it.
            If the object is still not found this method executes a query in an attempt to load the object from the database and returns it. 
            </para>
            <para>
            If the <paramref name="key"/> contains version information this method will attempt to return an entity that is exactly the same version as specified in the key, else
            an <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> is raised. The version information present in the key is compared against the version 
            information read from the database. This comparison is not performed on the database server.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <para>
            Use the TryGetObjectByKey method to avoid handling the <see cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException"/> or the <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> 
            raised by GetObjectByKey when the object cannot be found.
            This method will raise a <see cref="T:System.ArgumentException"/> if the metadata in the key is incompatible with the type of the requested entity.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectByKey(Telerik.OpenAccess.ObjectKey)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            <seealso cref="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <param name="entity">When this method returns contains the persistent object, found in the context or loaded from the database</param>
            <typeparam name="T">The type of the expected object. If unknown use <see cref="T:System.Object"/></typeparam>
            <returns>true if the object was retrieved successfully.false if the object with the specified identity and version is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.LookupObjectByKey``1(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns an object identified by the specified object key if available in the cache.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context cache.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specifying it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context null is returned.
            </para>
            <para>
            If the <paramref name="key"/> contains version information they are ignored.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <typeparam name="T">The type of the expected object. If unknown use <see cref="T:System.Object"/></typeparam>
            <returns>The persistent object found in the context</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.LookupObjectByKey(Telerik.OpenAccess.ObjectKey)">
            <summary>
            Returns an object identified by the specified object key if available in the cache.
            </summary>
            <remarks>
            <para>
            This method attempts to find an instance with the specified identity and version, in the context cache.
            </para>
            <para>
            The <paramref name="key"/> parameter can be obtained via a call to <see cref="M:Telerik.OpenAccess.ObjectKey.Create(System.Object)"/> or <see cref="M:Telerik.OpenAccess.ObjectKey.CreateWithVersion(System.Object)"/> or 
            can be constructed by the user by explicitly specifying it's properties.
            </para>
            <para>
            If the persistent object with the specified key is already loaded in the context, it's reference is returned.
            If there is no instance in the context null is returned.
            </para>
            <para>
            If the <paramref name="key"/> contains version information they are ignored.
            </para>
            <para>
             No change will be made to the state of the returned instance.
            </para>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObjectByKey(Telerik.OpenAccess.ObjectKey,System.Object@)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKeyWithVersion(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectKey"/>
            </remarks>
            <param name="key">The key of the object to be found</param>
            <returns>The persistent object found in the context</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Incompatible metadata specified in the <paramref name="key"/>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObjectsByKeys``1(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})">
            <summary>
            Gets the objects as specified in the keys in a lazy loading yet optimized manner.
            </summary>
            <typeparam name="T">The expected target type</typeparam>
            <param name="keys">Enumerable of ObjectKey, keys should be of the same persistent type and should not contain version information.</param>
            <returns>Lazy evaluated enumerable with the corresponding objects and extra information about missing objects</returns>
            <exception cref="T:System.ArgumentNullException">When keys is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">When keys contain version information</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When values in keys refer to more than one persistent type or keys describe type that is not compatible with the generic method argument <c>T</c></exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Collections.IEnumerable)">
            <summary>
            Marks the entities as to be deleted.
            </summary>
            <remarks>The entities will be deleted when the used transaction is committed to the database.</remarks>
            <param name="entities">The entities to be deleted from the database.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Object)">
            <summary>
            Marks the entity as to be deleted.
            </summary>
            <remarks>The entity will be deleted when the used transaction is committed to the database.</remarks>
            <param name="entity">The entity to be deleted from the database.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Add(System.Collections.IEnumerable)">
            <summary>
            Adds new entities to the context
            </summary>
            <remarks>The entities will be mark for insertion. If the used transaction is committed the entities will be inserted.</remarks>
            <param name="entities">Entities to be added.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Add(System.Object)">
            <summary>
            Adds a new entity to the context
            </summary>
            <remarks>The entity will be mark for insertion. If the used transaction is committed the entity will be inserted.</remarks>
            <param name="entity">Entity to be added.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.MakeDirty(System.Object,System.String)">
            <summary>
            Marks a field of an object from this context manually as 'dirty' and to be updated
            in the database context. Must be called before modifications occur.
            </summary>
            <remarks>
            <para>
            Change tracking is normally done automatically. That means, that
            any writing access to a field of a persistent object will mark the
            persistent object as dirty; this will cause the update of the values
            of the persistent object in the database.
            </para>
            Object fields marked as 'dirty'
            will be stored later during 
            </remarks>
            <param name="entity">The object that should 
            be marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
            <param name="fieldName">The field that should 
            be marked as dirty.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="entity"/> is not enhanced.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetLastConflicts">
            <summary>
            Returns the concurrency control conflicts of the last store operation.
            </summary>
            <returns>List of conflicts from last store operation.</returns>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges(Telerik.OpenAccess.ConcurrencyConflictsProcessingMode)"/>
            <seealso cref="T:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode"/>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetContext(System.Object)">
             <summary>
             Returns the OpenAccessContextBase instance responsible for the given persistence capable object.
             </summary>
             <remarks>
             This method determines the instance managing the passed object.
             </remarks>
             <example>
             It is recommended to use this method from a central place in your class hierarchy
             in order to simplify the code.
            <code>
             using Telerik.OpenAccess;
            
             public abstract MyBaseClass
             {
                 // Central place to obtain the managing context.
                 public OpenAccessContextBase OpenAccessContext
                 {
                     get
                     {
                         return OpenAccessContextBase.GetContext(this);
                     }
                 }
             }
            
            </code>
             </example>
             <returns>
             The managing context of the passed object or <c>null</c> when the object is not managed by 
             an OpenAccessContextBase.
             </returns>
             <param name="persistentObject">
             The persistence capable object whose context is to be returned.
             </param>
             <exception cref="T:System.ArgumentNullException">
             No <paramref name="persistentObject"/> has been given.
             </exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             Type of the <paramref name="persistentObject"/> is not declared 
             <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> or not enhanced.
             </exception>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
             <seealso cref="M:Telerik.OpenAccess.Database.GetContext(System.Object)"/>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetState(System.Object)">
            <summary>
            Returns the state of the persistent object.
            </summary>
            <param name="entity">The object the state should be returned for.</param>
            <returns>An enumeration representing the state of the persistent object.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Object is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetState(System.Object,System.String)">
            <summary>
            Returns the state of the named property or field from the persistent object.
            </summary>
            <param name="entity">The object holding the field or property with the respective name.</param>
            <param name="fieldName">The name of the field or property the state should be returned for.</param>
            <returns>An enumeration representing the state of the data hold by the named field or property.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Object is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity or field name passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetOriginalValue``1(System.Object,System.String)">
            <summary>
            Returns the original value of the named property of field from the persistent object.
            </summary>
            <remarks>
            <para>
            If a property or field in a persistent type is changed or marked as dirty, the original value might be of interest. 
            This method can be used to access the original value if it is available.
            </para>
            <para>
            Per default only the original values for types marked with concurrency mode <see cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/> are kept. 
            If all original values are of interest, the <see cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues">context.ContextProperties.MaintainOriginalValues</see> 
            property has to be set to true.
            </para>
            <para>
            To keep all original values in memory might have an memory overhead. If one field is made dirty, all fields
            of that respective type are stored in an extra object[].
            </para>
            <para>
            If the object is new, the default value of the respective property type is returned. If the property or field is clean, the clean value is returned.
            </para>
            </remarks>
            <typeparam name="T">The type of the expected return value. Object can be used for untyped access.</typeparam>
            <param name="entity">The object holding the field or property of interest.</param>
            <param name="propertyName">The name of the property or field of interest.</param>
            <returns>The old value if it was available and the property or field was dirty, the actual value otherwise.</returns>
            <seealso cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/>
            <seealso cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetState(System.Object,System.String)"/>
            <exception cref="T:System.ArgumentNullException">If one of the arguments is null or string.Empty</exception>
            <exception cref="T:System.InvalidOperationException">If the entity is not managed by this context.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">If the no property or field with the specified name can be found.</exception>
            <exception cref="T:System.NotSupportedException">If the original value is not available.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateDetachedCopy``1(``0)">
            <summary>
            Creates and returns a detached flat copy of the persistence capable object.
            </summary>
            <example>
            The following example retrieves a single employee object from the Northwind database and uses the CreateDetachedCopy method 
            to create a detached copies of the objects. The employeeCopies objects will not be tracked by Telerik Data Access and any changes
            made to it will not be persisted.
            <code>
                FetchStrategy fetchStrategy = new FetchStrategy();
                fetchStrategy.LoadWith&lt;Northwind.Employee&gt;(x =&gt; x.Orders);
                IEnumerable&lt;Northwind.Employee&gt; employees = context.GetAll&lt;Northwind.Employee&gt;().ToList();
                Northwind.Employee employeeCopies = context.CreateDetachedCopy&lt;Northwind.Employee&gt;(employees, fetchStrategy);        
            </code>
            </example>
            <typeparam name="T">The type of the persistence capable object.</typeparam>
            <param name="entity">The persistence capable object.</param>
            <returns>A copy of the persistence capable object that is detached.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateDetachedCopy``1(``0,System.String[])">
            <summary>
            Creates and returns a detached copy of the persistence capable object that includes the specified reference properties.
            </summary>
            <example>
            The following example retrieves a single employee object from the Northwind database and uses the CreateDetachedCopy method 
            to create a detached copy of the object. The employeeCopy object will not be tracked by Telerik Data Access and any changes
            made to it will not be persisted.
            <code>
                Northwind.Employee employee = context.GetAll&lt;Northwind.Employee&gt;().Single(x => x.Id == 1);
                Northwind.Employee employeeCopy = context.CreateDetachedCopy&lt;Northwind.Employee&gt;(employee, "Orders", "ReportsTo", "Territories");        
            </code>
            </example>
            <typeparam name="T">The type of the persistence capable object.</typeparam>
            <param name="entity">The persistence capable object.</param>
            <param name="referenceProperties">The reference properties to be included when creating the copy.</param>
            <returns>A copy of the persistence capable object that is detached.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.AttachCopy``1(``0)">
            <summary>
            Attaches a copy of an object graph to the context.
            </summary>
            <remarks>
            <para>
            A copy of the given object graph rooting in the passed entity instance is made into the this context.
            When a new, deleted or changed instance exists in the context for an object in the graph,
            the operation fails.
            </para>
            Concurrency Control checks will be done during SaveChanges.
            <para>
            It is not supported to attach object graphs that mix entities coming from different contexts, as no graph boundary 
            can reliably be made then. Only new (unmanaged) or detached instances can be passed.
            </para>
            </remarks>
            <typeparam name="T">The type of the persistence capable object.</typeparam>
            <param name="entity">The detached, persistence capable instance.</param>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.CreateDetachedCopy``1(``0)"/>
            <returns>The instance that is managed by the object context which is a copy of the passed <paramref name="entity"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Entity is not a persistence capable class instance.</exception>
            <exception cref="T:System.ArgumentNullException">Entity is not given.</exception>
            <exception cref="T:System.NotSupportedException">A (sub-)entity is actively managed by a another context.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CheckNotDisposed">
            <summary>
            Throws an exception if the context is already disposed.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Dispose(System.Boolean)">
            <summary>
            Overwrite to free additional resources
            </summary>
            <param name="disposing">If true dispose is executed, if false nothing is done.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetScope">
            <summary>
            Returns the underlying IObjectScope instance
            </summary>
            <remarks>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> is the internal API with basic functionality. Use with care.
            </remarks>
            <returns>Internal API entry point</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetDatabase">
            <summary>
            Returns the underlying Database instance
            </summary>
            <remarks>
            The <see cref="T:Telerik.OpenAccess.Database"/> is the internal API with basic functionality. Use with care.
            </remarks>
            <returns>Internal API entry point</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.OnDatabaseOpen(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Allows custom processing on a BackendConfiguration and/or MetadataContainer instances exactly prior to opening the database.
            </summary>
            <param name="backendConfiguration">BackendConfiguration instance.</param>
            <param name="metadataContainer">MetadataContainer instance.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.OnDatabaseOpen(Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Allows custom processing on a BackendConfiguration and/or MetadataContainer instances exactly prior to opening the database.
            </summary>
            <param name="backendConfiguration">BackendConfiguration instance.</param>
            <param name="currentMetadataContainer">The MetadataContainer instance of the current context.</param>
            <param name="aggregatedMetadataContainer">The MetadataContainer instance of the current Database object. The value is null unless a context with different metadata and the same connection string has been created previously.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.OnReplacingMetadata(Telerik.OpenAccess.SchemaUpdateArgs)">
            <summary>
            Allows custom processing of schema migration if a metadata aggregation is caused because of using two different metadata containers with the same connection string or cache key.
            </summary>
            <remarks>
            Override the method if you need to perform schema migration operations if an internal metadata aggregation is required.
            </remarks>
            <param name="args">Contains all necessary information and functionality to initiate schema migration tasks.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetIncrementalGuid">
            <summary>
            Returns a client side generated System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <returns>An incremental Guid value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetIncrementalGuid(System.Int32)">
            <summary>
            Returns a 'client side generated' System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <param name="grabSize">The number of incremental Guids that are allocated</param>
            <returns>An incremental Guid value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetIncrementalGuids(System.Int32)">
            <summary>
            Returns 'client side generated' System.Guid values that are greater than any Guid previously generated for the connected database.
            </summary>
            <param name="count">The number of incremental Guid values that should be .</param>
            <returns>A collection of Guids ordered in an incremental order.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#ResetIncrementalGuid">
            <summary>
            Resets the current unique identifier value to random value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetIncrementalGuidRange">
            <summary>
            Gets the range of the last generated incremental Guid value.
            </summary>
            <returns>The range (second most significant byte).</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#SetIncrementalGuidRange(System.Byte)">
            <summary>
            Sets the range of the next generated incremental Guid value.
            </summary>
            <param name="range">The new range (second most significant byte).</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetUniqueId(Telerik.OpenAccess.UniqueIdGenerator)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <returns>Unique integer value for a specified sequence.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IKeyGenerator#GetUniqueIds(Telerik.OpenAccess.UniqueIdGenerator,System.Int32)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <param name="size">Specifies the number of unique id keys that should be fetched from the database.</param>
            <returns>An IEnumerator instance which enumerates values in the range of the grab size.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.DisposeDatabase">
            <summary>
            Disposes the underlying database structure.
            </summary>
            <remarks>
            The database instance is shared by all context instances that use the same 
            connection string in their constructors. This call cleans up as much as possible, all contexts 
            are not longer usable.
            <para>
            DisposeDatabase is meant to cleanup all resources when the connection to a certain
            database is not longer needed. The call also ensures that all logging information
            is written to the log file. In a web application, this call should be placed in the
            'Application_End' call of 'Global.asax'.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.DisposeDatabase(System.String)">
            <summary>
            Disposes the underlying database structure.
            </summary>
            <remarks>
            The database instance is shared by all context instances that use the same 
            connection string in their constructors. This call cleans up as much as possible, all contexts 
            are not longer usable.
            <para>
            DisposeDatabase is meant to cleanup all resources when the connection to a certain
            database is not longer needed. The call also ensures that all logging information
            is written to the log file. In a web application, this call should be placed in the
            'Application_End' call of 'Global.asax'.
            </para>
            <para>
            The reason string is written to the log if logging is enabled.
            </para>
            </remarks>
            <param name="reason">The reason why the database is closed.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetIncrementalGuid">
            <summary>
            Returns a client side generated System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <returns>An incremental Guid value.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetIncrementalGuid(System.Int32)">
            <summary>
            Returns a 'client side generated' System.Guid value that is greater than any Guid previously generated for the connected database.
            </summary>
            <param name="grabSize">The number of incremental Guids that are allocated</param>
            <returns>An incremental Guid value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetIncrementalGuids(System.Int32)">
            <summary>
            Returns 'client side generated' System.Guid values that are greater than any Guid previously generated for the connected database.
            </summary>
            <param name="count">The number of incremental Guid values that should be .</param>
            <returns>A collection of Guids ordered in an incremental order.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ResetIncrementalGuid">
            <summary>
            Resets the current unique identifier value to random value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetUniqueId(Telerik.OpenAccess.UniqueIdGenerator)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <returns>Unique integer value for a specified sequence.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetUniqueIds(Telerik.OpenAccess.UniqueIdGenerator,System.Int32)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="generator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <param name="size">Specifies the number of unique id keys that should be fetched from the database.</param>
            <returns>An IEnumerator instance which enumerates values in the range of the grab size.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetMemberNames(System.Object,Telerik.OpenAccess.ObjectState)">
            <summary>
            Returns a collection of members’ names for a given instance based on the provided member state.
            </summary>
            <param name="instance">The instance.</param>
            <param name="state">The member state.</param>
            <returns>The collection which contains the member names.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetPersistentType(System.String)">
            <summary>
            Gets the persistent type that corresponds to the provided PersistenceCapable full type name.
            The PersistenceCapable type should be enhanced and present in the current context metadata.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">ArgumentOutOfRangeException is thrown if the specified type name cannot be found in the current context metadata.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException is throw if the fullTypeName is NULL or empty</exception>
            <param name="fullTypeName">Full type name of the persistent capable type that we are looking for.</param>
            <returns>The persistent type of the PersistenceCapable type defined by the full type name.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.HasChanges">
            <summary>
            Returns true if the context contains changes.
            </summary>
            <remarks>
            Changes can be new objects managed by the context, changed objects or deleted objects. 
            <para>
            The HasChanges property returns a 'false' if <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.FlushChanges(System.Boolean)"/> with 'true' has been called.
            </para>
            </remarks>
            <value>True if the context contains changes.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.PersistenceState">
            <summary>
            Gets helper instance to obtain the state information for persistent objects.
            </summary>
            <value>Instance to get state information from.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize any manual operations with the rest of the context operations.  
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Metadata">
            <summary>
            Gets the metadata tree for this context.
            </summary>
            <returns>Returns the metadata tree for the actual database connection.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Log">
            <summary>
            Specifies the destination to write the SQL query or command.
            </summary>
            <remarks>
            If no log level is defined in the backend configuration the level is set to 'normal'. 
            If the parameters should be printed as well the log level has to set to 'all' in the backend configuration.
            If additional information is required, a trace listener has to be implemented.
            </remarks>
            <value>TextWriter instance where this context writes events to.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.ContextOptions">
            <summary>Gets the Telerik.OpenAccess.OpenAccessContextOptions instance
            that contains options that affect the behavior of the Telerik.OpenAccess.OpenAccessContextBase.
            </summary>
            <returns>The <see cref="T:Telerik.OpenAccess.OpenAccessContextOptions"/> instance
            that contains options that affect the behavior of the <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/>.
            </returns>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IOpenAccessContextOptions#EnableDataSynchronization">
            <summary>
            Controls whether the context behaves in data synchronization mode during Insert and Update operations. 
            If the OpenAccessContextBase is in this mode, OpenAccess will skip calculation of the DateTime and version field values.
            </summary>
            <remarks>
            This property should be set to 'True' only if the context instance is used to synchronize the data between two databases. In such a scenario it is desired that the 
            auto calculated fields such as the 'version' field are not recalculated since an exact copy of the data should be inserted in the target database.
            
            <note>
            Do not set this property to 'True' for a context that is used for normal operations. If set, it could lead to undesired database exceptions due to the 
            default value of the field being inserted or updated.
            </note>
            </remarks>
            /// <returns>A <see cref="T:System.Boolean"/> value that is true when data synchronization mode
            is enabled; otherwise false.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IOpenAccessContextOptions#MaintainOriginalValues">
            <summary>
            Controls whether the original values are loaded and kept when a field is changed.
            </summary>
            <remarks>
            MaintainOriginalValues has to set to true if the original values have to be available always. The memory consumption might increase per persistent object.
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetOriginalValue``1(System.Object,System.String)"/>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IOpenAccessContextOptions#RefreshObjectsAfterSaveChanges">
             <summary>
             Controls whether all loaded objects are refreshed in a new transaction.
             </summary>
             <remarks>
             If SaveChanges() or ClearChanges() is called, the data in the loaded objects managed by the context might no longer reflect the database content.
             Other processes or clients might have modified data in the database as well. To make the optimistic concurrency control working better, Telerik Data Access
             reloads all data in a subsequent transaction.
            <para>
            The default is <c>true</c>, and this setting should only be changed with
            great care, as setting it to <c>false</c> might result in long-living
            stale objects.
            </para>
            <para>
            Note, that the default value of <c>true</c> does not guarantee non-stale
            objects when using optimistic transactions. It does only guarantee, that
            objects used in previous transactions are refreshed on the first read access
            in subsequent transactions of the same context.
            </para>		
             </remarks>
             <value>True if all objects should be refreshed in subsequent transactions, false otherwise. True is the default.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Telerik#OpenAccess#IOpenAccessContextOptions#IsolationLevel">
            <summary>
            Controls the isolation level of this contexts resources.
            </summary>
            <remarks>
            When an isolation level is specified, the context will need to use transactions for read access.
            <para>
            When <c>null</c> is specified, the default isolation level (ReadCommitted) is used and transactions around read requests might be omitted (depending on the
            <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReadWithoutTransactions"/> setting).
            </para>
            <para>
            Not all database systems support all possible isolation levels, therefore only Snapshot, ReadCommitted and ReadUncommitted are currently supported.
            </para>
            <para>
            The second level cache will not be used or populated when any value except <c>null</c> is specified for this context.
            </para>
            </remarks>
            <value>Isolation Level (Default: null)</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong isolation level, only Snapshot, ReadCommitted and ReadUncommitted allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Isolation level cannot be changed because a connection is active.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Name">
            <summary>
            Gets or sets an application specific name that can be used for correlation.
            </summary>
            <remarks>
            Giving the context a name in an application specific manner allows for easy correlation of the events
            obtainable from the <see cref="T:Telerik.OpenAccess.Diagnostics.History"/> class.
            </remarks>
            <value>Application specific string or <c>null</c></value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.ReadOnly">
            <summary>
            Controls if the context prevents changes to any data it is managing.
            </summary>
            <remarks>
            In a read only context, all functionality that potentially changes data is prohibited.
            <para>
            The read only setting can be changed during the complete lifetime of the context. It can be set to false
            at any time, but to set it to true, the context must be clean, not enlisted in a distributed transaction
            and no context bound connection should be used directly.
            </para>
            </remarks>
            <value>Controls if the context prevents changes to any data it is managing.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Connection">
            <summary>
            Gets the connection used by the Telerik Data Access context.
            </summary>
            <remarks>
            Use this property to obtain the connection that is used by the context to save its changes. The returned connection has a transaction started on it. All commands
            executed on this connection are automatically executed within this transaction. In order to commit or rollback the statements executed via the commands, you need to call the 
            <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges"/> method. Doing so will commit/rollback the actions performed by the statements as well as the changes 
            in the context itself.
            The connection will be reserved for you until it is disposed - only then it will be returned to the connection pool. 
            In order to avoid connection pool depletion, please make sure to dispose or wrap in <code>using</code> block the returned connection.
            <para>
            The returned connection and the transaction started on it are managed by the context i.e. committing and rolling back the transaction, opening and closing of the 
            store connection are performed by the context. In case the context is disposed before the connection, it is the user's responsibility to call 
            <see cref="M:Telerik.OpenAccess.Data.Common.OAConnection.Dispose(System.Boolean)"/> in order to ensure that the underlying store connection is closed.
            </para>
            <para>
            Obtaining the connection affects the pooling behavior of the connection.
            </para>
            </remarks>
            <value>Connection that can be used to perform ADO operations</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.CacheKey">
            <summary>
            Override this property in your context to use custom logic to calculate the key used to cache the model metadata.
            This property allows you to have a single context type that can be used with different models in the same AppDomain, 
            or multiple context types that use the same model.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Cache">
            <summary>
            Returns the level one cache directly bound to this context.
            </summary>
            <remarks>
            The context caches all new, dirty and deleted objects since the last
            SaveChanges or ClearChanges call. 
            <para>
            All clean data is only held by a special
            structure to ensure the uniqueness of all entities in one context. The type of references from this 
            structure can be controlled by the <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CacheReferenceType"/>.
            </para>
            </remarks>
            <value>The level one cache directly bound to this context.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.LevelTwoCache">
            <summary>
            Returns the level two cache bound to all contexts using the same connection string.
            </summary>
            <remarks>
            The level two cache is a common cache used by all context instances that are created
            with the same connecting string. The level two cache is a read through cache that caches
            all read data based on the configuration.
            </remarks>
            <value>The level two cache bound to all contexts using the same connection string.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Events">
            <summary>
            Gets the associated change tracking instance.
            </summary>
            <remarks>
            There is exactly one <see cref="T:Telerik.OpenAccess.IContextEvents"/> instance associated 
            with each <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance. 
            </remarks>
            <value>The associated tracking instance.</value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessContextBase.KeyGenerators">
            <summary>
            Exposes functionality of various Telerik Data Access key generators.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ContextChanges">
            <summary>
            Offers all objects that will be inserted, deleted or updated during the next commit.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ContextChanges.GetDeletes``1">
            <summary>
            Returns a list of deleted objects managed by the context. The changes are not yet committed to the database.
            </summary>
            <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
            <returns>Filtered list by type T and status deleted.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ContextChanges.GetInserts``1">
            <summary>
            Returns a list of new objects managed by the context. The changes are not yet committed to the database.
            </summary>
            <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
            <returns>Filtered list by type T and status new.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ContextChanges.GetUpdates``1">
            <summary>
            Returns a list of dirty objects managed by the context. The changes are not yet committed to the database.
            </summary>
            <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
            <returns>Filtered list by type T and status dirty.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RefreshMode">
            <summary>
            Defines the refresh action in detail.
            </summary>
            <remarks>
            <see cref="F:Telerik.OpenAccess.RefreshMode.PreserveChanges"/> keeps the actual changes in the object but re-reads all clean data. The object will stay dirty.
            <see cref="F:Telerik.OpenAccess.RefreshMode.OverwriteChangesFromStore"/> reads all data and overwrites the dirty fields. The object will be clean.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RefreshMode.PreserveChanges">
            <summary>
            Keeps the actual changes in the object but re-reads all clean data. The object will stay dirty.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RefreshMode.OverwriteChangesFromStore">
            <summary>
            Reads all data and overwrites the dirty fields. The object will be clean, the changes are lost.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode">
            <summary>
            Defines the granularity of errors in failing commits
            </summary>
            <seealso cref="F:OpenAccessContext.SaveChanges"/>
        </member>
        <member name="F:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode.StopOnFirst">
            <summary>
            Stops processing after the first error occurs.
            </summary>
            <remarks>
            If the commit should be fast this mode has to be used. 
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode.AggregateAll">
            <summary>
            Executes all insert, update and delete statements regardless of an error.
            </summary>
            <remarks>
            If all error during commit should be analyses this mode has to be used. Nothing is stored but to many sql statements are executed.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.ConcurrencyConflict">
            <summary>
            Describes one concurrency control conflict during commit.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ConcurrencyConflict.FailingObject">
            <summary>
            The key of the object that fails the store operation.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.ConcurrencyConflict.Reason">
            <summary>
            The reason for the failure.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IOID">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IOID.getLongPrimaryKey">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SqlParameter">
            <summary>
            Parameter used for execution of parametrized SQL queries.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SqlParameter.#ctor(System.String,Telerik.OpenAccess.OpenAccessType)">
            <summary>
            Initializes a new instance of the SqlParameter class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SqlParameter.#ctor(System.String,Telerik.OpenAccess.OpenAccessType,Telerik.OpenAccess.ParameterMode)">
            <summary>
            Initializes a new instance of the SqlParameter class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="mode">The mode of the parameter.</param>
        </member>
        <member name="P:Telerik.OpenAccess.SqlParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SqlParameter.Type">
            <summary>
            The OpenAccess type of the parameter.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SqlParameter.Mode">
            <summary>
            The mode of the parameter.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IContextData">
            <summary>
            Provides data needed for domain context and domain service generation.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IContextData.GetQueryableTypes">
            <summary>
            Gets the list of types exposed as endpoints
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IContextData.GetQueryableClassNames">
            <summary>
            Gets the list of endpoint names
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IContextData.GetEditableEndPoints">
            <summary>
            Gets the list of editable endpoint names
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IContextData.GetRequiredNamespaces">
            <summary>
            Gets the list of namespaces required by the context
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.ContextName">
            <summary>
            Gets or sets the name of the context
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.RlinqFilePath">
            <summary>
            Gets or sets the full path of the rlinq file which contains the domain model
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.AssemblyName">
            <summary>
            Gets or sets the name of the assembly which contains the rlinq file
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.ConnectionStringName">
            <summary>
            Gets or sets the connection string name used by the context
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.SelectedContextTypeName">
            <summary>
            Gets the type name of the OpenAccessContext implementation
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.Util.IContextData.IsClientAccessEnabled">
            <summary>
            Gets or sets a value indicating whether client access is enabled for the domain service
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.DefaultFetchGroupAttribute">
            <summary>
            Specifies, whether this field is member of the so-called default
            fetch group. The default fetch group is the set of fields that
            are retrieved, if any field of the object is accessed the very first
            time.
            </summary>
            <remarks>
            <para>
            Using this attribute is only needed for performance fine-tuning and
            if the default behavior is not sufficient.
            </para>
            <para>
            For example fields of type <c>System.Collection.ArrayList</c> are by default
            not part of the default fetch group, because retrieving the values
            might need an additional database access. So an <c>ArrayList</c> member is not
            fetched until it is actually accessed. However this happens absolut transparently
            regardless whether it is in the default fetch group or not.
            </para>
            <para>
            By default, fields of the following types are in the default fetch group:
            <list type="bullet">
            <item>all types derived from <c>System.ValueType</c>, e.g. <c>System.Int32</c></item>
            <item><c>System.String</c></item>	
            </list>
            By default, fields of the following types are not in the default fetch group:
            <list type="bullet">
            <item>all supported built-in types that implement <c>System.Collections.ICollection</c></item>	
            <item>references to persistent objects or persistent interfaces</item>	
            </list>	
            </para>
            <para>
            Requires, that the referenced class and the referencing class are
            marked as <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>.
            </para>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>	
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor">
            <summary>
            The field being tagged is member of the default fetch group.
            </summary>
            <remarks>
            Using this attribute is only needed for performance fine-tuning and
            if the default behavior is not sufficient.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor(System.Boolean)">
            <summary>
            Controls whether the tagged field is a member of the default 
            fetch group.
            </summary>
            <remarks>
            Using this attribute is only needed for performance fine-tuning and
            if the default behavior is not sufficient.
            </remarks>
            <param name="dfg">If <c>true</c> the member is included in the
            default fetch group, otherwise not.</param>
        </member>
        <member name="P:Telerik.OpenAccess.DefaultFetchGroupAttribute.IsIncluded">
            <summary>
            Indicates whether the tagged member is included in the default 
            fetch group.
            </summary>
            <value><c>true</c> if the member is included</value>
            <remarks>This property can be used to determine if the
            member is in the default fetch group.</remarks>
        </member>
        <member name="T:Telerik.OpenAccess.PersistentAttribute">
            <summary>
            Declares a class to be persistence-capable. 
            This attribute is not inherited and must be specified for each 
            class in a class hierarchy
            individually. Only field values (no code) of persistent classes 
            within a class
            hierarchy are stored in the database.
            </summary>
            <remarks>
            <para>
            This attribute marks an application class as to be registered 
            in the database schema. The attributed class becomes 
            persistence-capable (implementing an additional interface) and 
            is able to store/retrieve instances. 
            Instances of a persistence-capable class can then be be 
            stored in a database as persistent objects. 
            </para>
            <para>
            Per default, all fields of an instance of a persistence-capable 
            class will be 
            stored in the database. If this needs to be avoided, the
            <see cref="T:Telerik.OpenAccess.TransientAttribute"/> can be used to mark a field
            as transient (not to be stored in the database).
            </para>
            <para>
            This attribute is not inherited and must be used on every class in
            a class hierarchy.
            </para>
            <para>
            This attribute will be used and processed by the Telerik.OpenAccess .NET 
            enhancer and attributed classes will be persistence-capable only 
            if the enhancer was run after compilation of the class.
            </para>
            <seealso cref="T:Telerik.OpenAccess.TransientAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.SerializeToBlobAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.DependAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.PersistentAttribute.#ctor">
            <summary>
            Declares a class to be persistence-capable; instances of such
            a class can be made persistent in a database.
            </summary>
            <remarks>
            The [Persistent] attribute will be used by the Telerik.OpenAccess .NET 
            enhancer to capture the database schema and to add
            persistence enabling methods and fields.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.PersistentAttribute.GetAliasSet">
            <summary>
            Indicates whether the Alias property was set.
            </summary>
            <value><c>true</c> if the Alias property was given 
            a value.</value>
            <remarks>
            This property can be used to determine if the application
            specified the existence of an alias.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.Identity">
            <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            </summary>
            <remarks>
            <para>
            From an object-oriented perspective, the identity of an object 
            should not rely
            on its values. This means that, internal identity should be preferred.
            Single or multiple field identity on the other hand is particularly useful
            when working
            with legacy databases (i.e., the relational schema already exists.).
            </para>
            <para>
            There are certain restrictions for the single field identity type.
            If certain fields should form the identity of a type, the single field
            identity type must consist of fields having the same name and type.
            Currently only fields of type <code>System.Int16</code>, 
            <code>System.Int32</code>, <code>System.Int64</code>, 
            <code>System.Single</code>,
             and <code>System.String</code> 
            are supported for the id fields.
            </para>
            <para>
            When multiple field identity is used within an inheritance hierarchy, 
            all
            classes of that hierarchy must share the same multiple field identity 
            type.
            Furthermore the fields to be used must be declared in the 
            least-derived
            class of that hierarchy.
            </para>
            </remarks>
            <value>
            If set to a particular <code>System.Type</code> and not 
            <code>null</code>
            then single field identity is used, otherwise internal identity 
            is used.
            Defaults to <code>null</code>, meaning internal identity.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentity">
            <summary>
            ApplicationIdentity is obsolete, please use Identity instead.
            </summary>
            <value>
            The identifying type for this persistent class.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityField">
            <summary>
            Determines the field used for single field identity.
            </summary>
            <remarks>
            <para>
            From an object-oriented perspective, the identity of an object 
            should not rely
            on its values. This means internal identity should be preferred.
            Single or multiple field identity on the other hand is particularly useful
            when working
            with legacy databases (i.e., the relational schema already exists.).
            </para>
            <para>
            When setting this property to the name of a field of the class
            marked with the [Persistent] attribute, the named field is treated
            as the holder of the primary key.
            </para>
            <para>
            There are certain restrictions on the type of the named field.
            Currently only fields of type <code>System.SByte</code>,
            <code>System.Int16</code>, 
            <code>System.Int32</code>, <code>System.Int64</code>, 
            <code>System.Guid</code>, 
            <code>System.Char</code> and <code>System.String</code> 
            are supported for single field identity fields.
            </para>
            <para>
            When single field identity is used within an inheritance hierarchy, 
            all
            classes of that hierarchy must share the same single field identity 
            type.
            Furthermore the fields to be used must be declared in the 
            least-derived class of that hierarchy.
            </para>
            <para>
            It is a logical error to specify both <see cref="P:Telerik.OpenAccess.PersistentAttribute.IdentityField"/>
            and <see cref="P:Telerik.OpenAccess.PersistentAttribute.Identity"/> / <see cref="P:Telerik.OpenAccess.PersistentAttribute.IdentityClassName"/>.
            </para>
            </remarks>
            <value>
            The name of a field to hold the identity (primary key).
            Defaults to <code>null</code>, meaning internal identity should be used.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.VersionField">
            <summary>
            Determines the field used for optimistic concurrency control.
            </summary>
            <remarks>
            <para>
            When setting this property to the name of a field of the class
            marked with the [Persistent] attribute, the named field is treated
            as the holder the version information.
            </para>
            <para>
            There are certain restrictions on the type of the named field.
            Currently only fields of type <code>System.SByte</code>,
            <code>System.Int16</code>, 
            <code>System.Int32</code> and <code>System.DateTime</code>
            are supported for versioning fields.
            </para>
            <para>
            When version field is set within an inheritance hierarchy, 
            all
            classes of that hierarchy share the same version field setting.
            Furthermore the fields to be used must be declared in the 
            least-derived class of that hierarchy.
            </para>
            </remarks>
            <value>
            The name of a field to hold the version information.
            Defaults to <code>null</code>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityClassName">
            <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            Only intended for situations,
            where no type, but a string can be specified. (e.g. J#)
            </summary>
            <value>
            If set to the name of a particular <code>System.Type</code> 
            and not <code>null</code>
            then single field identity is used, otherwise internal identity is used.
            </value>		
            <remarks>
             See <see cref="P:Telerik.OpenAccess.PersistentAttribute.Identity"/>.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentityClassName">
            <summary>
            ApplicationIdentityClassName is obsolete, please use IdentityClassName instead.
            </summary>
            <value>
            The name of the identifying type for this persistent class.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.Alias">
            <summary>
            Controls the alias name for the attributed class. 
            Useful for OQL-Queries to abbreviate long class names.
            </summary>
            <remarks>
            The specified name will be available from the 
            database schema. If no alias name was given, Telerik.OpenAccess .NET uses
            the name of the attributed class as alias name.
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)"/>
            </remarks>
            <value>
            If an alias name was specified, its value will be returned here.
            Default is <c>null</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistentAttribute.UseCascadeDelete">
            <summary>
            Controls the cascade delete behavior for the current class and all classes deriving from it 
            </summary>
            <remarks>
            The options applies in case of Vertical Inheritance and SplitTables
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.TransientAttribute">
            <summary>
            Declares a field of a persistence-capable class to be transient,
            and its value will not be stored or maintained by 
            the database.
            </summary>
            <remarks>
            This attribute can only be used on a field of a class marked with
            the <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> attribute. 
            The field will then not 
            be treated as part of the schema of the persistence-capable 
            class and the
            values it contains are not stored in the 
            <see cref="T:Telerik.OpenAccess.Database">database</see>.
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.SerializeToBlobAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.TransientAttribute.#ctor">
            <summary>
            Declares a field of a persistence-capable class to be transient.
            </summary>
            <remarks>
            Transient fields of a persistence-capable class will not be
            written to the database / loaded from the database.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.SerializeToBlobAttribute">
            <summary>
            Declares a field of a persistence-capable class to be serialized 
            and stored as a binary large object (Blob) in the database.
            </summary>
            <remarks>
            Serialized values are not interpreted by the <see cref="T:Telerik.OpenAccess.Database">
            database</see>. Therefore 
            <see cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">queries</see>
            cannot be
            executed on them and <see cref="T:Telerik.OpenAccess.IndexAttribute">indexes</see> cannot
            be defined for them.
            <para>
            A <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">BinaryFormatter</see> is used 
            to read and write objects from / to blobs.
            </para>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.TransientAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.SerializeToBlobAttribute.#ctor">
            <summary>
            Declares a field member to be serialized and stored as a
            uninterpreted Blob.
            </summary>
            <remarks>
            Database operations like queries will not be possible
            on serialized members.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.DependAttribute">
            <summary>
            Declares a referenced object to be dependent on the referencing object.
            </summary>
            <remarks>
            This can be used to mark a referenced object as subordinate of
            another (this) object.
            <para>
            Requires, that the referenced class and the referencing class are
            marked as <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>.
            </para>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.DependAttribute.#ctor">
            <summary>
            Declares a field member object as contingent upon the 
            referencing object.
            </summary>
            <remarks>
            Using this attribute might be useful during removal of objects
            as dependend objects might need to be removed too.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.ItemTypeAttribute">
            <summary>
             Specifies the item type for 
             a Collection field or the key / value types 
             for a IDictionary field of a persistence-capable class.
            </summary>
            <remarks>
            <para>
            Requires, that the enclosing class is
            marked as <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>.
            </para>
            <para>
            Is also used when designing Forms in Visual Studio .NET to
            determine the item type of collection-valued properties
            with the following algorithm:
            <list type="number">
            <item>if applied directly to the property this attribute determines the item type 
            of the property directly</item>
            <item>else if the class has a field that bears exactly the same name as the property 
            except that the first character is lower-case and this field has the ItemType 
            attribute applied, then this determines the item type of the property</item>
            <item>else if the class has a field that bears an equal name (compared
            case-insensitive) as the property except that an underscore is prepended, then this
            determines the item type of the property
            </item>
            <item>else <see cref="T:System.Object"/> is assumed as item type for the property</item>
            </list>
            </para>
            <para>
            If applied to a field, then <c>System.Object</c> is not a supported item type
            for relational database backends.
            </para>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.DependAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type)">
            <summary>
            Declares the item type for elements of a Collection.
            </summary>
            <remarks>Declaring the item type will give the database more
            information about the structure of an object network.</remarks>
            <param name="typeOfElements">The type of the elements.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String)">
            <summary>
            Declares the item type for elements of a Collection.
            </summary>
            <remarks>Declaring the item type will give the database more
            information about the structure of an object network.</remarks>
            <param name="typeOfElements">The type of the elements.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
            <remarks>Declaring the key and value types will give the 
            database more
            information about the structure of an object network.</remarks>
            <param name="typeOfKey">The type of the keys.</param>
            <param name="typeOfValue">The type of the values.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
            <remarks>Declaring the key and value types will give the 
            database more
            information about the structure of an object network.</remarks>
            <param name="typeOfKey">The type of the keys.</param>
            <param name="typeOfValue">The type of the values.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyType">
            <summary>
            Gets the key type (IDictionary).
            </summary>
            <value>The specified type of the keys. Default is <c>null</c>. 
            </value>
            <remarks>
            The type returned will be the type specified as the key type
            of the dictionary.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueType">
            <summary>
            Gets the value type (IDictionary).
            </summary>
            <value>The specified type of the values. Default is <c>null</c>.
            </value>
            <remarks>
            The type returned will be the type specified as the value type
            of the dictionary.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemType">
            <summary>
            Gets the item type (Collection).
            </summary>
            <value>The specified type of the items. Default is <c>null</c>.
            </value>
            <remarks>
            The type returned will be the type specified as the item type
            of the collection.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemTypeSet">
            <summary>
            Indicates whether the item type has been set.
            </summary>
            <value><c>true</c> if the item type has been set. 
            Default is <c>false</c>.</value>
            <remarks>
            This property will be <c>false</c> unless the
            <see cref="P:Telerik.OpenAccess.ItemTypeAttribute.ItemType"/> is specified.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyTypeSet">
            <summary>
            Indicates if the key type has been set.
            </summary>
            <value>
             <c>true</c> if the key type has been set.
             Default is <c>false</c>.
            </value>
            <remarks>
            This property will be <c>false</c> unless the
            <see cref="P:Telerik.OpenAccess.ItemTypeAttribute.KeyType"/> is specified.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueTypeSet">
            <summary>
            Indicates if the value type has been set.
            </summary>
            <value>
            <c>true</c> if the value type has been set.
            Default is <c>false</c>.
            </value>
            <remarks>
            This property will be <c>false</c> unless the
            <see cref="P:Telerik.OpenAccess.ItemTypeAttribute.ValueType"/> is specified.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IndexAttribute">
            <summary>
            Indexes are defined in the XML metadata, please see
            the programmer's guide for more information (obsolete).
            </summary>
            <remarks>
            <para>
            Indexes are defined in the XML metadata, please see the programmer's guide for more information.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines a simple index for a member of a persistence-capable class.
            </summary>
            <remarks>
             <para>
             For a description of the additional properties which can be
             given in the <c>memberDescription</c> parameter see
             the remarks section of <see cref="T:Telerik.OpenAccess.IndexAttribute"/>.
             </para>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
            <example>
            <c>[Index("nameIndex","firstname[32],ASCENDING")]</c>
            </example>
            <param name="indexName">The name of the index.</param>
            <param name="memberDescription">The name and properties of the 
            member to be included in this index. 
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Defines a compound index for two members of a 
            persistence-capable class.
            </summary>
            <remarks>
            The order of the field names is important. 
             <para>
             For a description of the additional properties which can be
             given in the <c>memberDescription</c> parameter see 
             the remarks section of <see cref="T:Telerik.OpenAccess.IndexAttribute"/>.
             </para>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
            <param name="indexName">The name of the index.</param>
            <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
            <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
            <example>
            <c>[Index("namesIX","lastname[32]","firstname[32]")]</c>
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Defines a compound index for three members of a 
            persistence-capable class.
            </summary>
            <example>
            <c>[Index("namesBirthdayIX","lastname[32]","firstname[32]",birthday)]</c>
            </example>
            <param name="indexName">The name of the index.</param>
            <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
            <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
            <param name="memberDescription3">The name and properties of the 
            third member to be included in this index. 
            </param>
            <remarks>
            <para>
            The order of the field names is important. 
            </para>
             <para>
             For a description of the additional properties which can be
             given in the <c>memberDescription</c> parameter see 
             the remarks section of <see cref="T:Telerik.OpenAccess.IndexAttribute"/>.
             </para>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String[])">
            <summary>
            Defines an index for a persistence-capable class.
            </summary>
            <example>
            <c>[Index("namesIX","lastname[32]","firstname[32],ASCENDING")]</c>
            </example>
            <param name="indexName">The name of the index.</param>
            <param name="memberDescriptions">The name and properties of the 
            members to be included in this index. The order of the field 
            names is important.
            </param>
            <remarks>
            <para>
            The order of the field names is important. 
            </para>
             <para>
             For a description of the additional properties which can be
             given in the <c>memberDescription</c> parameter see 
             the remarks section of <see cref="T:Telerik.OpenAccess.IndexAttribute"/>.
             </para>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.Name">
            <summary>
            Gets the name of the index.
            </summary>
            <remarks>
            <para>
            Names must obey length limitations of the backend used.
            </para>
            </remarks>
            <value>The name of the index as specified.</value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.FieldNames">
            <summary>
            Gets the field names used by the index.
            </summary>
            <value>
            The names of the field components of the index.
            </value>
            <remarks>
            The names are given in order of their appearance in the
            attribute constructor.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.SignificanceSet">
            <summary>
            Indicates whether a user supplied significance is used or not.
            </summary>
            <remarks>
            The returned array contains elements corresponding to the 
            indexed fields.
            </remarks>
            <value>
            <c>true</c> if the index field definition is using a 
            user-supplied significance.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.DescendingSet">
            <summary>
            Indicates whether a user supplied sort order is used or not.
            </summary>
            <remarks>
            The returned array contains elements corresponding to the 
            indexed fields.
            </remarks>
            <value>
            <c>true</c> if the index field definition is using a user-supplied 
            sort order.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.Significance">
            <summary>
            Gets the significance of the corresponding field in the index.
            </summary>
            <remarks>
            The returned array contains elements corresponding to the 
            indexed fields.
            </remarks>
            <value>
            The significance of the associated index field.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.Descending">
            <summary>
            Indicates whether the corresponding index field uses 
            descending sort order or not.
            </summary>
            <remarks>
            The returned array contains elements corresponding to the 
            indexed fields.
            </remarks>
            <value>
            <c>true</c> if the corresponding field is indexed using 
            descending sort order.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.Unique">
            <summary>
            Controls if the index contains only unique values or not (default).
            </summary>
            <remarks>
            An unique index will not allow duplicate index keys.
            </remarks>
            <value>
            <c>true</c> if the index is a unique index. Default is <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.Fulltext">
            <summary>
            Controls if the index is a fulltext index or not (default).
            </summary>
            <remarks>
            Fulltext indexing can be done by using the Verity Fulltext Search
            Engine.
            </remarks>
            <value>
            <c>true</c> if the index is a fulltext index. Default is<c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.UniqueSet">
            <summary>
            Indicates whether the index definition is using a user supplied
            uniqueness setting.
            </summary>
            <value>
            <c>true</c> if the index definition is using user supplied setting.
            </value>
            <remarks>
            This property will be <c>false</c> unless the 
            <see cref="P:Telerik.OpenAccess.IndexAttribute.Unique"/> property
            has been specified.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IndexAttribute.FulltextSet">
            <summary>
            Indicates whether the index definition is using a user supplied
            fulltext index setting.
            </summary>
            <value>
            <c>true</c> if the index definition is using user supplied setting.
            </value>
            <remarks>
            This property will be <c>false</c> unless the 
            <see cref="P:Telerik.OpenAccess.IndexAttribute.Fulltext"/> property
            has been specified.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.FetchFieldAttribute">
            <summary>
            Marks a field as part of a named
            FetchGroup. A FetchGroup is a set of fields which
            are retrieved together when the FetchGroup name is contained in the actual
            FetchPlan configuration.
            </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address")]
                Address address;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            This attribute is used if the default behavior is not sufficient, 
            and is needed for performance fine-tuning.
            </para>
            <para>
            This attribute requires the containing class to be 
            marked as <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>	
            <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>	
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchFieldAttribute.#ctor(System.String)">
            <summary>
            Declares a field as part of a named FetchGroup.
            </summary>
            <example>
            <c>[FetchFieldAttribute("newFetchGroup")]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <remarks>
            <para>
            Adds this field to the FetchGroup with the specified name. The
            fetch group is a collection of fields and can be defined on field level
            and can be combined with other FetchGroups on class level.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Next">
             <summary>
             Sets a FetchGroup at the referenced class as the FetchGroup to be used.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address", Next="Address with CityMap")]
                Address address;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            If it is necessary to fetch a referenced object with a specific
            FetchGroup definition you can specify it here. The next FetchGroup
            is added only to the FetchPlan definition if the object is retrieved
            via this reference. The FetchGroup name must be part of the actual FetchPlan.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>	
            </remarks>
            <value>
            Name of the FetchGroup to be used next.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyNext">
             <summary>
             Sets a FetchGroup for the key field at the referenced class as the FetchGroup to be used.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with addresses", Next="Address with CityMap", KeyNext="SomeReference with something else")]
                IDictionary&lt;SomeReference,Address&gt; addresses;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            If it is necessary to fetch a referenced object with a specific
            FetchGroup definition you can specify it here. The next FetchGroup
            is added only to the FetchPlan definition if the object is retrieved
            via this reference. The FetchGroup name must be part of the actual FetchPlan.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>	
            </remarks>
            <value>
            Name of the FetchGroup to be used next for the key reference.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Path">
             <summary>
             Adds a specific field at the referenced class to the FetchGroup.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address", Path="cityMap")]
                Address address;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            If you need a spefic field at the referenced object it is not necessary
            to define a FetchGroup at the referenced class. You can use the path argument 
            to do this indirectly.
            </para>
            <para>
            You also can traverse over more then one level to use the '.' as seperator.
            </para>
            <para>
            If the field is a collection the path has to specify this. The syntax is: 
            #element.childname
            </para>
            If the field is a dictionary the path has to mention if the 
            key or value reference should be used. The syntax is: 
            #key.fieldname or #value.fieldname. If you do not want to retrieve key and value
            the path has to be #key or #value.
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
            <value>
            Path specification
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyPath">
             <summary>
             Adds a specific field for the key at the referenced class to the FetchGroup.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address", Path="cityMap" KeyPath="someField")]
                IDictionary&lt;Somereference,Address&gt; addresses;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            If you need a spefic field at the referenced object it is not necessary
            to define a FetchGroup at the referenced class. You can use the path argument 
            to do this indirectly.
            </para>
            <para>
            You also can traverse over more then one level to use the '.' as seperator.
            </para>
            <para>
            If the field is a collection the path has to specify this. The syntax is: 
            #element.childname
            </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
            <value>
            Path specification
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Depth">
             <summary>
             Controls the depth of the fetch operation.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address", Depth=3)]
                Address address;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            The Depth parameter defines the maximum depth the referenced objects are
            fetched from this point.
            </para>
            <para>
            The default value for Depth is always 1! This means that only the referenced object
            is loaded. If you want to load additional data you have to increase the depth.
            </para>
            <para>
            This parameter is important if you define circular references. If you have a Person
            class with Children collection field (elements are
            also Person objects), an unlimited Depth will fetch all Persons if you start with Adam.
            </para>
            <para>
            The depth of the fetching operation is also limited by the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">
            FetchPlan.MaxDepth</see> property. It might be necessary to increase this value
            too to achieve the desired fetch effect.
            </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>
            </remarks>
            <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyDepth">
             <summary>
             Controls the depth of the fetch operation on the key part.
             </summary>
            <example>
            <code>
            [Persistent]
            class Person {
                // ...
                String   firstname;
                DateTime birthday;
                [FetchField("Person with address", Depth=3, KeyDept=2)]
                IDictionary&lt;SomeReference,Address&gt; addresses;
                // ...
            }
            </code>
            </example>
            <remarks>
            <para>
            The Depth parameter defines the maximum depth the referenced objects are
            fetched from this point.
            </para>
            <para>
            The default value for Depth is always 1! This means that only the referenced object
            is loaded. If you want to load additional data you have to increase the depth.
            </para>
            <para>
            This parameter is important if you define circular references. If you have a Person
            class with Children collection field (elements are
            also Person objects), an unlimited Depth will fetch all Persons if you start with Adam.
            </para>
            <para>
            The depth of the fetching operation is also limited by the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">
            FetchPlan.MaxDepth</see> property. It might be necessary to increase this value
            too to achieve the desired fetch effect.
            </para>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>
            </remarks>
            <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Name">
            <summary>
            Gets the name of the FetchGroup.
            </summary>
            <remarks>
            The name is the name as specified by the constructor and must match the
            name of the <see cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>.
            <para>
            It is recommended to use symbolic constants for the names of the FetchGroups.
            This avoids hard to find problems with misspelled values.
            </para>
            </remarks>
            <value>
            FetchGroup name.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.FetchGroupAttribute">
            <summary>
            Declares a named FetchGroup on class level.
            The FetchGroup is a set of fields which
            are retrieved together if the fetch group name is part of the actual
            FetchPlan configuration.
            </summary>
            <remarks>
            <para>
            This attribute is used if the default behavior is not sufficient, 
            and is needed for performance fine-tuning.
            </para>
            <para>
            You can combine various fetch group definitions with this attribute. 
            The fields, which  are part of the named fetch group are defined directly at the field level.
            </para>
            <para>
            Requires, that the class is
            marked as <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>	
            <seealso cref="T:Telerik.OpenAccess.FetchPlan"/>	
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines a FetchGroup with one included FetchGroup.
            </summary>
            <example>
            <c>[FetchGroupAttribute("newFetchGroup","smallerFetchGroup")]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <param name="addFetchGroup1">The name of the FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Defines a FetchGroup with two included FetchGroups.
            </summary>
            <example>
            <c>[FetchGroupAttribute("newFetchGroup","default","smallerFetchGroup")]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Defines a FetchGroup with three included FetchGroups.
            </summary>
            <example>
            <c>[FetchGroupAttribute("newFetchGroup","default","smallerFetchGroup","imageFetchGroup")]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Defines a FetchGroup with four included FetchGroups.
            </summary>
            <example>
            <c>[FetchGroupAttribute("newFetchGroup","default","smallerFetchGroup","imageFetchGroup","FG4")]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <param name="addFetchGroup4">The name of the forth FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String[])">
            <summary>
            Defines a FetchGroup with several included FetchGroups.
            </summary>
            <example>
            <c>[FetchGroupAttribute("newFetchGroup",new string[]{"default","smallerFetchGroup"})]</c>
            </example>
            <param name="fetchGroupName">The name of the FetchGroup.</param>
            <param name="addFetchGroup">An array of names of FetchGroup to 
            be included in this FetchGroup. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Name">
            <summary>
            Gets the name of the FetchGroup. All FetchGroups with the same name
            are used at the same time.
            </summary>
            <remarks>
            A descriptive name, for example a use case name, makes it easier to 
            see the FetchGroups meaning.
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
            </remarks>
            <value>
            The name of the FetchGroup.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Groups">
            <summary>
            Gets the collection of referenced FetchGroups.
            </summary>
            <remarks>
            You can combine various FetchGroups to a new one by specifing their names.
            </remarks>
            <value>
            The names of the FetchGroups.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.FieldAliasAttribute">
            <summary>
            Declares the property to be an alias for a field during OQL query evaluation.
            </summary>
            <remarks>
            This attribute marks the property as an alias for a field, so that the
            properties name can be used in an OQL query expression. This is useful
            to abstract from the given field name and allows to use the names of 
            public properties in OQL expressions instead of the field names.
            <para>
            Please note, that the property is <b>not</b> evaluated during OQL expression
            evaluation, but the name of the property is replaced with the field name
            given in the FieldAlias attribute constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FieldAliasAttribute.#ctor(System.String)">
            <summary>
            Declares a property to be an alias for the given field.
            </summary>
            <remarks>
            Currently, the usage of the correct field is not checked by the enhancer.
            </remarks>
            <param name="nameOfField">A valid field name.</param>
        </member>
        <member name="P:Telerik.OpenAccess.FieldAliasAttribute.FieldName">
            <summary>
            Gets the name of the field to query for this property.
            </summary>
            <value>
            A valid field name.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.ManagedInverseAttribute">
            <summary>
            Declares a collection to be managed by it's reverse relationship field.
            </summary>
            <remarks>
            In essence, this attribute declares that the attributed collection is calculated through
            the inverse field and that the inverse's field content should be managed
            automatically when modifications happen on the attributed side.
            <para>
            There are kinds of collection management currently possible:
            <ol>
            <li>1:n with join table - No attribute necessary.</li>
            <li>1:n with invers held collection - The inverse is a single visible reference.</li>
            <li>1:n with invers automatic collection - The inverse is a hidden automatic reference.</li>
            <li>m:n collections - The inverse is a collection of references.</li>
            </ol>
            </para>
            <para>
            Declaring a collection field to be managed by it's inverse relationship can
            avoid coding errors.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ManagedInverseAttribute.#ctor(System.String)">
            <summary>
            Declares a inverse field of a managed relationship.
            </summary>
            <remarks>
            Currently, the correct existence of the field is not checked by the enhancer.
            </remarks>
            <param name="nameOfInverseField">A valid field name of the inverse type or <c>{auto}</c>
            for automatic held reference.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ManagedInverseAttribute.InverseFieldName">
            <summary>
            Gets the name of the inverse field.
            </summary>
            <value>
            A valid field name for the type of the inverse side.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Blob">
            <summary>
            Implements binary large objects (Blob) which are accessed as
            a whole.
            </summary>
            <remarks>
            <para>
            This class allows to store large amounts of bytes.
            Data is completely loaded when the enclosing persistent 
            object is loaded.
            </para>
            <para>
            Instances of this class are always second class objects.
            </para>
            Blobs can be accessed only within an active 
            <see cref="P:Telerik.OpenAccess.IObjectContext.Transaction">transaction</see>.	
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.AbstractBlob"/>
            <seealso cref="T:System.IO.Stream"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Creates a new Blob object. An active transaction is required.
            </summary>
            <remarks>
            A Blob instance can only be accessed during an active transaction.
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
            </remarks>
            <param name="os">The object scope maintaining the Blob.</param> 
        </member>
        <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.ObjectContainer)">
            <summary>
            Creates a new Blob object using an ObjectContainer.
            </summary>
            <remarks>
            This constructor is intended only for disconnected usage.
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            </remarks>
            <param name="container">The writable object container.</param> 
        </member>
        <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.SPI.BlobAdapter,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Blob.Duplicate(Telerik.OpenAccess.SPI.BlobAdapter,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.SPI.IPersistenceManager)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Database">
            <summary>
            Represents one database which is identified by an URL; serves
            as factory object for transactions, queries, object identities.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Telerik.OpenAccess.Database"/> is identified by a Connection Id.
            The passed connection id is defined in the Configuration File.
            </para>
            <para>The database object can be 
            used to obtain connections (<see cref="T:Telerik.OpenAccess.IObjectScope"/>)
            for this database.
            </para>
            <para>
            A physical connection is opened when the first <see cref="T:Telerik.OpenAccess.IObjectScope"/>
            is requested. The connection is closed, when the last 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> is disposed.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
            <example>
            <para>
            The following method shows how easy it is to <ul>
            <li><see cref="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)">create a <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent</see> instance</see>,</li>
            <li><see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)">retrieve it back</see> by using it's</li>
            <li><see cref="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)">object identity</see> (our <see cref="T:Telerik.OpenAccess.IObjectId">representation</see> of the primary key values),</li>
            <li>update it by just assigning a new value and <see cref="M:Telerik.OpenAccess.ITransaction.Commit">committing</see> the <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see></li>
            <li><see cref="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)">remove</see> that instance from the database.</li>
            </ul>
            </para>
            <para>
            In the Main method a database is <see cref="M:Telerik.OpenAccess.Database.Get(System.String)">opened</see> and a 
            <see cref="T:Telerik.OpenAccess.IObjectScope">workspace</see> in which persistent
            instances live is <see cref="M:Telerik.OpenAccess.Database.GetObjectScope">generated</see>. 
            </para>
            <para>
            There must be a connection with identifier
            <c>DatabaseConnection1</c> be defined in the application configuration file.
            </para>
            <para>
            <note type="caution">
            All modifying methods must be executed in the context of an
            <see cref="M:Telerik.OpenAccess.ITransaction.Begin">active transaction</see>; otherwise an exception will occur.
            </note>
            </para>
            <code lang="C#">
            using Telerik.OpenAccess;
            namespace Example
            {
                class Program
                {
                    static void CRUD(IObjectScope scope) 
                    {   // Make an object in the normal way, setting one field.
                        Person p = new Person(); 
                        p.Name = "Kevin"; 
             
                        // CREATE the persistent image from the memory instance 
                        scope.Transaction.Begin();  // adding a new persistent instance requires an active transaction
                        scope.Add(p);               // now the scope knows about the instance and manages it 
                        scope.Transaction.Commit(); // now the database is modified 
            
                        // OBTAINING the database identity of the instance 
                        IObjectId oid = scope.GetObjectId(p); // either application visible or database internal 
            
                        // READ the instance by asking the database to resolve the identity 
                        // Here we open a second scope, whose managed objects are not to be mixed with
                        // the instances managed by the first scope.
                        using (IObjectScope scope2 = scope.Database.GetObjectScope()) 
                        {   // Just to show how to retrieve an object by is identity, otherwise not necc. 
                            // The Person instance could also be in the result of a query.
                            Person p2 = (Person)scope2.GetObjectById(oid); 
                            System.Console.WriteLine(p.Name); // reads the value from the database 
                        } 
            
                        // UPDATING (here without extra scope bracket) 
                        scope.Transaction.Begin();  // all modifications must be done inside a transaction 
                        p.Name = "Thomas";          // changes the object in memory, still managed by the scope 
                        scope.Transaction.Commit(); // changes the database content 
            
                        // DELETE the instance from the database 
                        scope.Transaction.Begin();  // all modifications must be done inside a transaction 
                        scope.Remove(p);            // marks the instance as to be deleted upon commit
                        scope.Transaction.Commit(); // changes the database content 
                    } 
            
                    static void Main(string []args)
                    {	// OPENING the database configured as "DatabaseConnection1" in the config file.
                         using (IObjectScope scope = Database.Get("DatabaseConnection1").GetObjectScope())
                         {
                             CRUD(scope); // showing create, retrieve, update, delete for a simple Person
                         }
                    }
                }
            
                // DEFINING a class to be able to have persistent instances
                [Persistent]             // this class uses an internal object id (not user visible)
                public class Person
                {
                    private string name; // persistent fields should not be public
                    public string Name   // but they can be available through public properties
                    {
                        get { return name; }
                        set { name = value; }
                    }
                    public Person() { }  // an empty constructor is always required by Telerik Data Access
                }
            }
            
            </code>
            <code lang="Visual Basic">
             Friend Class Program
             ' Please see the comments in the C# example, which is equivalent
             Public Sub New()
             End Sub
            
             Private Shared Sub CRUD(ByVal scope As IObjectScope)
                Dim p As New Person
                p.Name = "Kevin"
                scope.Transaction.Begin
                scope.Add(p)
                scope.Transaction.Commit
                Dim oid As IObjectId = scope.GetObjectId(p)
                Using scope2 As IObjectScope = scope.Database.GetObjectScope
                    Dim p2 As Person = DirectCast(scope2.GetObjectById(oid), Person)
                    Console.WriteLine(p.Name)
                End Using
                scope.Transaction.Begin
                p.Name = "Thomas"
                scope.Transaction.Commit
                scope.Transaction.Begin
                scope.Remove(p)
                scope.Transaction.Commit
             End Sub
            
             Private Shared Sub Main(ByVal args As String())
                 Using scope As IObjectScope = Database.Get("DatabaseConnection1").GetObjectScope
                     Program.CRUD(scope)
                 End Using
             End Sub
             
             End Class
            
            </code>
            <para>
            </para>
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.Database.SetActive(Telerik.OpenAccess.Database,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Database.#ctor(Telerik.OpenAccess.SPI.IDatabaseAdapter)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Database.ConnectionId2URL(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Database.Get(System.String)">
            <summary>
            Returns the database object for the passed connection id using the application configuration file. 
            </summary>
            <remarks>
            If this method is called more than once with the same id,
            the same Database instance is returned.
            <para>
            The database is not opened yet; it will be opened when the first
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> object is requested.
            </para>
            </remarks>
            <param name="connectionId">The connection id for the database.</param>
            <returns>The Database instance.</returns>    
        </member>
        <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement)">
            <summary>
            Returns the database object for the passed connection id and configuration information. 
            </summary>
            <remarks>
            <para>
            If this method is called more than once with the same id,
            the same Database instance is returned.
            </para>
            An XmlElement can be specified that contains
            the config information to be used instead of the information
            contained in the executables application configuration file.
            <para>
            The database is not opened yet; it will be opened when the first
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> object is requested.
            </para>
            <para>
            It is not supported to use the same connectionId with different
            config override nodes, or one time with and one time without config override.
            The behavior is not specified for this case.
            </para>	
            <para>
            Attention: None of the provided tools can read the passed config override, so use with care!
            </para>
            <para>
            Example usage:
            <code>
                 const string myconfig = 
                    		"&lt;openaccess&gt;"+
                    			"&lt;references&gt;"+
                    				"&lt;reference assemblyname='ClassLibrary1' /&gt;"+
                    			"&lt;/references&gt;"+
                    			"&lt;connections&gt;"+
                    				"&lt;connection id='DatabaseConnection1'&gt;"+
                    						"&lt;databasename&gt;myDatabase&lt;/databasename&gt;"+
                    					"&lt;servername&gt;localhost&lt;/servername&gt;"+
                    					"&lt;user&gt;myuser&lt;/user&gt;"+
                    					"&lt;password&gt;mypassword&lt;/password&gt;"+
                    					"&lt;backendconfigurationname&gt;mssqlConfiguration&lt;/backendconfigurationname&gt;"+
                    				"&lt;/connection&gt;"+
                    			"&lt;/connections&gt;"+
                    			"&lt;backendconfigurations&gt;"+
                    				"&lt;backendconfiguration id='mssqlConfiguration' backend='mssql'&gt;"+
                    					"&lt;mappingname&gt;mssqlMapping&lt;/mappingname&gt;"+
                    					"&lt;!-- logging.logEvents&gt;all&lt;/logging.logEvents&gt;"+
                    					"&lt;logging.logEventsToSysOut&gt;true&lt;/logging.logEventsToSysOut--&gt;"+
                    				"&lt;/backendconfiguration&gt;"+
                    			"&lt;/backendconfigurations&gt;"+
                    			"&lt;mappings current='mssqlMapping'&gt;"+
                    				"&lt;mapping id='mssqlMapping' /&gt;"+
                    			"&lt;/mappings&gt;"+
                    		"&lt;/openaccess&gt;";    
            		XmlDocument xmlDoc = new XmlDocument();
            		xmlDoc.LoadXml(myconfig);
            		Database db = Database.Get("DatabaseConnection1", xmlDoc.DocumentElement);
            </code>
            </para>
            The passed XmlElement is used instead of the database configuration node in the application
            configuration file. However this does not necessarily replace the mapping nodes
            of other referenced assemblies: The mapping configuration of those is still used
            when referenced (via the reference subelement) from the passed <paramref name="configOverride"/> node.
            </remarks>
            <param name="connectionId">The connection id for the database.</param>
            <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
            <returns>The Database instance.</returns>    
            <exception cref="T:System.ArgumentException">No connectionId given.</exception>
            <exception cref="T:System.ArgumentException">No configOverride given.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement,System.Reflection.Assembly[])">
            <summary>
            Returns the database object for the passed connection id, configuration information and 
            the list of assemblies with persistent class information.
            </summary>
            <remarks>
            <para>
            If this method is called more than once with the same id,
            the same Database instance is returned.
            </para>
            <para>
            An XmlElement can be specified that contains
            the config information to be used instead of the information
            contained in the executables application configuration file.
            </para>
            <para>
            A list of assemblies has to be specified that contains the 
            definition of all persistent classes. Normally the process entry
            assembly is used to find the classes. With this method it is possible to
            specify also assemblies that are not referenced by the entry assembly.
            All assemblies must be loaded.
            </para>
            <para>
            The database is not opened yet; it will be opened when the first
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> object is requested.
            </para>
            <para>
            It is not supported to use the same connectionId with different
            config override nodes, or one time with and one time without config override.
            The behavior is not specified for this case.
            </para>	
            <para>
            Attention: None of the provided tools can read the passed config override, so use with care!
            </para>
            <para>
            Example usage:
            <code>
                 const string myconfig = 
                    		"&lt;openaccess&gt;"+
                    			"&lt;references&gt;"+
                    				"&lt;reference assemblyname='ClassLibrary1' /&gt;"+
                    			"&lt;/references&gt;"+
                    			"&lt;connections&gt;"+
                    				"&lt;connection id='DatabaseConnection1'&gt;"+
                    						"&lt;databasename&gt;myDatabase&lt;/databasename&gt;"+
                    					"&lt;servername&gt;localhost&lt;/servername&gt;"+
                    					"&lt;user&gt;myuser&lt;/user&gt;"+
                    					"&lt;password&gt;mypassword&lt;/password&gt;"+
                    					"&lt;backendconfigurationname&gt;mssqlConfiguration&lt;/backendconfigurationname&gt;"+
                    				"&lt;/connection&gt;"+
                    			"&lt;/connections&gt;"+
                    			"&lt;backendconfigurations&gt;"+
                    				"&lt;backendconfiguration id='mssqlConfiguration' backend='mssql'&gt;"+
                    					"&lt;mappingname&gt;mssqlMapping&lt;/mappingname&gt;"+
                    					"&lt;!-- logging.logEvents&gt;all&lt;/logging.logEvents&gt;"+
                    					"&lt;logging.logEventsToSysOut&gt;true&lt;/logging.logEventsToSysOut--&gt;"+
                    				"&lt;/backendconfiguration&gt;"+
                    			"&lt;/backendconfigurations&gt;"+
                    			"&lt;mappings current='mssqlMapping'&gt;"+
                    				"&lt;mapping id='mssqlMapping' /&gt;"+
                    			"&lt;/mappings&gt;"+
                    		"&lt;/openaccess&gt;";    
            		XmlDocument xmlDoc = new XmlDocument();
            		xmlDoc.LoadXml(myconfig);
            		Database db = Database.Get("DatabaseConnection1", xmlDoc.DocumentElement);
            </code>
            </para>
            The passed XmlElement is used instead of the database configuration node in the application
            configuration file. However this does not necessarily replace the mapping nodes
            of other referenced assemblies: The mapping configuration of those is still used
            when referenced (via the reference subelement) from the passed <paramref name="configOverride"/> node.
            </remarks>
            <param name="connectionId">The connection id for the database.</param>
            <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
            <param name="entryAssemblies">The list of all assemblies with persistent classes inside. 
            Use this method only if your application is not linked directly or indirectly to the 
            persistent classes assemblies. Only this list of assemblies will be used, it must be complete!
            </param>
            <returns>The Database instance.</returns>    
            <exception cref="T:System.ArgumentException">No connectionId given</exception>
            <exception cref="T:System.ArgumentException">No configOverride given</exception>
            <exception cref="T:System.ArgumentException">No entryAssemblies given</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.Get(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>
            Returns the database object for the given connection string, backend configuration and mapping settings.
            </summary>
            <remarks>
            This method can be used to programatically control all aspects of database configuration.
            <para>
            The <paramref name="connectionString"/> parameter can be used in two principal ways:
            <list type="number">
            <item>
            <description>
            With a plain connection string value (e.g. 'Data Source=.\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=True')
            </description>
            </item>
            <item>
            <description>
            With a connection string name (e.g. 'DatabaseConnection1')
            </description>
            </item>
            </list>
            </para>
            <para>
            The first form (plain connection string) requires the setting of the <see cref="p:BackendConfiguration.Backend"/> 
            property in the <paramref name="backendConfiguration"/> as OpenAccess cannot deduce the intended driver.
            </para>
            <para>
            The second form is more flexible (and recommended) because the name will be resolved with the application configuration
            settings. The backend value omittable when a ProviderName is present in the connection string settings.
            </para>
            </remarks>
            <param name="connectionString">Connection String OR Connection String Name</param>
            <param name="backendConfiguration">Backend configuration</param>
            <param name="metadataContainer">Metadata container obtained via one of the Metadata collectors</param>
            <returns>The unopened, but configured database instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.IsOpen(System.String,System.String)">
            <summary>
            Indicates whether a database is currently opened.
            </summary>
            <remarks>
            The IsOpen method allows to check if a database is currently opened. 
            </remarks>
            <param name="connectionString">Connection String OR Connection String Name</param>
            <param name="cacheKey">The name under which the database was cached.</param>
            <returns><c>True</c> if database is currently open, <c>False otherwise</c></returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetObjectScope">
            <overloads>Gets a connection for this database.</overloads>
            <summary>
             Gets a connection for this database. 
            </summary>
            <remarks>IObjectScope objects have to be disposed.
            </remarks>
            <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope"/> instance with 
            default options.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetObjectScope(Telerik.OpenAccess.TransactionProvider)">
            <overloads>Gets a connection for this database.</overloads>
            <summary>
             Gets a connection for this database. 
            </summary>
            <remarks>IObjectScope objects have to be disposed.
            </remarks>
            <param name="provider">The style of the transaction controlling.</param>    
            <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope"/> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider"/> options.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String)">
            <summary>
             Gets a connection for this database.  
             The supplied username and 
             password are used for the database connection.
            </summary>
            <remarks>IObjectScope objects have to be disposed.</remarks>
            <returns>An <see cref="T:Telerik.OpenAccess.IObjectScope"/> instance with default 
            options.</returns>
            <param name="username">The user name for the connection.</param>
            <param name="password">The password for the connection.</param>    
            <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String,Telerik.OpenAccess.TransactionProvider)">
            <overloads>Gets a connection for this database.</overloads>
            <summary>
             Gets a connection for this database. 
             The supplied username and 
             password are used for the database connection.
            </summary>
            <remarks>IObjectScope objects have to be disposed.
            </remarks>
            <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope"/> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider"/> options.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
            <param name="username">The user name for the connection.</param>
            <param name="password">The password for the connection.</param>    
            <param name="provider">The style of the transaction controlling.</param>    
            <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetEffectiveConnectionString">
            <summary>
            Gets the effective connection string for the database.
            </summary>
            <remarks>
            The returned connection string will have no indication on the backend or driver used.
            You can retrieve this information from the <see cref="p:BackendConfiguration"/> property.
            </remarks>
            <returns>
            Connection string that could be used with an ADO driver to connect to the database.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.Dispose">
            <summary>
            Releases all resources allocated by the database. Closes all
            database connections.
            </summary>
            <remarks>
            <para>
            After a database has been disposed, this Database instance will 
            no longer be returned by the <see cref="M:Telerik.OpenAccess.Database.Get(System.String)"/> methods. On the next 
            <see cref="M:Telerik.OpenAccess.Database.Get(System.String)"/>
            call, a new Database instance will be created.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Database.ParseObjectId(System.Type,System.String)">
            <summary>
            Creates database identifiers of persistent objects by parsing 
            a string representation.
            </summary>
            <remarks>
            The returned database object id can be used with
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> to retrieve the persistent object.
            </remarks>
            <param name="oidstr">
            Database object ID in string form.
            </param>
            <param name="t">
            The Type of the object with the specified id. For internal identity,
            null can be specified.
            </param>
            <returns>
            New database object identifier.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetClassId(System.Type)">
            <summary>
            Returns the class id for a specific type
            </summary>
            <remarks>
            This class id is normally part of the internal Object Id string only. 
            The type must be persistence capable.
            </remarks>
            <param name="t">
            The Type of the class to get the id from.
            </param>
            <returns>
            The class id as int
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetContext(System.Object)">
             <summary>
             Returns the IObjectContext instance responsible for the given persistence capable object.
             </summary>
             <remarks>
             This method determines the object scope or container instance managing the passed object.
             </remarks>
             <example>
             It is recommended to use this method from a central place in your class hierarchy
             in order to simplify the code.
            <code>
             using Telerik.OpenAccess;
            
             public abstract MyBaseClass
             {
                 // Central place to obtain the database context, limited here to connected usage.
                 public IObjectScope Scope
                 {
                     get
                     {
                         return Database.GetContext(this) as IObjectScope;
                     }
                 }
             }
            
             [Persistent]
             public class Person : MyBaseClass
             {
                 // Usage of the Scope property for demonstration purposes only
                 IEnumerable AsOldAsMe()
                 {   
                     // A sample OQL query string.
                     string oqlexpr = "select * from "+this.GetType().FullName+"Extent as p where p.birthday = $1";    
            
                     // Will fail if this instance is not persistent yet and this.Scope returns null.
                     return this.Scope.GetOqlQuery(oqlexpr).Execute(this.birthday);
                 }
             }
            
            </code>
             </example>
             <returns>
             The context of the passed object: either an <see cref="T:Telerik.OpenAccess.IObjectScope"/> or an 
             <see cref="T:Telerik.OpenAccess.ObjectContainer"/> or <c>null</c>.
             </returns>
             <param name="persistentObject">
             The persistence capable object whose context is to be returned.
             </param>
             <exception cref="T:System.ArgumentNullException">
             No <paramref name="persistentObject"/> has been given.
             </exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             Type of the <paramref name="persistentObject"/> is not declared 
             <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> or not enhanced.
             </exception>
             <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
             <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)">
            <summary>
            Returns the database object ID for the passed persistence capable
            instance.
            </summary>
            <remarks>
            The returned value will be <c>null</c> when the instance is not
            persistent but transient.
            <seealso cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/>
            </remarks>
            <param name="persistenceCapable">The persistence-capable instance.
            </param>
            <returns>Database object identity or <c>null</c> if 
            instance is transient.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            Type of the instance is not declared [Persistent] or not enhanced.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.Database.GetSchemaHandler">
            <summary>
            Gets schema handling instance. Must be called and used before any object scope is obtained.
            </summary>
            <remarks>
            With the schema handler, the database schema can be checked and migrated.
            </remarks>
            <returns>Schema Handler instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Database.ReplaceMetadata(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.SchemaUpdateCallback)">
            <summary>
            Replaces the mapping definition on a running Database instance
            </summary>
            <param name="scope">The scope that has initiated the mapping update.</param>
            <param name="newMetadata">Metadata definition to use for new scopes.</param>
            <param name="callback">A callback to integrate schema migration tasks if necessary.</param>
        </member>
        <member name="P:Telerik.OpenAccess.Database.ConnectionURL">
            <summary>
            Gets the URL for this database object.
            </summary>
            <remarks>
            <para>
            The URL for the database connection according to the settings in the configuration file.
            </para>
            <para>
            General syntax:
            "mssql://servername/databasename;USER=openaccess;PASSWORD=openaccess"
            </para>
            </remarks>
            <value>String in URL syntax.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Database.Properties">
            <summary>
            Controls the settings of the database connections.
            </summary>
            <remarks>
             <para>
            Database properties can only be modified, if the database has no 
            open connections. If the database has already open connections, a 
            <see cref="T:System.InvalidOperationException"/> will be thrown when 
            modifications are attempted.
             </para>
             <seealso cref="T:Telerik.OpenAccess.IDatabaseProperties">IDatabaseProperties</seealso>
            </remarks>
            <value>
            Instance with the properties of the database.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Database.Adapter">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Database.OID">
            <summary>
            Get a helper object for database object identity instances.
            </summary>
            <remarks>
            The returned instance can be used for OID handling purposes.
            </remarks>
            <value>
            The helper instance.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Database.DefaultTransactionProperties">
            <summary>
            Gets the default properties for the transactions.
            </summary>
            <remarks>
            <para>
            Whenever a new object scope is created, the default transaction
            properties are used as initial values for 
            <see cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">
            IObjectScope.TransactionProperties</see>.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties">ITransactionProperties</seealso>
            <seealso cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">IObjectScope.TransactionProperties</seealso>
            </remarks>
            <value>Transaction properties instance with the default values.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Database.MetaData">
            <summary>
            Gets the metadata tree for this database.
            </summary>
            <returns>Returns the metadata tree for the actual database connection.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Database.BackendConfiguration">
            <summary>
            Gets a copy of the backend configuration used for this database.
            </summary>
            <remarks>
            The backend configuration that is returned can be used to obtain another database instance
            with the same backend (or subsequently altered) configuration.
            </remarks>
            <value>Newly created backend configuration instance</value>
        </member>
        <member name="P:Telerik.OpenAccess.Database.Cache">
            <summary>
            Gets the controller of the second level cache
            </summary>
            <remarks>
            All functions can be used to control the content of the second level cache. If objects need to 
            be evicted from the cache several functions are available.
            </remarks>
            <example>
            How to evict all Person instances from the cache
            <code>
            Database db = Database.Get("DatabaseConnection1");
            db.Cache.EvictAll(typeof(Person)),false);
            </code>
            </example>
            <value>Controller instance for the L2 cache</value>
        </member>
        <member name="T:Telerik.OpenAccess.IDatabaseProperties">
            <summary>
            Controls the settings of a database.
            </summary>    
            <remarks>
            <para>
            An instance of this type can be obtained from
            <see cref="P:Telerik.OpenAccess.Database.Properties">Database.Properties</see>
             property and controls the settings of the 
             associated <see cref="T:Telerik.OpenAccess.Database"/>.
            </para>
            <para>
            The properties for a database can only be changed while the
            database is not opened.
            </para>
            <para>
            The default values are described at the description of
            the respective property.
            </para>
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IDatabaseProperties.ConnectionTimeout">
            <summary>
            Controls the timeout of database client/server connections after the last ObjectScope disposal.
            </summary>    
            <remarks>
            <para>
            Database client/server connections are closed 
            ConnectionTimeout milliseconds
            after the last object scope associated with the connection is
            disposed. If a new object scope is obtained in the meantime,
            the connection is not closed. 
            </para>
            <para>
            By default, the timeout is -1, i.e. connections are never closed. 
            </para>
            <para>
            This property can only be set, if the database has no open 
            connections. It is mostly useful in application server scenarios, where closing
            the last ObjectScope might not immediately mean, that the database server connections
            are to be closed too.
            </para>
            </remarks>
            <value>The timeout value is given in milliseconds.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Database has already been opened.
            </exception>
        </member>
        <member name="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider">
            <summary>
            Specifies the usage pattern for transactions.
            </summary>
            <remarks>
            For more information about this setting see <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider"/> enumeration.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The database has already been opened.
            </exception>
            <value>Indicates which transaction provider is (to be) used.</value>
        </member>
        <member name="T:Telerik.OpenAccess.ISchemaHandler">
            <summary>
            Methods for handling the database schema
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)">
            <summary>
            Calculates the DDL script for updating the database to the current version of the enhanced classes and mapping information.
            </summary>
            <remarks>
            Updating the database will alter the database schema so that the tables and procedures match
            the definitions as given by the enhanced classes and their mapping.
            <para>
            The generated string can be used with <see cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/> to migrate the database schema.
            </para>
            <para>
            CreateUpdateDDLScript will block other threads in the <see cref="M:Telerik.OpenAccess.Database.Get(System.String)"/> methods and will
            fail when the database has active object scopes.
            </para>
            </remarks>
            <example>
            The following code fragment can be used to perform database schema migration in the user process. You can place it into
            the ObjectScope providing class.
            <code>
                Database db = Database.Get("DatabaseConnection1");              // do this code before an object scope is obtained
                string ddl = db.GetSchemaAdapter().CreateUpdateDDLScript(null); // using the default properties for checking differences
                if (string.IsNullOrEmpty(ddl) == false)                         // is there is something to migrate?
                    db.GetSchemaAdapter().ExecuteDDLScript(ddl);                // migrating the database
            </code>
            A more complete example including the creation of an empty database.
            <code>
               public static void Main(string[] args)
               {   // Obtaining the configuration
                   Database db = Database.Get("DatabaseConnection1");
                   // Testing if database exists
                   if (db.GetSchemaHandler().DatabaseExists() == false)
                       db.GetSchemaHandler().CreateDatabase(); // conditionally creating it
                   // Testing if database schema is correct
                   string ddl = db.GetSchemaHandler().CreateUpdateDDLScript(null);
                   if (string.IsNullOrEmpty(ddl) == false)
                       db.GetSchemaHandler().ExecuteDDLScript(ddl); // conditionally correcting it
                   // Working with the database
                   using(IObjectScope scope = db.GetObjectScope())
                   {
                       Console.WriteLine("Database opened.");
                   }
               }
            </code>
            </example>
            <param name="props">Values controlling the update calculation process or <c>null</c> if the defaults are to be used.</param>
            <returns>String with the needed updates.</returns>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateDDLScript">
            <summary>
            Calculates the DDL script for database schema creation of the current version of the enhanced classes and mapping information.
            </summary>
            <remarks>
            Creating the database schema so that the tables and procedures match the definitions as given by the enhanced classes and their mapping.
            <para>
            The generated string can be used with <see cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/> to migrate the database schema.
            </para>
            <para>
            CreateDDLScript will block other threads in the <see cref="M:Telerik.OpenAccess.Database.Get(System.String)"/> methods and will
            fail when the database has active object scopes.
            </para>
            </remarks>
            <example>
            The following code fragment can be used to perform database schema creation in the user process. You can place it into
            the ObjectScope providing class.
            <code>
                Database db = Database.Get("DatabaseConnection1");              // do this code before an object scope is obtained
                string ddl = db.GetSchemaAdapter().CreateDDLScript();           // create the complete ddl script
                db.GetSchemaAdapter().ExecuteDDLScript(ddl);                    // create the database schema, the actual schema should be empty
            </code>
            A more complete example including the creation of an empty database.
            <code>
               public static void Main(string[] args)
               {   // Obtaining the configuration
                   Database db = Database.Get("DatabaseConnection1");
                   // Testing if database exists
                   if (db.GetSchemaHandler().DatabaseExists() == false)
                       db.GetSchemaHandler().CreateDatabase();
                   // Testing if database schema is correct
                   string ddl = db.GetSchemaHandler().CreateDDLScript();
                   db.GetSchemaHandler().ExecuteDDLScript(ddl);
                   // Working with the new, empty database
                   using(IObjectScope scope = db.GetObjectScope())
                   {
                       Console.WriteLine("Database opened.");
                   }
               }
            </code>
            </example>
            <returns>String with the complete ddl script.</returns>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)">
            <summary>
            Executes a DDL script on a database instance without open contexts.
            </summary>
            <remarks>
            The <paramref name="ddl"/> script can be produced by the <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> method.
            </remarks>
            <example>
            See <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> for an example.
            </example>
            <param name="ddl">String containing DDL statements for the actual database</param>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.ForceExecuteDDLScript(System.String)">
            <summary>
            Executes a DDL script on a used database instance.
            </summary>
            <remarks>
            The <paramref name="ddl"/> script can be produced by the <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> method.
            </remarks>
            <example>
            See <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> for an example.
            </example>
            <param name="ddl">String containing DDL statements for the actual database</param>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.DatabaseExists">
            <summary>
            Tests if the database exists.
            </summary>
            <remarks>
            When the database exists, but is not accessible to the current user, <c>True</c> is returned.
            </remarks>
            <returns><c>True</c> if database exists.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateDatabase">
            <summary>
            Create empty database.
            </summary>
            <remarks>
            After the database is created, the schema needs to be created. This can be done with the
            <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> and <see cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/> methods.
            </remarks>
            <returns><c>True</c> if database was created.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)">
            <summary>
            Creates an update script and classifies the needed schema migration operations.
            </summary>
            <param name="props">Values controlling the update calculation process or <c>null</c> if the defaults are to be used.</param>
            <returns>Schema migration information with script and update classifications.</returns>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.UpdateSchema(Telerik.OpenAccess.SchemaUpdateInfo)">
            <summary>
            Executes DDL statements on a database instance without open contexts.
            </summary>
            <remarks>
            The <paramref name="schemaUpdateInfo"/> statements can be produced by the <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)"/> method.
            <para>
            If the statements contain structural changes on existing schema artifacts and there are open context instances, 
            the statements will not be executed.
            </para>
            </remarks>
            <example>
            See <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)"/> for an example.
            </example>
            <param name="schemaUpdateInfo">Structure containing DDL statements for the actual database.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ISchemaHandler.ForceUpdateSchema(Telerik.OpenAccess.SchemaUpdateInfo)">
            <summary>
            Executes DDL statements on a database instance with open contexts.
            </summary>
            <remarks>
            The <paramref name="schemaUpdateInfo"/> statements can be produced by the <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)"/> method.
            <para>
            If the statements contain structural changes on existing schema artifacts and there are open context instances, 
            the chance to get failing queries on those contexts is high.
            </para>
            </remarks>
            <example>
            See <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)"/> for an example.
            </example>
            <param name="schemaUpdateInfo">Structure containing DDL statements for the actual database.</param>
        </member>
        <member name="T:Telerik.OpenAccess.SchemaUpdateInfo">
            <summary>
            Container for update script information.
            </summary>
            <remarks>
            The SchemaUpdateInfo contains detailed information about the generated list of DDL statements. 
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.ScriptSeparator">
            <summary>
            The backend specific script seperator. The default is the semicolon.
            </summary>
            <value>Script seperator to use for script generation.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.Script">
            <summary>
            Script generated from the statements list by using the seperator string.
            </summary>
            <value>Gerenated script for schema migration.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.HasScript">
            <summary>
            True if the structure contains statements.
            </summary>
            <value>True if a script is available, false otherwise.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.Statements">
            <summary>
            The list of statements to migrate the database.
            </summary>
            <value>Schema migration script as seperate statements.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.UsesTemporaryTable">
            <summary>
            Script contains artifacts that uses a temprorary table to migrate existing data during structural table changes.
            </summary>
            <remarks>
            The temporary table is used to copy the data from an existing table that is later dropped.
            </remarks>
            <value>Script contains statements generting a temporary table.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsNewTable">
            <summary>
            Script will add a new table.
            </summary>
            <value>Script contains statements generting new tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.RemovesTable">
            <summary>
            Script will remove an existing table.
            </summary>
            <remarks>
            This is a structural change to the existing schema that can lead to broken queries on other clients.
            </remarks>
            <value>Script contains statements removing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsColumnOnExistingTable">
            <summary>
            Script will add a new column to an existing table.
            </summary>
            <value>Script contains statements adding columns to tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.RemovesColumnOnExistingTable">
            <summary>
            Script will remove a column from an existing table.
            </summary>
            <remarks>
            This is a structural change to the existing schema that can lead to broken queries on other clients.
            </remarks>
            <value>Script contains statements removing columns from tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.ModifiesColumnOnExistingTable">
            <summary>
            Script will modify a column definition on an existing table.
            </summary>
            <remarks>
            This can be an inplace type or a length or scale change.
            This is a structural change to the existing schema that can lead to broken queries on other clients.
            </remarks>
            <value>Script contains statements changing existing column definitions.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsIndexOnNewTable">
            <summary>
            Script will add an index defintion for a new table, the create table statement is included as well.
            </summary>
            <value>Script contains statements generting indexes on new tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsIndexOnExistingTable">
            <summary>
            Script will add an index to an existing table.
            </summary>
            <value>Script contains statements generting indexes on existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.RemovesIndexOnExistingTable">
            <summary>
            Script will remove an index on an existing table.
            </summary>
            <value>Script contains statements removing indexes on existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsFKConstraintOnExistingTable">
            <summary>
            Script will add a foreign key constraint to an existing table.
            </summary>
            <value>Script contains statements generting foreign key constraints on existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsFKConstraintOnNewTable">
            <summary>
            Script will add a foreign key constraint to a new table, the create table statement is included as well.
            </summary>
            <value>Script contains statements generting foreign key constraints on new tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.RemovesFKConstraintFromExistingTable">
            <summary>
            Script will remove a foreign key constraint from an existing table.
            </summary>
            <value>Script contains statements removing foreign key constraints on existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsPKConstraintOnExistingTable">
            <summary>
            Adds a primary key constraint to an existing table.
            </summary>
            <remarks>
            This is a structural change to the existing schema that can lead to broken queries on other clients.
            </remarks>
            <value>Script contains statements generting primary key constraints on existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsPKConstraintOnNewTable">
            <summary>
            Adds a primary key constraint to an new table, the create table statement is included as well.
            </summary>
            <value>Script contains statements generting primary key constraints on new tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.RemovesPKConstraintFromExistingTable">
            <summary>
            Removes a primary key constraint from an existing table.
            </summary>
            <remarks>
            This is a structural change to the existing schema that can lead to broken queries on other clients.
            </remarks>
            <value>Script contains statements removing primary key constraints from existing tables.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.AddsOther">
            <summary>
            Script contains artifacts that adds structures independent of existing.
            </summary>
            <remarks>
            The script might add stored procedures, triggers or sequences.
            </remarks>
            <value>Script contains statements generting new artifacts.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.ModifiesOther">
            <summary>
            Script contains artifacts that modifies existing structures.
            </summary>
            <remarks>
            The script might modify stored procedures, triggers or sequences.
            </remarks>
            <value>Script contains statements modifying artifacts.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.IsTrivial">
            <summary>
            Script contains schema artifacts without influencing the existing schema.
            </summary>
            <remarks>
            The script can contain statements that adds new tables, their constraints or indexes.
            Existing structures are not modified or extended.
            </remarks>
            <value>Script contains only trivial statements.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.IsExtending">
            <summary>
            Script contains schema artifacts that extend the existing schema.
            </summary>
            <remarks>
            The script can contain statements that add columns, constraints or indexes to existing tables. 
            Independent artifacts like new tables, their constraints or indexes are allowed as well.
            </remarks>
            <value>Script contains only statements adding artifacts to existing structures or new structures.</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateInfo.IsComplex">
            <summary>
            Script contains schema artifacts with structural changes.
            </summary>
            <remarks>
            The script contains statements that changes the structure of existing schema artifactes like tables, constraints or indexes.
            This script should not be executed when other clients are using the database 
            because assumptions they made when the clients were created can be broken.
            Esp. queries on tables that are structurally changed, columns are removed or changed in type, will not work any longer.
            </remarks>
            <value>Script contains complex statements, changing existing structures.</value>
        </member>
        <member name="T:Telerik.OpenAccess.SchemaUpdateProperties">
            <summary>Control switches for the database schema migration</summary>
            <remarks>
            An instance of this type can be used to control the behavior of the schema update algorithm.
            </remarks>
            <example>
            Please see <see cref="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)"/> for an example.
            </example>
            <seealso cref="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)"/>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckConstraint">
            <summary>
            Controls if constraints are migrated
            </summary>
            <remarks>
            Per default, constraints are migrated
            </remarks>
            <value><c>True</c> if constraints are migrated. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckExtraColumns">
            <summary>
            Controls if additional (non-schema described) columns are migrated
            </summary>
            <remarks>
            Per default, additional columns of a table will be removed. To suppress this behavior, set this
            property to <c>False</c>.
            </remarks>
            <value><c>True</c> if additional columns are migrated. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckExtraIndexes">
            <summary>
            Controls if additional (non-schema described) indexes are migrated
            </summary>
            <remarks>
            Per default, additional indexes of a table will be removed. To suppress this behavior, set this
            property to <c>False</c>.
            </remarks>
            <value><c>True</c> if additional indexes are migrated. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckIndex">
            <summary>
            Controls if indexes are migrated
            </summary>
            <remarks>
            Per default, indexes are migrated.
            </remarks>
            <value><c>True</c> if indexes are migrated. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckLength">
            <summary>
            Controls if length checks are performed during migration
            </summary>
            <remarks>
            Per default, column length settings are migrated.
            </remarks>
            <value><c>True</c> if column length differences are checked in migration. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckNulls">
            <summary>
            Controls if nullability checks are performed during migration
            </summary>
            <remarks>
            Per default, nullability settings are migrated.
            </remarks>
            <value><c>True</c> if column nullability differences are checked in migration. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckPK">
            <summary>
            Controls if primary key checks are performed during migration
            </summary>
            <remarks>
            Per default, primary keys are checked during migration.
            </remarks>
            <value><c>True</c> if primary key checks are made during migration. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckScale">
            <summary>
            Controls if column scale checks are performed during migration
            </summary>
            <remarks>
            Per default, column scale difference checks are made during migrations.
            </remarks>
            <value><c>True</c> if column scale differences are checked during migration. (Default: True)</value>
        </member>
        <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckType">
            <summary>
            Controls if column type checks are performed during migration
            </summary>
            <remarks>
            Per default, column type difference checks are made during migration.
            <para>
            When set to <c>False</c>, the types of the columns are not compared.
            </para>
            </remarks>
            <value><c>True</c> if column types are checked during migration.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.ITraceEvent">
            <summary>
            Interface for events generated by log tracing.
            </summary>
            <remarks>
            Instances of this class are used with the System.Diagnostics.Trace framework.
            The <see cref="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)"/>
            method is used for tracing; the first argument is an instance of ITraceEvent, 
            the category is set to the product name.
            <seealso cref="T:System.Diagnostics.Trace"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Name">
            <summary>
            Gets the name of the event.
            </summary>
            <remarks>
            Event names are in the form of module.action or level.module.action.
            </remarks>
            <value>Event name</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Description">
            <summary>
            Gets the description of the event.
            </summary>
            <remarks>
            Event descriptions contain the logical parameters of the performed action.
            </remarks>
            <value>Event description</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventType">
            <summary>
            Gets the internal numerical representation of the event type.
            </summary>
            <remarks>
            The returned internal value can be used to distinguish between events.
            </remarks>
            <value>Numerical value discriminating the type of the event</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventId">
            <summary>
            Gets the event instance identification.
            </summary>
            <remarks>
            During the creation of the event, an unique number is assigned to it.
            </remarks>
            <value>Numerical value for identification purposes</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ConnectionId">
            <summary>
            Gets the identification of the physical connection.
            </summary>
            <remarks>
            There is no general correspondence between physical connections and an user visible context.
            </remarks>
            <value>Connection discriminator value</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.StatementId">
            <summary>
            Gets the database statement identification.
            </summary>
            <remarks>
            The value returned identifies a driver statement.
            </remarks>
            <value>Statement discriminator value</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ResultId">
            <summary>
            Gets the database result set identification.
            </summary>
            <remarks>
            The value returned identifies a driver result set.
            </remarks>
            <value>Result set discriminator value</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ContextId">
            <summary>
            Gets the context identification.
            </summary>
            <remarks>
            The value returned identifies a pooled instance.
            </remarks>
            <value>Context id</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <remarks>
            In case an error was raised during the execution of a
            method, the error message can provide useful information. Note, that
            the error message format is driver and database specific.
            </remarks>
            <value>Error message</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FetchGroup">
            <summary>
            Gets the name of the fetch group used.
            </summary>
            <remarks>
            The value returned can be used to trace the fetch group resolution.
            </remarks>
            <value>Fetch Group name</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FieldName">
            <summary>
            Gets the name of the field causing lazy loading or modification.
            </summary>
            <remarks>
            The value returned can be used to obtain information about the 
            access pattern of the database.
            </remarks>
            <value>Field name</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Query">
            <summary>
            Gets the actual query string.
            </summary>
            <remarks>
            The value returned can be used to obtain insight in the 
            executed queries.
            </remarks>
            <value>Query expression</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Timestamp">
            <summary>
            Gets the start time (UTC).
            </summary>
            <remarks>
            Events are marked with a start time in UTC.
            </remarks>
            <value>Start Time of the event in UTC.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Duration">
            <summary>
            Gets the duration.
            </summary>
            <remarks>
            Events are marked with a duration if they are client/server actions.
            </remarks>
            <value>Duration of the event.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Information">
            <summary>
            Gets the information associated with this event (query, correlation, etc.)
            </summary>
            <remarks>
            Events usually have some properties associated with it like query string or correlation. 
            The information most important to the event can be accessed by this property.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ContextName">
            <summary>
            Gets the name of the context that caused this event.
            </summary>
            <remarks>
            The name of the context is available with the <see cref="P:Telerik.OpenAccess.OpenAccessContextBase.Name"/> property.
            </remarks>
            <value>Application controlled value</value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.BatchedStatements">
            <summary>
            Gets the number of batched statements in this event.
            </summary>
            <remarks>
            When statement batching is enabled by <see cref="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.StatementBatchingEnabled"/>,
            this property returns the number of batched statements with the same SQL.
            </remarks>
            <value>0, 1, n</value>
        </member>
        <member name="T:Telerik.OpenAccess.Diagnostics.TraceAdapter">
            <summary>
            Handler for all trace and debugging messages
            </summary>
            <remarks>
            This class contains a singleton <see cref="F:Telerik.OpenAccess.Diagnostics.TraceAdapter.Instance">instance</see>
            which is used by the runtime system to generate and control tracing and debugging
            messages.
            <para>
            See the example on how to use the configuration file to control the listeners (trace source)
            and amount of tracing generated (trace switch).
            </para>
            <para>
            For more information on tracing see also <see cref="T:System.Diagnostics.Trace"/>.
            </para>
            <para>
            The implementation of this class uses the WriteLine(x,"Telerik.OpenAccess") (.Net 1.1) and
            TraceEvent() and TraceData (.Net 2) methods.
            </para>
            </remarks>
            <example>
            <para>
            <code>
            &lt;configuration&gt;
              ...
              &lt;system.diagnostics&gt;
                &lt;sources&gt;
                  &lt;source name="Telerik.OpenAccess"&gt;
                    &lt;listeners&gt;
                      &lt;add type="System.Diagnostics.ConsoleTraceListener"/&gt;
                    &lt;/listeners&gt;
                  &lt;/source&gt;
                &lt;/sources&gt;
                &lt;switches&gt;
                  &lt;add name="Telerik.OpenAccess" value="Verbose" /&gt;
                &lt;/switches&gt;
              &lt;/system.diagnostics&gt;
              ...
            </code>
            </para>
            </example>
            <seealso cref="T:Telerik.OpenAccess.Diagnostics.ITraceEvent"/>
            <seealso cref="T:System.Diagnostics.TraceSwitch"/>
            <seealso cref="T:System.Diagnostics.DefaultTraceListener"/>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
        </member>
        <member name="F:Telerik.OpenAccess.Diagnostics.TraceAdapter.Instance">
            <summary>
            The instance used by all trace and debugging output.
            </summary>
            <remarks>
            This singleton provides the object used to handle all tracing and debugging
            messages and to control the level of tracing.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.ResetLevel(System.String)">
            <summary>
            Sets the level value to the specified one. 
            Allows you to set value lower than the current one (for example switching from "verbose" to "none" level).
            </summary>
            <remarks>
            Allowed friendly names include:
            <para>0 = none, off, false</para>
            <para>1 = error, critical</para>
            <para>2 = normal, warning</para>
            <para>3 = information</para>
            <para>4 = verbose</para>
            <para>5 = all</para>
            </remarks>
            <param name="newValue">The new value. Accept raw numeric values as well as their friendly names ("none", "error", "normal", "information", "verbose", "all" and etc.)</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError">
            <summary>
            Indicates whether error trace messages will be generated. 
            </summary>
            <remarks>
            'Critical' messages are treated as equal to 'Error' messages, so they are synonymous.
            </remarks>
            <returns>
            <c>True</c> when error trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error trace message.
            </summary>
            <remarks>
            The message will only be generated when the corresponding 
            <see cref="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">level</see> is configured.
            </remarks>
            <param name="msg">The format string.</param>
            <param name="o">An array of parameters or <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning">
            <summary>
            Indicates whether error or warning trace messages will be generated. 
            </summary>
            <remarks>
            When warning messages are enabled, error (critical) messages are enabled too.
            </remarks>
            <returns>
            <c>True</c> when warning trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning trace message.
            </summary>
            <remarks>
            The message will only be generated when the corresponding 
            <see cref="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">level</see> is configured.
            </remarks>
            <param name="msg">The format string.</param>
            <param name="o">An array of parameters or <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation">
            <summary>
            Indicates whether error, warning or information trace messages will be generated. 
            </summary>
            <remarks>
            When information messages are enabled, error (critical) and warning messages are enabled too.
            </remarks>
            <returns>
            <c>True</c> when information trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an information trace message.
            </summary>
            <remarks>
            The message will only be generated when the corresponding 
            <see cref="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">level</see> is configured.
            </remarks>
            <param name="msg">The format string.</param>
            <param name="o">An array of parameters or <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose">
            <summary>
            Indicates whether error, warning, information or verbose trace messages will be generated. 
            </summary>
            <remarks>
            When verbose messages are enabled, error (critical), warning and information messages are enabled too.
            </remarks>
            <returns>
            <c>True</c> when verbose trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose or debug trace message.
            </summary>
            <remarks>
            The message will only be generated when the corresponding 
            <see cref="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">level</see> is configured.
            </remarks>
            <param name="msg">The format string.</param>
            <param name="o">An array of parameters or <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.Trace(System.Int32,Telerik.OpenAccess.Diagnostics.ITraceEvent)">
            <summary>
            Writes an internal trace event message.
            </summary>
            <remarks>
            This method is not intended for customer use.
            </remarks>
            <param name="ev">The trace event to write. Must not be null.</param>
            <param name="lvl">The level (1=error,2=warning,3=info,4=verbose) of th event to write.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TimingInformation(System.String,System.Object[])">
            <summary>
            Prints timing information
            </summary>
            <remarks>
            <para>
            The timing information is printed directly to the debugger output window.
            </para>
            </remarks>
            <param name="fmt">The format of the string returned about the timing</param>
            <param name="args">The arguments passed to the formated string</param>
            Whether timing information is printed is controlled by the <c>Telerik.OpenAccess.Timing</c> trace switch.
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">
            <summary>
            Controls the amount of trace messages being generated. If the new level value is considered lower than the currently set no change will be performed.
            In order to set the level to a lower one please use <seealso cref="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.ResetLevel(System.String)"/> method.
            </summary>
            <remarks>
            <para>
            The level classifies the setting upon the severity of the message. The level
            can be set by the configuration file with a switch named "Telerik.OpenAccess". 
            </para>
            The level can also contain values greater than 
            4 (which stands for 'Verbose') in order to fine-control the level of verbosity.
            <seealso cref="T:System.Diagnostics.TraceSwitch"/>
            </remarks>
            <value>
            String value representing either the numerical value or one of the values
            'Off', 'Error' (here equal to 'Critical'), 'Warning', 'Information', 'Verbose'.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Tracing">
            <summary>
            Indicates whether any trace message will be generated.
            </summary>
            <remarks>
            This is identical to <see cref="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level"/> returning a value other than "0".
            </remarks>
            <value>
            <c>True</c> when trace messages are beeing generated, <c>False</c> otherwise.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Listeners">
            <summary>
            Gets the collection of listeners that is monitoring the trace output.
            </summary>
            <remarks>
            The listeners produce formatted output from the trace output. By default, the collection 
            contains an instance of the <see cref="T:System.Diagnostics.DefaultTraceListener"/> class. 
            If you want to remove the default listener, call the 
            <see cref="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)"/>
            method, and pass it the instance of the DefaultTraceListener. 
            <seealso cref="T:System.Diagnostics.DefaultTraceListener"/>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            </remarks>
            <value>
            A TraceListenerCollection that represents a collection of type TraceListener monitoring this trace output.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.LicensingException">
            <summary>
            The exception that is thrown when a required database license 
            is not available.
            </summary>
            <remarks>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the licensing problem.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.OpenAccessException">
            <summary>
            The base class of all Telerik.OpenAccess .NET specific exceptions.
            </summary>
            <remarks>
            All exceptions derived from this class can be 
            found in the <see cref="N:Telerik.OpenAccess.Exceptions"/> namespace.
            <para>
            Instances of this class can be serialized, but the serialization
            format can change at any time without further notice.
            </para>
            <seealso cref="N:Telerik.OpenAccess.Exceptions"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String)">
            <summary>
            Creates an instance with a given message; not intended for 
            application use.
            </summary>
            <remarks>
            Method is not intended to be used by the application and might
            disappear at any time without further notice.
            </remarks>
            <param name="msg">The message for this exception.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>	
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception[],Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.setFailed(Telerik.OpenAccess.IObjectId)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.setNative(Telerik.OpenAccess.Exceptions.IBackendError)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.setCanRetry(System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.OpenAccessException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <remarks>
            Returns a representation of the current exception that is intended 
            to be understood by humans and should therefore not be parsed.
            </remarks>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.InnerExceptions">
            <summary>
            Gets the exception(s) causing this exception to be thrown.
            </summary>
            <remarks>
            This property can be useful to determine the chain for
            errors leading to this exception.
            <para>
            A single inner exception will be retrievable from the
            <see cref="P:System.Exception.InnerException"/> property in
            future versions.
            </para>
            </remarks>
            <value>
            Array with causing exceptions, possibly of size 1 or <c>null</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.FailedObject">
            <summary>
            Gets the object ID of the object causing this exception.
            </summary>
            <remarks>
            The returned object ID is the database object identity for
            the object which caused this exception.
            <para>
            The returned IObjectId instance can be used with the
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> method
            to resolve the logical database ID to an object reference.
            </para>
            </remarks>
            <value>
            The representation of the object causing this exception or null
            if the object ID was not available.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.BackendError">
            <summary>
            Gets the database backend-specific error.
            </summary>
            <remarks>
            The returned <see cref="T:Telerik.OpenAccess.Exceptions.IBackendError"/>
            object
            can be used to obtain more backend-specific
            information, i.e. the backend error number and 
            an error description.
            <seealso cref="T:Telerik.OpenAccess.Exceptions.IBackendError"/>
            </remarks>
            <value>
            Database-backend specific error object.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.Reason">
            <summary>
            Gets the concrete error code for this exception.
            </summary>
            <remarks>
            The <see cref="T:Telerik.OpenAccess.OpenAccessException.Failure"/> enumeration provides fine-grained error
            detail codes which can be used to determine the exact cause
            of an exception.
            </remarks>
            <value>
            The exact cause for this exception.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.CanRetry">
            <summary>
            Indicates whether this exception is caused by a temporal problem.
            </summary>
            <remarks>
            This property is useful to decide, if the calling application
            can succeed when trying the same operation again. 
            <para>
            For example: If a lock conflict exists (LockNotGrantedException is
            thrown), the application would succeed after the lock has been
            released by the other transaction/application.
            </para>
            </remarks>
            <value>
            <c>True</c> if the application can try again and might succeed.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.OpenAccessException.HelpLink">
            <summary>
            Gets a link to the help file associated with this exception.
            </summary>
            <value>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
            </value>
            <remarks>
            This property will help the application developer to find information
            about a given error quickly.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.OpenAccessException.Failure">
            <summary>
            Fine-grained database error codes.
            </summary>
            <remarks>
            Values of this type are used by the 
            <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason">
            OpenAccessException.Reason</see> property to describe the
            exact cause of an exception.
            <seealso cref="T:Telerik.OpenAccess.OpenAccessException"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Runtime">
            <summary>
            General runtime error; see exception message and BackendError.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Parse">
            <summary>
            File parsing failure.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Unsupported">
            <summary>
            Unsupported option, operation or type.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidOperation">
            <summary>
            Operation is not possible in the current state/context.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionConflict">
            <summary>
            Object network uses more than one ObjectScope/Transaction.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DetachedObject">
            <summary>
            The object cannot be loaded because it is detached.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotEnhanced">
            <summary>
            The type of the object was not enhanced.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotPersistent">
            <summary>
            The object is not persistent in the database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseIsClosed">
            <summary>
            The database is not open.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.NoSuchObject">
            <summary>
            The object is already deleted.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidObjectId">
            <summary>
            The object ID is not correct.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DuplicateKey">
            <summary>
            An attempt was made to insert a duplicate key.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.CannotConvertObject">
            <summary>
            An object could not be converted from the 
            database format.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotFound">
            <summary>
            The database was not found.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotAccessible">
            <summary>
            The database was found, but is not accessible.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotAccessible">
            <summary>
            The object cannot be accessed; the object is 
            locked or the database
            is not opened for writing.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectLocked">
            <summary>
            The object is locked by another transaction.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ClassLocked">
            <summary>
            The type of the object is locked by another 
            transaction.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.OptimisticVerification">
            <summary>
            The object was modified by another transaction
             in the meantime.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Internal">
            <summary>
             An internal error has occurred.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.LicensingNotValid">
            <summary>
            The license is not valid.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionActive">
            <summary>
            The transaction is already running.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNesting">
            <summary>
            Attempt to use nested transaction, where 
            it is not supported.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionFailed">
            <summary>
            The transaction failed; possibly caused be 
            transaction validator.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNotActive">
            <summary>
            The transaction is not active (not running).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.HostnameUnresolvable">
            <summary>
            The Host name is incorrect.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.OperationTimedOut">
            <summary>
            A timeout has occured.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            <summary>
            The exception that is thrown when database access cannot be 
            granted due to a database authorization failure.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            <summary>
            The exception that is thrown when a persServiceNotificationistent object cannot be
            accessed by the current user due to database access rights management.
            </summary>
            <remarks>
            Access rights can be managed on persistent objects, therefore 
            single objects might be not accessible for the current user.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            <summary>
            The exception that is thrown when a communication failure with
            the database occures.
            </summary>
            <remarks>
            If the exception occured after successful opening of a database,
            it might be caused by several reasons:
            <list type="bullet">
            	<item>The network connection to the database server was 
            			broken.</item>
            	<item>The database server was shut down.</item>
            	<item>The computer of the database server was shut down.</item>
            </list>
            If the exception occured during opening of a database, it
            might be cause by using an invalid or no-longer-valid name
            of a server or by a configuration problem.
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            <summary>
            The exception that is thrown when a database storage failure
            occurs.
            </summary>
            <remarks>
            Exceptions of this type usually mean one of the following:
            <list type="bullet">
            	<item>The database and the schema do not match (the schema might
            	have evolved).</item>
            	<item>The database cannot be accessed/opened.</item>
            	<item>A administrative database operation was interrupted 
            	previously and needs to be redone.</item>
            	<item>The database is in an inconsistent state and requires 
            	attention.</item>
            </list>
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            <summary>
            The exception that is thrown when the database storage 
            could not be found.
            </summary>
            <remarks>
            This exception might be caused by several reasons:
            <list type="bullet">
            <item>The logical name of the database is wrong.
            <para>The name is case-sensitive.</para>
            </item>
            <item>The logical name of the database is mapped to 
            a wrong physical name. 
            </item>
            <item>The logical name of the server is wrong. 
            <para>Maybe the wrong database server is contacted.
            </para>
            </item>
            <item>The logical name of the server is mapped to a wrong
            name on the client side. 
            <para> Consult the configuration file.</para>
            </item>
            <item>The client used a physical name which is not valid
            any more on the server. 
            <para>Physical names should not be
            used as they limit flexibility and managability.
            </para>
            </item>
            <item>The database was deleted.
            </item>
            <item>Backslashes '\\' are not be understood by all
            operating systems in the same way, or there are
            too many of them (logical names will not contain them).
            </item>
            <item>The database you thought existed exists not.
            </item>
            </list>
            All mapped names are case-sensitive, only physical path names
            might be insensitive on case-insensitive file systems.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotFound"/> value.
            </para>
            This exception includes database request information in the
            Message property to be more useful when thrown.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.TransactionException">
            <summary>
            The exception that is thrown when a database transaction
            method fails.
            </summary>
            <remarks>
            The most common cause of this exception is an 
            <see cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">inactive transaction</see>.
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.TransactionFailedException">
            <summary>
            The exception that is thrown when a database transaction
            fails.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionFailed"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            <summary>
            The exception that is thrown when no active transaction
            was given for a database method requiring one.
            </summary>
            <remarks>
            The transaction is either already terminated or has been disposed.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNotActive"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.PersistenceException">
            <summary>
            The exception that is thrown when an object is not persistent.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            <summary>
            The exception that is thrown when a persistence-capable object
            was required but an instance of an unenhanced class was given.
            </summary>
            <remarks>
            This exception usually indicates a problem in the build process. 
            Presumably the <see cref="T:Telerik.OpenAccess.PersistentAttribute">
            [Persistent]</see> attribute was not used for the type of a 
            passed object
            or type enhancement after compilation was unsuccessful.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotEnhanced"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Object)">
            <summary>SPI</summary>
            <param name="o">An object of the not enhanced type</param> 
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException">
            <summary>
            The exception that is thrown when a persistent object was
            required but a transient instance was given.
            </summary>
            <remarks>
            This exception indicates, that an instance of a persistence-capable
            type was given, but the instance was not persistent (yet) where
            a persistent instance was required; the instance was transient.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotPersistent"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            <summary>
            The exception that is thrown when an persistent object
            could not be retrieved from the database.
            </summary>
            <remarks>
            This exception usually indicates on of the following conditions:
            <list type="bullet">
            <item>The persistent object was removed from the database.</item>
            <item>The object ID used to retrieve the persistent object is not
            a referring to a persistent object.</item>
            </list>
            Most likely, you are attempting to access an object that has been 
            deleted or has not been stored. This can happen if you delete 
            an object in the database but do not reset references to the 
            object.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.NoSuchObject"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(Telerik.OpenAccess.Exceptions.IBackendError)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ObjectConversionException">
            <summary>
            The exception that is thrown when a database object could not
            be accessed because an object conversion was required and failed.
            </summary>
            <remarks>
            The objects stored in the database must not be of the same 
            class version as the application requesting it. This leads to 
            a object conversion taking place, and this conversion can fail.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.CannotConvertObject"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
            <summary>
            Base exception for concurrency control failures.
            </summary>
            <remarks>
            This exception is the base class for 
            <see cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"/> and 
            <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConcurrencyControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            <summary>
            The exception that is thrown when a lock on a persistent object
            was not granted by the database.
            </summary>
            <remarks>
            This exception might be thrown when using pessimistic concurrency control.
            <para>
            When another transaction has the object already locked with
            a lock mode conflicting with the current request, this exception
            is thrown.
            </para>
            <para>
            This exception can be avoided when optimistic locking
            is used by the transactions; see 
            <see cref="T:Telerik.OpenAccess.ITransactionProperties"/>.
            </para>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectLocked"/> value.
            </para>
            <para>
            The object identifier string causing the exception can be retrieved
            from the <see cref="P:Telerik.OpenAccess.OpenAccessException.FailedObject"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.String,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            <summary>
            The exception that is thrown when a persistent object was stored
            concurrently.
            </summary>
            <remarks>
            This exception might be thrown when using optimistic concurrency control.
            <para>
            Optimistic verification is a process in which version stamps of persistent
            objects are compared. A conflict is detected, when a persistent object
            was modified by the application, but has already been altered in the
            database in the meantime by another application. Every modification will
            change the version stamp of the persistent object and can therefore be
            detected.
            </para>
            <para>
            This exception can occur as top-exception and as leaf-exception. In the
            top-exception case it provides access to a set of conflicting objects.
            In the leaf-exception case it provides access to a single object conflict.
            This means, an instance of this type might hold other instances of this
            type, when more than one object conflic was detected during optimistic 
            verification.
            </para>
            <para>
            The optimistic application has read an object and tries to 
            update the 
            database with its modifications but the object in the database
            was changed in the meantime by another transaction. This would
            cause application inconsistencies and therefore this exception
            is thrown.
            </para>
            <para>
            This exception can be avoided when pessimistic locking
            is used by the transactions; see 
            <see cref="T:Telerik.OpenAccess.ITransactionProperties"/>.
            </para>
            <para>
            This exception can be thrown by the <see cref="M:Telerik.OpenAccess.ITransaction.Commit">
            ITransaction.Commit</see> method.
            </para>
            <para>
            This exception can also be thrown by the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/> during the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> and
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)"/>
            methods, when concurrently changed objects are detected.
            In this case, the 
            <see cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)"/> 
            and 
            <see cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)"/> 
            methods can be used to determine the exact cause(s)	for this exception.
            </para>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.OptimisticVerification"/> value.
            </para>
            <para>
            To analyse the failed object(s) this pattern makes sense:
            <code>
            catch (Telerik.OpenAccess.Exceptions.OptimisticVerificationException e)
            {
                for (int i = 0; i &lt; e.NumberOfConflicts; i++)
                    Console.WriteLine("Conflicting Object: " + e.Conflict(i).FailedObject);
            }
            </code>
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String,System.Exception[])">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)">
            <summary>
            Returns the object ID of one database object causing this optimistic
            verification exception.
            </summary>
            <remarks>
            <para>
            The OptimisticVerificationException can be caused by one or more
            reasons. Each object causing a conflict can be determined 
            separately using this method with a valid <paramref name="index"/>.
            The number of sub-conflicts (and therefore objects with conflicts)
            can be obtained from the 
            <see cref="P:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.NumberOfConflicts"/>
            property.
            </para>
            <para>
            This method can be used to implement an application specific conflict 
            resolution protocol with the 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> 
            and
            <see cref="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)"/>
            methods.
            </para>
            <para>
            The same value can also be retrieved using the 
            <see cref="P:Telerik.OpenAccess.OpenAccessException.InnerExceptions"/> and
            <see cref="P:Telerik.OpenAccess.OpenAccessException.FailedObject"/> properties.
            </para>
            <seealso cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)"/>
            </remarks>
            <param name="index">The index of the sub-conflict.</param>
            <returns>The object ID of the object causing the 
            respective sub-conflict.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)">
            <summary>
            Returns a sub-exception which caused this optimistic 
            verification exception.
            </summary>
            <remarks>
            The OptimisticVerificationException can be caused by one or more
            reasons. Each reason can be determined separately using this
            method with a valid <paramref name="index"/>. The number of
            sub-conflicts can be obtained by the 
            <see cref="P:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.NumberOfConflicts"/>
            property.
            <para>
            This method can be used to implement an application specific 
            conflict resolution protocol with the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> 
            and
            <see cref="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)"/>
            methods.
            </para>
            <para>
            The same value can also be retrieved using the 
            <see cref="P:Telerik.OpenAccess.OpenAccessException.InnerExceptions"/> property.
            </para>
            <seealso cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)"/>
            </remarks>
            <param name="index">The index of the sub-conflict.</param>
            <returns> The OpenAccessException from the respective sub-conflict.</returns>		
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.NumberOfConflicts">
             <summary>
            	Gets the number of sub-conflicts causing this exception.
            	</summary>
             <remarks>
             The OptimisticVerificationException can be caused by one or more
             reasons. Each object causing a conflict can be determined
             separately using the
             <see cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)"/> 
             method; 
             each sub-conflict description is accessible with the
             <see cref="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)"/>
             method. 
             <para>
             This method can be used to implement an application specific conflict 
             resolution protocol with the 
             <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> 
             and
             <see cref="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)"/>
             methods.
             </para>
            </remarks>
             <value>The number of sub-conflicts causing this exception.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException">
            <summary>
            The exception that is thrown when an opened database was not provided.
            </summary>
            <remarks>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseIsClosed"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.InvalidObjectIdException">
            <summary>
            The exception that is thrown when an invalid object ID was used.
            </summary>
            <remarks>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidObjectId"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ParseException">
            <summary>
            The exception that is thrown when a runtime configuration
            file could not be successfully parsed.
            </summary>
            <remarks>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.Parse"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.String,System.String,System.Int32)">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ParseException.Location">
            <summary>
            Gets the name of the file that contains the error.
            </summary>
            <remarks>
            This property provides the name of the incorrect file.
            </remarks>
            <value>
            File name.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ParseException.LineNumber">
            <summary>
            Gets the line number of the error.
            </summary>
            <remarks>
            This property provides the line number of the error 
            in the incorrect file.
            </remarks>
            <value>
            Line number.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
            <summary>
            The exception that is thrown when an attempt was made to insert
            a duplicate value into an unique index. 
            </summary>
            <remarks>
            The <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/> failed and 
            the indexes are unchanged.
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.DuplicateKey"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.UnsupportedException">
            <summary>
            The exception that is thrown when an operation or option
            is not supported by the database backend or current 
            configuration.
            </summary>
            <remarks>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.Unsupported"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            <summary>
            The exception that is thrown when an operation is invalid
            in the current state of the database, transaction or object.
            </summary>
            <remarks>
            <para>
            This exception corresponds to the 
            <see cref="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidOperation"/> value.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.QueryException">
            <summary>
            The exception that is thrown when a database query is
            not correct.
            </summary>
            <remarks>
            This exception occures when the query string is invalid 
            (wrong syntax or unknown member name).
            <para>
            The <see cref="P:Telerik.OpenAccess.OpenAccessException.Reason"/> property
            can be used to determine the exact cause of the problem.
            </para>
            <para>Please refer to the OQL
            Reference Guide for more information about OQL.</para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException">
            <summary>
            The exception that is thrown when a configuration error occures.
            </summary>
            <remarks>
            The reason for this exception is most likely an absent, misspelled
            or inconsistent entry in the configuration file.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="serializationInfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.ErrorOccurred">
            <summary>
            Gets the underlying ConfigErrorType for this configuration exception .
            </summary>
            <remarks>
            Specifies the <see cref="T:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType"/> for this particular 
            configuration exception.
            </remarks>
            <value>A ConfigurationException.ConfigErrorType value.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.History">
            <summary>
            Gets a string representation of the events that resulted in this exception.
            </summary>
            <remarks>
            The value returned from this property can greatly help in identifying configuration issues.
            </remarks>
            <value>String representation of the configuration history.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <remarks>
            When a history of the events that lead to this exception is needed, the <see cref="P:Telerik.OpenAccess.Exceptions.ConfigurationException.History"/> propery can provide it.
            </remarks>
            <value>The error message that explains the reason for the exception.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.HelpLink">
            <summary>
            Gets a link to the help file associated with this exception.
            </summary>
            <value>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
            </value>
            <remarks>
            This property will help the application developer to find information
            about a given error quickly.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType">
            <summary>
            Specifies the type of configuration exception that has occurred.
            </summary>
            <remarks>
            Gives further information on the exact type of configuration exception that has
            occurred.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigSectionNotFound">
            <summary>
            The required section in the configuration was not found.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConnectionSectionWithSpecifiedIdMissing">
            <summary>
            The section given by ID was not found in the configuration.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.IncorrectDriverSpecified">
            <summary>
            The given driver name is not supported.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ErrorParsingConfigFile">
            <summary>
            There was an error while parsing the config file.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotFound">
            <summary>
            The given configuration file was not found.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotAuthorized">
            <summary>
            The given configuration file is not accessible with the current rights.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.MetadataException">
            <summary>
            The exception that is thrown when a metadata compilation error occurs.
            </summary>
            <remarks>
            This class is not intended for customer use.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implementation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.Finish">
            <summary>
            Helper method to resolve the message into its final string.
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ErrorId">
            <summary>Gets an identifying error number for this exception.</summary>
            <remarks>This property is not intended for customer use.</remarks>
            <value>Identifying error number</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ClassName">
            <summary>
            Gets the class name where the error occured; if it is not a class it is a table.
            </summary>
            <value>
            The class name where the error occured; if it is not a class it is a
            table.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FieldName">
            <summary>
            Gets the field name where the error occured.
            </summary>
            <value>The field name where the error occured.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.TableName">
            <summary>
            Gets the table name where the error occured.
            </summary>
            <value>The table name where the error occured.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ColumnName">
            <summary>
            Gets the column name where the error occured.
            </summary>
            <value>The column name where the error occured.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.AmbiguousValue">
            <summary>
            Gets the ambiguous value causing the error.
            </summary>
            <value>The ambiguous value causing the error.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.DisambiguatedValue">
            <summary>
            Gets the disambiguated value fixing the error.
            </summary>
            <value>The disambiguated value fixing the error.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FileName">
            <summary>
            Gets the file name where the error is caused.
            </summary>
            <value>The name of the File where the exception was thrown</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProjectName">
            <summary>
            Gets the project name where the error is caused.
            </summary>
            <value>The name of the Project where the exception was thrown</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IndexName">
            <summary>
            Gets the index name where the error is caused.
            </summary>
            <value>The name of the Index where the exception was thrown</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ConstraintName">
            <summary>
            Gets the constraint name where the error is caused.
            </summary>
            <value>The constraint name where the error is caused.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProcedureName">
            <summary>
            Gets the procedure name where the error is caused.
            </summary>
            <value>The method name where the error is caused.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.PreviousDefiner">
            <summary>
            Gets the name of the existing definer of an ambiguous name.
            </summary>
            <value>The exception data with the key of "PreviousDefiner"</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Context">
            <summary>
            Gets the context string
            </summary>
            <value>The context string</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Usage">
            <summary>
            Gets the indicator whether key or value are meant
            </summary>
            <value>The exception data with the key of "Usage"</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Column">
            <summary>
            Gets the column number.
            </summary>
            <value>The column number.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Line">
            <summary>
            Gets the line number.
            </summary>
            <value>The number of the current line</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IsWarning">
            <summary>
            Indicates a warning.
            </summary>
            <value>True if the exception is a warning; otherwise false</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.HelpKeyword">
            <summary>
            Gets the help keyword available with this error.
            </summary>
            <value>The keyword by which you can search the exception in the help</value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Message">
            <summary>
            Gets the custom exception message.
            </summary>
            <value>The exception message</value>
        </member>
        <member name="T:Telerik.OpenAccess.Exceptions.IBackendError">
            <summary>
            Description of a backend-specific error.
            </summary>
            <remarks>
            <para>
            The IBackendError interface provides a backend-specific error number
            and error description. 
            </para>
            <para>
            In case of a backend error, an IBackendError object can be
            obtained from the <see cref="P:Telerik.OpenAccess.OpenAccessException.BackendError"/>
            property. 
            </para>
            <seealso cref="P:Telerik.OpenAccess.OpenAccessException.BackendError"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Description">
            <summary>
            Gets the database backend-specific error description.
            </summary>
            <remarks>
            The value returned can be used to obtain the exact 
            backend-specific error information.
            </remarks>
            <value>
            Error description provided by the backend.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Number">
            <summary>
            Gets the database backend-specific error number.
            </summary>
            <remarks>
            The value returned can be used to obtain the exact 
            backend-specific error information.
            </remarks>
            <value>
            The database backend-specific error number.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.ObjectId">
            <summary>
            Gets the object id of the object causing the backend error.
            </summary>
            <remarks>
            If no object id can be extracted from the error description,
            null is returned.
            </remarks>
            <value>
            The object id of the object related with the error. 
            The value might be null.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.FetchGroupCollector">
            <summary>
            Provides methods to calculate the object network of a root object.
            </summary>
            <remarks>
            <para>This class implements the <see cref="T:Telerik.OpenAccess.IObjectCollector"/> interface.
            It calculates the object network, starting from the 
            'root object' specified in the <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)"/> method. Fetch groups can 
            be used to specify which object members will be loaded while resolving the
            object network.
            </para>
            <para>
            This class can be used in conjunction with the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/> to fill it with a customized 
            network of persistent objects.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IObjectCollector">
            <summary>
            Interface for obtaining entire network of persistent objects.
            </summary>
            <remarks>This interface can be used to obtain a list of 'persistence capable'
            objects which are reachable from the 'root object', specified in the 
            <see cref="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Object)"/> method. 
            <para>Implementations of this interface are provided in the form of 
            the <see cref="T:Telerik.OpenAccess.FetchGroupCollector"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Object)">
            <overloads>
            When implemented by a class, calculates and returns a list of all 
            'persistence capable' objects reachable from the 'rootObject(s)'.
            </overloads>
            <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObject'.
            </summary>
            <param name="rootObject">The root object of the object network to be 
            calculated.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> that exposes the enumerator for 
            the objects collected.
            </returns>
            <remarks>The objects collected by this method should be of 
            'persistence capable' classes.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Collections.IEnumerator)">
            <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObjects'.
            </summary>
            <param name="rootObjects">Enumerator for the root objects.Object network for
            each root object will be calculated.
            </param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> that exposes the enumerator for 
            the objects collected.
            </returns>
            <remarks>The objects collected by this method should be of 
            'persistence capable' classes.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchGroupCollector.DefaultFetchGroup">
            <summary>
            Used to specify that the 'Default' fetch group is to be used 
            in the Collect method.
            </summary>
            <remarks>Use this value in a call to the <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)"/> method to 
            specify that all the fields in the 'Default' fetch group will be loaded while 
            loading an object in memory.
            <para>For more information on Fetch groups refer to the Programmer's Guide.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchGroupCollector.DeepFetchGroup">
            <summary>
            Used to specify that the 'Deep' fetch group is to be used 
            in the Collect method.
            </summary>
            <remarks>Use this value in a call to the <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)"/> method 
            to specify that the 'Deep' fetch group is to be used while loading an 
            object in memory. 
            <para>The 'Deep' fetch group specifies that while loading an object in memory, all
             objects referenced from this given object will also be resolved and loaded in memory.
             This algorithm is applied recursively. 
            </para>
            <para>For more information on Fetch groups refer to the Programmer's Guide.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchGroupCollector.DependFetchGroup">
            <summary>
            Used to specify that the 'Depend' fetch group is to be used 
            in the Collect method.
            </summary>
            <remarks>Use this value in a call to the <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)"/> method to 
            specify that the 'Depend' fetch group is to be used while loading an 
            object in memory. 
            <para>The 'Depend' fetch group specifies that while loading an object in
            memory, only members that have the <see cref="T:Telerik.OpenAccess.DependAttribute"/> specified will 
            be loaded. This algorithm is applied recursively.
            </para>
            <para>For more information on Fetch groups refer to the Programmer's Guide.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor">
            used by Closure
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor(System.String)">
            <summary>
            Initializes a new instance of FetchGroupCollector.
            </summary>
            <param name="fetchGroupName">Name of the fetch group to use while
            calculating the object network in a call to <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)"/>.
            </param>
            <remarks>Use an object of this class in a call to 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/> to obtain the object network for a
            given root object(s).
            <para>Pre-defined fetch groups can be used in a call to this constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)">
            <overloads>
            Calculates and returns a list of all 'persistence capable' objects reachable from the 
            'rootObject(s)'.
            </overloads>
             <summary>
             Calculates the object network starting from the persistent root object. 
             </summary>
             <param name="rootObject">The root object of the object network to be
             calculated.</param>
             <returns>An <see cref="T:System.Collections.IEnumerable"/> that exposes the enumerator for 
            the objects collected.
             </returns>
             <remarks>
             <para>
             The fetch group specified in the constructor will be used to calculate
             the object network for the 'rootObject'.
             </para>
             <para>The root object must be of a persistence-capable class.
             </para>
             </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Collections.IEnumerator)">
             <summary>
             Calculates the object network for each of the specified persistent root objects.
             </summary>
             <param name="rootObjects">The enumerator for the root objects.</param>
             <returns>An <see cref="T:System.Collections.IEnumerable"/> that exposes the enumerator for 
            the objects collected.
             </returns>
             <remarks>
             <para>
             The fetch group specified in the constructor will be used to calculate
             the object network for the 'rootObjects'.
             </para>
             <para>The root objects must be of a persistence-capable class.
             </para>
             </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IFilteringClosure">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.GetEnumerator">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.GetRoots">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.GetCount">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.IsSynchronized">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.GetSyncRoot">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.CopyTo(System.Array,System.Int32)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFilteringClosure.Calculate(System.Collections.IEnumerator)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.FetchPlan">
            <summary>
            Interface for setting and changing the actual FetchPlan.
            </summary>
            <example>
            This example shows how to remove the default FetchGroup and add
            a specific FetchGroup that retrieves a Person always together 
            with the address.
            <code>
            IObjectScope scope = Database.Get(URL).GetObjectScope();
            
            scope.FetchPlan.Add("Person with Address");
            scope.FetchPlan.Remove(FetchPlan.Default);
            scope.FetchPlan.MaxDepth = 2;
            
            scope.GetOQLQuery("...
            </code>
            </example>
            <remarks>
            <para>
            The FetchPlan is an array of strings. Every string represents 
            a collection of fields as defined by the named FetchGroups. 
            The FetchGroups are defined on class and field level. 
            </para>
            <para>
            There are two special FetchGroup names:
            </para>
            <para>
            <c>FetchPlan.Default</c> names the default mechanism that is defined over
            the field types and the 
            <see cref="T:Telerik.OpenAccess.DefaultFetchGroupAttribute">[DefaultFetchGroup(true|false)]</see>
            attribute.
            </para>
            <para>
            <c>FetchPlan.All</c> names all fields of an object including referenced objects 
            one level deep.
            </para>
             <para>
             It is recommended to use symbolic constants for the names of the FetchGroups.
             This avoids hard to find problems with misspelled values.
             </para>
             <para>
             The currently active FetchPlan instance can be obtained from the
             <see cref="P:Telerik.OpenAccess.IObjectScope.FetchPlan">IObjectScope.FetchPlan</see> property.
             </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.DefaultFetchGroupAttribute"/>
        </member>
        <member name="F:Telerik.OpenAccess.FetchPlan.Default">
            <summary>
            Default FetchGroup name definition.
            </summary>
            <remarks>
            The FetchPlan.Default string is always part of the FetchPlan unless you remove
            it explicitly or call <see cref="M:Telerik.OpenAccess.FetchPlan.Clear"/>.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchPlan.All">
            <summary>
            Maximum FetchGroup name definition.
            </summary>
            <remarks>
            The FetchPlan.All string has to be used very careful. All fields of an object are 
            fetched together, including the referenced objects one level deep.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth">
            <summary>
            Default value for maximum fetch depth.
            </summary>
            <remarks>
            Defines the default maximum tree depth that is fetched together. 
            This controls the initial value of the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">MaxDepth</see> 
            property.
            <para>
            Currently, the value <c>3</c> is used for this constant.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchPlan.NoLimit">
            <summary>
            Unlimited retrieval of objects in one fetch operation.
            </summary>
            <remarks>
            Defines that there is no restriction on the number of objects that 
            can be fetched together.
            This value can be used with the <see cref="P:Telerik.OpenAccess.FetchPlan.Limit"/> 
            property. 
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.FetchPlan.DefaultLimit">
            <summary>
            Default value for retrieval of objects in one fetch operation.
            </summary>
            <remarks>
            Defines the amount of objects that 
            can be fetched together.
            This is also the initial value of the <see cref="P:Telerik.OpenAccess.FetchPlan.Limit"/> 
            property. The default is internally set to 50 or to the <see cref="P:Telerik.OpenAccess.IQuery.MaxResultCount"/>
            value if this is set.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>
            This constructor is for internal use.
            <seealso cref="M:Telerik.OpenAccess.FetchPlan.#ctor(System.String[],System.Int32,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.#ctor(System.String[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <example>
            <para>
            This example shows how to define a new FetchPlan and use it for future queries on the scope.
            The new FetchPlan definition contains 3 fetchgroups and a MaxDepth of 4 with no limit on the
            number of objects fetched. 
            </para>
            <para>
            The user can further modify the FetchPlan definition by calling methods like Add,Remove etc on the 
            FetchPlan object.
            </para>
            <code>
            IObjectScope scope = Database.Get(URL).GetObjectScope();
            
             //Define a new FetchPlan
            FetchPlan fetchPlan = new FetchPlan(new string[] { "FG_Orders", "FG_OrderDetails", "FG_Customers"},
            4, FetchPlan.NoLimit);
             
             //Replace the existing FetchPlan with the new one
            scope.FetchPlan = fetchPlan;
            
            scope.GetOQLQuery("...
            </code>
            </example>
            <param name="fetchGroups">
            The FetchGroup array consists of FetchGroup name that has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
            <param name="maxDepth">
            Controls the maximum tree depth for an object to be fetched.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">MaxDepth</see> 
            property.
            </param>
            <param name="limit">
            Value for retrieval of objects in one fetch operation.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.Limit">Limit</see>  
            property. 
            </param>
            <remarks>
            FetchGroups can include other FetchGroups.
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            <seealso cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth"/>
            <seealso cref="P:Telerik.OpenAccess.FetchPlan.Limit"/> 
            </remarks> 
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.Add(System.String)">
            <summary>
            Adds a FetchGroup name to the actual FetchPlan definition.
            </summary>
            <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
            <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Add("grp1").Add("grp2")...</c> several times.
            </returns>
            <remarks>
            The FetchPlan is used until the end of the operation. On scope level until
            you Dispose the IObjectScope object.
            <para>
            It is recommended to use symbolic constants for the names of the FetchGroups.
            This avoids hard to find problems with misspelled values.
            </para>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.Remove(System.String)">
            <summary>
            Removes a FetchGroup name from the actual FetchPlan definition.
            </summary>
            <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
            <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Remove("grp1").Remove("grp2")...</c> several times.
            </returns>
            <remarks>
            The FetchPlan is used until the end of the operation. On scope level until
            you Dispose the IObjectScope object.
            <para>
            It is recommended to use symbolic constants for the names of the FetchGroups.
            This avoids hard to find problems with misspelled values.
            </para>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.Clear">
            <summary>
            Clears the actual FetchPlan definition.
            </summary>
            <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Clear().Add("grp1").Add("grp2")...</c> several times.
            </returns>
            <remarks>
            The FetchPlan is cleared completly and the <c>FetchPlan.Default</c> FetchGroup
            is also removed! If you need this you have to add it again.
            The FetchPlan is used until the end of the operation. On scope level until
            you Dispose the IObjectScope object.
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            <seealso cref="F:Telerik.OpenAccess.FetchPlan.Default"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String)">
            <summary>
            Replaces the actual FetchPlan by a single FetchGroup name.
            </summary>
            <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
            <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set("grp0").Add("grp1").Add("grp2")...</c> several times.
            </returns>
            <remarks>
            If you want to use one specific FetchGroup name. This is simliar to call
            <c>scope.FetchPlan.Clear().Add(groupName)</c>
            <para>
            It is recommended to use symbolic constants for the names of the FetchGroups.
            This avoids hard to find problems with misspelled values.
            </para>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String[])">
            <summary>
            Replaces the actual FetchPlan by an string array of FetchGroup names.
            </summary>
            <param name="groupNames">
            The FetchGroup names has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
            <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set(groupName).Add("grp1").Remove("grp2")...</c> several times.
            </returns>
            <remarks>
            You can make a copy of your FetchPlan definition by calling <c>Groups</c>
            and <c>Set</c> that Group later.
            <para>
            It is recommended to use symbolic constants for the names of the FetchGroups.
            This avoids hard to find problems with misspelled values.
            </para>
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.GetGroupNames">
            <summary>
            Gets the actual FetchPlan definition.
            </summary>
            <remarks>
            You can make a copy of your FetchPlan definition by calling <c>GetGroupNames</c>
            and <c>Set</c> that Group later.
            <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
            </remarks>
            <returns>
            The FetchGroup names have to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.FetchPlan.ToString">
            <summary>
            Returns a string that represents the current FetchPlan.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current FetchPlan.
            </returns>           
        </member>
        <member name="P:Telerik.OpenAccess.FetchPlan.Limit">
            <summary>
            Controls the maximum number of objects that can be fetched together.
            </summary>
            <remarks>
            The default value is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultLimit"/>. 
            If you are traversing a 
            very big tree, you can specify a FetchPlan that retrieves the complete tree and 
            only limit the number of objects by this value.
            <seealso cref="F:Telerik.OpenAccess.FetchPlan.NoLimit"/>
            </remarks>
            <value>
            An integer <c>&gt;=0</c>. 0 means no limit! The default value is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultLimit"/>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.FetchPlan.MaxDepth">
            <summary>
            Controls the maximum tree depth that is fetched together.
            </summary>
            <remarks>
            The value must be <c>&gt;=1</c>. 
            <para>
            If you want to fetch a deep tree, you have to
            set the <c>MaxDepth</c> and also the <c>Depth</c> argument at the 
            <see cref="P:Telerik.OpenAccess.FetchFieldAttribute.Depth">[FetchField(groupName,Depth=3)]</see>
            attribute.
            </para>
            <para>
            The maximum possible value depends on the database server and the class hierarchy depth 
            and is bound by the number of SQL joins required!
            </para>
            </remarks>
            <value>
            An integer <c>&gt;=1</c>. Default is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth"/>. 
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.IDataObjectKey">
             <summary>
             The IDataObjectKey can be used to bind objects with internal id or version field to web ui elements.
             </summary>
             <remarks>
             <para>
             The web ui controls are complete disconnected. The problem with changed data is that Telerik Data Access
             needs the information to which object the changes belongs. To do so Telerik Data Access offers this interface that
             you have to implemented on all classes that you want to bind. It can also be implemented on a common base class.
             </para>
             <para>
             Example implementing the interface on a Person class:
             <code>
             [Persistent]
             class Person : IDataObjectKey
             {
                 [DataObjectField(true)]
                 public string DataObjectKey
                 {
                     get { return Telerik.OpenAccess.DataObjectKey.Obtain(this); }
                 } 
            
                 private string name;
                 public string Name
                 {
                     get { return name; }
                     set { name = value; }
                 }
             }
             </code>
             </para>
             </remarks>
             <seealso cref="P:Telerik.OpenAccess.IDataObjectKey.DataObjectKey"/>
        </member>
        <member name="P:Telerik.OpenAccess.IDataObjectKey.DataObjectKey">
            <summary>
            Returns a string representation of the id and version fields
            </summary>
            <remarks>
            Exactly this code should bed used:
            <code>
            public string DataObjectKey
            {
                get { return Telerik.OpenAccess.DataObjectKey.Obtain(this); }
            } 
            </code>
            </remarks>
            <seealso cref="P:Telerik.OpenAccess.IDataObjectKey.DataObjectKey"/>
            <value>The id and version fields</value>
        </member>
        <member name="T:Telerik.OpenAccess.DataObjectKey">
            <summary>
            Id and version handling
            </summary>
            <remarks>
            <para>
            Static functions to use a string representaion containing id and version information. This 
            helps to reload and check data in a disconnected scenario.
            </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.IDataObjectKey"/>
            <value>string representation of the id and version fields</value> 
        </member>
        <member name="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)">
            <summary>
            Gets the string representaion of id and version information
            </summary>
            <remarks>
            <para>
            If it is necessary to store the id and actual version information in a disconnected way, 
            use this function. It is helpful binding data to disconnected ui elements.
            </para>
            <para>
            Use <see cref="M:Telerik.OpenAccess.DataObjectKey.Check(System.String,Telerik.OpenAccess.IObjectContext)"/> to retrieve the checked object later.
            </para>
            </remarks>
            <param name="persistenceCapable"> The persistent object.</param>
            <returns>String representation of id and version.</returns>
            <seealso cref="T:Telerik.OpenAccess.IDataObjectKey"/>
        </member>
        <member name="M:Telerik.OpenAccess.DataObjectKey.Check(System.String,Telerik.OpenAccess.IObjectContext)">
            <summary>
            Retrieves an objects and checks the database version against the given version
            </summary>
            <remarks>
            <para>
            Generate the key by calling <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)"/> first. 
            </para>
            <para>
            The object will be fetched from
            the database or container and the version information will be checked.
            </para>
            </remarks>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object has been delete in the meantime.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
            The object has been changed in the meantime.
            </exception>
            <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)"/>.</param>
            <param name="objectContext">The <see cref="T:Telerik.OpenAccess.IObjectScope"/> or <see cref="T:Telerik.OpenAccess.ObjectContainer"/> to load the data from.</param>
            <returns>The persistent object.</returns>
            <seealso cref="T:Telerik.OpenAccess.IDataObjectKey"/>
        </member>
        <member name="M:Telerik.OpenAccess.DataObjectKey.Interpret(System.String,System.String@)">
            <summary>
            Generates an IObjectId instance from the key and gives back the version information.
            </summary>
            <remarks>
            <para>
            For internal use. If the version field is visible in the class it can be compared against the out parameter value.
            This function can be used to update the object even if the version information does not allow it.
            </para>
            </remarks>
            <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)"/>.</param>
            <param name="version">Out parameter that gives back the version information from the key.</param>
            <returns>An <see cref="T:Telerik.OpenAccess.IObjectId"/> instance that can be used to load the real object.</returns>
            <seealso cref="T:Telerik.OpenAccess.IDataObjectKey"/>
        </member>
        <member name="T:Telerik.OpenAccess.IDBObjectEnumerator">
            <summary>
            Interface for enumerators on persistent database objects.
            </summary>
            <remarks>
            <para>
            In general, instances of this type will work using the database
            object ID.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IMovableEnumerator">
            <summary>
            Interface for enumerator objects which can be positioned freely.
            </summary>
            <remarks>
            <para>
            Instances of this type need to be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>
            to release the resources used.
            </para>
            <para>
            Instances of this type can be obtained from the 
            <see cref="M:Telerik.OpenAccess.IQueryResult.GetEnumerator"/> method.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IDBObjectEnumerator"/>
            <seealso cref="T:System.Collections.IEnumerator"/>
            <seealso cref="T:System.IDisposable"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)">
            <summary>
            Moves the enumerator forwards or backwards by a specified
            number of elements.
            </summary>
            <param name="relative">If greater <c>0</c>, the enumerator
            is moved forwards by the specified number of elements. 
            If less than <c>0</c>, the enumerator is moved backwards.</param> 
            <remarks>
            If the enumerator cannot be positioned, <c>false</c> is returned
            and the position of the enumerator is undefined. The current
            object will be undefined as well. This might occur when
            the resulting position would be before the beginning or behind
            the end of the underlying collection.
            </remarks>
            <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to an 
            object; <c>false</c> if the enumerator could not be positioned.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.IMovableEnumerator.MoveToEnd">
            <summary>
            Moves the enumerator behind the last object.
            </summary>
            <remarks>
            The enumerator will be positioned at a virtual position and the
            next action needs to be <see cref="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)">Move(-1)</see> to access
            the last object.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IMovableEnumerator.Count">
            <summary>
            Returns the number of objects of the underlying source 
            of this enumerator.
            </summary>
            <remarks>The number might change independently when other
            transactions modify the database concurrently.</remarks>
            <value>Number of objects.</value>
        </member>
        <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(System.Object)">
            <summary>
            Moves the enumerator to the specified persistent object.
            </summary>
            <remarks>
            If the enumerator cannot find the object, the position will
            be changed to a virtual position between two objects and is 
            therefore not defined; 
            the current object will also be undefined. In general, you will
            need to position further using the 
            <see cref="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)"/> method.
            The next object returned will
            be the object behind (in direction towards the end) the object
            searched if Move(1) is used. If Move(-1) is used, the previous
            object is returned. The same holds true if the beginning or end
            of the underlying collection is reached.
            <para>
            If the enumerator cannot find the value, the possible reasons
            are:
            <list type="bullet">
            <item>The object has been deleted in the mean time.</item>
            <item>The object was not stored yet.</item>
            </list>
            </para>
            </remarks>
            <param name="persistentObject">
            The persistent object to move to.</param>
            <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to the
            object (the object was found); <c>false</c> if the enumerator 
            could not be positioned.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(Telerik.OpenAccess.IObjectId)">
             <summary>
             Moves the enumerator to the persistent object with the specified
             database object id.
             </summary>
             <param name="oid">The id of the persistent object to move to.
            </param>
             <remarks>
             If the enumerator cannot find the oid value, the position will
             be changed to a virtual position  between two objects and is 
             therefore not defined; 
             the current object will also be undefined. In general, you will
             need to position further using the 
             <see cref="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)"/> method.
             The next object returned will
             be the object behind (in direction towards the end) the object
             searched if Move(1) is used. If Move(-1) is used, the previous
             object is returned. The same holds true if the beginning or end
             of the underlying collection is reached.
             <para>
             If the enumerator cannot find the value, the possible reasons
             are:
             <list type="bullet">
             <item>The object has been deleted in the mean time.</item>
             <item>The object was not stored yet.</item>
             </list>
             </para>
             </remarks>
             <returns>Returns <c>true</c> if the enumerator was 
             successfully moved to the
             object (the object was found); <c>false</c> if the enumerator 
             could not be positioned.
             </returns>
        </member>
        <member name="T:Telerik.OpenAccess.IInstanceCallbacks">
             <summary>Interface that provides callback methods 
             for life cycle events of persistent objects.
            </summary>
            <remarks>
            <para>
             Persistence-capable classes which include non-persistent 
             fields whose values depend
             on the values of persistent fields require callbacks on specific
             life cycle events in order to correctly populate the
             values of these fields.
             </para>
            	<para>
             This interface defines the methods executed
             by the <see cref="T:Telerik.OpenAccess.IObjectScope"/> for these life cycle events.
             The 
             persistent object must implement
             the <see cref="T:Telerik.OpenAccess.IInstanceCallbacks"/> methods to get called back.
             </para>
             <para>
             When used in conjunction with an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> object
             context, no instance callbacks are generated currently.
             </para>
             <see cref="T:Telerik.OpenAccess.IObjectScope"/>
             </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PostLoad">
            <summary>
            Called after the persistent values are loaded from 
            the database into this instance.
            </summary>
            <remarks>
            Transient fields should be initialized in this method.
            The context in which this call is made does not allow access to 
            other persistent instances.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreRemove(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Called before the instance is removed.
            </summary>
            <remarks>
            This method is called before the state transitions to 
            'removed' during <see cref="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)"/>
            Access to field values within this call 
            are valid. Access to field values after this call are disallowed. 
            </remarks>
            <param name="objectScope">The object scope where the change 
            occures.</param>
        </member>
        <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreStore">
            <summary>
            Called before the values are stored from this instance to the
            database.
            </summary>
            <remarks>
            Database stored (persistent) fields that might have been 
            affected by modified non-persistent fields should be updated 
            in this method.
            <seealso cref="M:Telerik.OpenAccess.IObjectContext.MakeDirty(System.Object,System.String)"/>
            <seealso cref="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)"/>
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.InitOperation">
            <summary>
            Describes the reason why transient fields were initialized.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.Constructed">
            <summary>
            Object was constructed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.Hollow">
            <summary>
            Object was hollowed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.Refresh">
            <summary>
            Object was refreshed.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.Retrieve">
            <summary>
            Object was retrieved.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.CopyFrom">
            <summary>
            Object was copied into ObjectContainer.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.InitOperation.Apply">
            <summary>
            Object from ObjectContainer was applied.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IInitializeTransients">
            <summary>
            Interface that provides a callback when data is fetched or invalidated.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IInitializeTransients.InitializeTransients(Telerik.OpenAccess.InitOperation)">
            <summary>
            Called when transient fields of an object are to be initialized.
            </summary>
            <remarks>
            The callback is called whenever data for this specific instance was fetched. 
            This means that a query or FetchPlan that returns already loaded data can also
            invoke this call. The code should keep information about the call history to 
            initialize the transient fields only if necessary.
            </remarks>
            <param name="initOperation">The reason why the initialization is required.</param>
        </member>
        <member name="T:Telerik.OpenAccess.IObjectContext">
            <summary>
            Common interface of IObjectScope and ObjectContainer.
            </summary>
            <remarks>
            <para>
            This interface lists all common database object operations 
            for <see cref="T:Telerik.OpenAccess.IObjectScope"/> and <see cref="T:Telerik.OpenAccess.ObjectContainer"/>.
            </para>
            <para>
            Methods executed on an <see cref="T:Telerik.OpenAccess.IObjectScope"/> will be bound 
            to the
            transaction boundaries and will affect the state in the database
            when the transaction is <see cref="M:Telerik.OpenAccess.ITransaction.Commit">committed</see>,
            whereas methods of an <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
            do not obey transactions (as there is no transaction concept in the
            ObjectContainer - offline usage intended) and will not alter the
            state of the persistent objects in the database directly.
            </para>
            <para>
            An <see cref="T:Telerik.OpenAccess.ObjectContainer"/> cannot dynamically resolve a 
            <see cref="T:Telerik.OpenAccess.IObjectId">database object ID</see> when the persistent
            object is not contained in the container.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/> 
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)">
            <summary>
            Marks an object of a persistence-capable class to be added to
            the database context. 
            </summary>
            <remarks>
            <para>
            Assigns a new <see cref="T:Telerik.OpenAccess.IObjectId">database object ID</see> to 
            the instance and
            transitions it to persistent-new.
            </para>
            <para>
            After calling this method, the added object will have 
            a database object ID
            which can be retrieved using 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/>.
            </para>
            <para>
            The instance will be accessible by queries 
            or by <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> with the
            assigned object ID.
            </para>
            <para>
            The instance will be put into the database at a successful
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/>
            of the current transaction.
            The closure of instances of persistent classes
            reachable from persistent
            fields will be made persistent at commit. This is also known as 
            persistence-by-reachability.
            </para>
            <para>
            Only instances of persistence-capable classes can be added to
            an IObjectContext.
            </para>
            <para>
            A class is made persistence-capable using the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
            attribute and the Telerik.OpenAccess .NET enhancer.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <para>
            The persistence capable object can be added a second time to the
            same IObjectContext without exception (it's not an error, but also
            unnecessary).
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            </para>
            <para>
            An instance of a persistence capable class can belong to only
            one IObjectContext at a given time.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistenceCapableObject">Instance of a persistence 
            capable class. It can also be an IEnumerable of objects to add.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistenceCapableObject"/> was not marked as 
            [Persistent] or was not enhanced.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)">
             <summary>
             Marks an object from this context as 'deleted' and to be
             removed from the database.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
             that it be called
             in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
             </para>
             <para>
             Objects marked as 'deleted'
             will be deleted from the database later during 
             <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/> (IObjectScope) or
             will be marked as deleted
             in the target context during 
             <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> (ObjectContainer).
             </para>
             <para>
             Unlike the <see cref="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)"/> method, which makes the closure 
             of the instance persistent,
             the closure of the persistent object is not deleted from the 
             database and objects will be deleted 'flat' only.
             </para>		
             <para>
             Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)"/> when
             using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
             </para>
             <para>
             This method has no effect if the persistent object is already 
             removed in the current transaction.
             </para>
             <seealso cref="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
             </remarks>
             <param name="persistentObject">Persistent object which 
             must be known to the context before. It can also be an IEnumerable of objects to remove.</param>
             <exception cref="T:Telerik.OpenAccess.OpenAccessException">Instance not known in this context 
             (is transient or managed by
             another object context).</exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             The type of <paramref name="persistentObject"/> was not marked as 
             [Persistent] or is not enhanced.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.MakeDirty(System.Object,System.String)">
            <summary>
            Marks a field of an object from this context manually as 'dirty' and to be updated
            in the database context. Must be called before modifications occur.
            </summary>
            <remarks>
            <para>
            Change tracking is normally done automatically. That means, that
            any writing access to a field of a persistent object will mark the
            persistent object as dirty; this will cause the update of the values
            of the persistent object in the database.
            </para>
            <para>
            This method must be called BEFORE the modifications occur.
            </para>
            Object fields marked as 'dirty'
            will be stored later during 
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/> (IObjectScope) or
            will be modified
            in the target context during 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> (ObjectContainer).
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.MakeDirty(System.Object,System.String)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.MakeDirty(System.Object,System.String)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistentObject">The object that should 
            be marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
            <param name="fieldName">The field that should 
            be marked as dirty.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent]
            or is not enhanced.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.IsDirty(System.Object)">
            <summary>
            Indicates whether the state of a persistent object in 
            this context is 'dirty' / to be updated.
            </summary>
            <remarks>
            <para>
            A persistent object is of dirty state when the value of at least 
            one persistent field was changed. When the current transaction 
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit">commits</see>, the database will 
            be updated with the changed values.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistentObject">The object to be checked.</param>
            <returns><c>true</c> if the object was modified (marked as dirty); 
            <c>false</c> otherwise.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.IsDirty(System.Object,System.String)">
            <summary>
            Indicates whether the state of a field of a persistent object in 
            this context is 'dirty' / to be updated.
            </summary>
            <remarks>
            <para>
            A field is of dirty state when the value of the
             persistent field was changed. When the current transaction 
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit">commits</see>, the database will 
            be updated with the changed values.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object,System.String)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object,System.String)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistentObject">The object to be checked.</param>
            <param name="fieldName">The name of the field to be checked</param>
            <returns><c>true</c> if the object was modified (marked as dirty); 
            <c>false</c> otherwise.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.IsRemoved(System.Object)">
             <summary>
             Indicates whether the state of a persistent object in 
             this context is 'deleted' / to be deleted.
             </summary>
             <remarks>
             <para>
             A persistent object is of marked-as-to-be-removed state when it was
             marked as to be removed but the transaction was not successfully
             <see cref="M:Telerik.OpenAccess.ITransaction.Commit">committed</see> yet.
             </para>
             <para>
             Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.IsRemoved(System.Object)"/> when
             using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
             </para>
             <para>
             The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
             that it be called
             in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
             </para>
             <seealso cref="M:Telerik.OpenAccess.ObjectContainer.IsRemoved(System.Object)"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
             </remarks>
             <param name="persistentObject">The object to be checked.</param>
             <returns><c>true</c> if the object was deleted (marked as deleted); 
             <c>false</c> otherwise.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.IsNew(System.Object)">
             <summary>
             Indicates whether the state of a persistent object in 
             this context is 'new' / to be inserted.
             </summary>
             <remarks>
             <para>
             A persistent object is of state new when it is not stored in the
             database yet. A persistent (or more correct: an instance of a 
             persistence-capable class) object becomes persistent when the
             transaction terminates successfully via 
             <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/>.
             </para>
             <para>
             Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)"/> when
             using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
             </para>
             <para>
             The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
             that it be called
             in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
             </para>
             <seealso cref="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
             </remarks>
             <param name="persistentObject">The object to be checked.</param>
             <returns><c>true</c> if the object was added (marked as added); 
             <c>false</c> otherwise.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.IsHollow(System.Object)">
            <summary>
            Indicates whether an object is hollow, i.e., its content 
            is empty and not yet filled from the database.
            </summary>
            <remarks>
            <para>
            If a persistent object of hollow state is accessed (by reading or writing
            a field), its values are retrieved from the database and the 
            state changes to clean (read access) or dirty (write access). If the 
            object is not accessible (deleted, locked or not authorized), 
            an exception will be thrown.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance. Hollow
            instances cannot be deferred-loaded from the database when using a
            disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/>.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.IsHollow(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistentObject">The object where the hollow state should 
            be returned for.</param>
            <returns>Returns <c>true</c> if the object is hollow;
            otherwise <c>false</c>.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject"/> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">
            <summary>
            Returns the database identity for a persistent object.
            </summary>
            <remarks>
            <para>
            Changing the returned <see cref="T:Telerik.OpenAccess.IObjectId"/> instance will
            not affect the database identity for <paramref name="persistentObject"/>.
            </para>
            <para>
            The persistent object <paramref name="persistentObject"/> can be retrieved
            later using the returned <see cref="T:Telerik.OpenAccess.IObjectId"/> instance using
            the <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> method.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/> when
            using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance. For 
            newly added instances, the database object identity might be a 
            temporary one.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <param name="persistentObject">The instance whose identity is 
            requested.</param>
            <returns>The database object ID of the instance or <c>null</c>
            if <paramref name="persistentObject"/> does not belong to this context or 
            is not enhanced.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)">
            <summary>
            Retrieves the instance which is associated with the given 
            database object ID from this context.
            </summary>
            <remarks>
            <para>
            The method attempts 
            to find an instance in the context with the specified database object ID.
            </para>
            <para>
            The <paramref name="objectId"/> parameter object might have been returned by 
            an earlier call 
            to <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/>,
            or might have been provided by the application using a new
            <see cref="T:Telerik.OpenAccess.IObjectId"/> object.
            </para>
            <para>
             No change will be made to the state of the returned
            instance.
            </para>
            <para>
            If the persistent object with the specified object ID is already
            in the context, its reference will be returned.
            </para>
            <para>
            If there is no instance in the context with the same database
            identity as the  <paramref name="objectId"/> parameter, then this method 
            creates an instance
            with the specified database object ID and returns it. 
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            when using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            Persistent objects cannot be resolved dynamically, when 
            the ObjectContainer does not contain them already.
            </para>
            <para>
            Example of 'moving' an object from one scope to an other:
            <code>
            public T GetObjectByObject&lt;T&gt;(T t)
            {
                IObjectContext context = Database.GetContext(t);
                IObjectId id = context.GetObjectId(t);
                T ret = (T) myobjectscope.GetObjectById(id);
                return ret;
            }
            </code>
            Call:
            <code>
            person = GetObjectByObject&lt;Person&gt;(person);
            </code>
            </para>
            <seealso cref="P:Telerik.OpenAccess.Database.OID"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <returns>The instance with the specified <paramref name="objectId"/>.
            </returns>
            <param name="objectId">The database identity object.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object is deleted.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectById``1(Telerik.OpenAccess.IObjectId)">
            <summary>
            Retrieves the instance, of the specified type, which is associated with the given 
            database object ID from this context.
            </summary>
            <remarks>
            <para>
            The method attempts 
            to find an instance in the context with the specified database object ID.
            </para>
            <para>
            The <paramref name="objectId"/> parameter object might have been returned by 
            an earlier call 
            to <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/>,
            or might have been provided by the application using a new
            <see cref="T:Telerik.OpenAccess.IObjectId"/> object.
            </para>
            <para>
             No change will be made to the state of the returned
            instance.
            </para>
            <para>
            If the persistent object with the specified object ID is already
            in the context, its reference will be returned.
            </para>
            <para>
            If there is no instance in the context with the same database
            identity as the  <paramref name="objectId"/> parameter, then this method 
            creates an instance
            with the specified database object ID and returns it. 
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.IObjectScope"/> implementation of this method requires 
            that it be called
            in an active <see cref="T:Telerik.OpenAccess.ITransaction">transaction</see>.
            </para>
            <para>
            Refer to the description of <see cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            when using a disconnected <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance.
            Persistent objects cannot be resolved dynamically, when 
            the ObjectContainer does not contain them already.
            </para>
            <seealso cref="P:Telerik.OpenAccess.Database.OID"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <returns>The instance of the specified type with the specified <paramref name="objectId"/>.
            </returns>
            <param name="objectId">The database identity object.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object is deleted.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectContext.Evict(System.Object)">
            <summary>
            Marks a persistent object as no longer needed in the transaction 
            cache. This is a hint to the implementation.
            </summary>
            <remarks>
            Eviction is normally done automatically by the 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/>
            upon transaction completion (commit or rollback).  
            This method allows the application to
            explicitly provide a hint that the instance
            is no longer needed in the transaction cache.
            <para>
            Only non modified old objects can be evicted.
            </para>
            <para>
            If object is of type <see cref="T:System.Collections.IEnumerable"/>,
            all instances referenced by the enumerator are evicted.
            </para>
            </remarks>
            <param name="persistentObject">The instance to evict from the cache. It can also be an IEnumerable of objects to evict.
            </param>    
        </member>
        <member name="P:Telerik.OpenAccess.IObjectContext.Transaction">
            <summary>
            Gets the associated transaction instance.
            </summary>
            <remarks>
            There is exactly one <see cref="T:Telerik.OpenAccess.ITransaction"/> instance associated 
            with each <see cref="T:Telerik.OpenAccess.IObjectContext"/> instance. 
            </remarks>
            <value>The associated transaction instance.</value>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectContext.Tracking">
            <summary>
            Gets the associated change tracking interface.
            </summary>
            <remarks>
            There is exactly one <see cref="T:Telerik.OpenAccess.ITracking"/> instance associated 
            with each <see cref="T:Telerik.OpenAccess.IObjectContext"/> instance. 
            </remarks>
            <value>The associated tracking instance.</value>
        </member>
        <member name="T:Telerik.OpenAccess.IObjectContextProvider">
            <summary>
            Interface that provides the context (IObjectScope) 
            of the specific funtionality.
            </summary>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectContextProvider.Context">
            <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
            <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>    
            <remarks>
            The returned value is the context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>) 
             in which scope this query will be executed.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IObjectScope">
            <summary>
            Primary interface for database
            applications and the entry point for executing 
            queries, extent and transaction operations
            containing methods to manage the life cycle of persistent objects.
            </summary>
            <remarks>
            <para>
            Instances of this type can be obtained from the 
            <see cref="M:Telerik.OpenAccess.Database.GetObjectScope">Database.GetObjectScope</see> methods and
            represents a connection to the
            <see cref="P:Telerik.OpenAccess.IObjectScope.Database">database</see>.
            </para>
            <para>
            Instances of this type serve as factories for 
            <see cref="T:Telerik.OpenAccess.IQuery"/> and
            <see cref="T:Telerik.OpenAccess.ITransaction"/>
            objects.
            </para>
            <para>
            An instance of this type provides access to persistent objects.
            Persistent objects are instances of enhanced classes marked with the
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> attribute. Each 
            persistent object is associated with a unique database object ID.
            In every IObjectScope, there can be only one instance with a 
            given database object ID.
            </para>
            <para>
            The IObjectScope interface is used for working with an online database. 
            The <see cref="T:Telerik.OpenAccess.ObjectContainer"/> implements the common 
            <see cref="T:Telerik.OpenAccess.IObjectContext"/> interface as well and is intended for working 
            disconnected from a database.
            </para>
            IObjectScope instances must be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>
            to free the resources after usage.
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="T:Telerik.OpenAccess.IQuery"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
            </remarks>
            <example>
            An example on the basic operations of the IObjectScope can be found 
            <see cref="T:Telerik.OpenAccess.Database">here</see>.
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.Refresh(System.Object)">
            <summary>
            Refreshes the state and values of the persistent object 
            from the database.
            </summary>
            <remarks>
            <para>
            The state of the database object might have changed, while the 
            in-memory object does not reflect this change. 
            This method synchronizes the states, so that the in-memory object 
            refreshes its data from the current database object.
            </para>
            <para>
            When pessimistic concurrency control with repeatable read is used, 
            explicit synchronization is never necessary, because the 
            locking mechanism prevents concurrent changes to the database object.
            </para>
            </remarks>
            <param name="persistentObject">The instance to refresh or an IEnumerable of instances to refresh.</param>    
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">
            <summary>
            Makes a new oql query object from the specified expression.
            </summary>
            <remarks>
            <para>
            Using this method, oql queries can be executed 
            in the scope of the object scope and its current transaction.
            </para>
            <para>
            The provided query expression parameter has to be in oql 
            syntax. An example for an oql expression is
            "SELECT * FROM AddressExtent AS a WHERE a.street = $1".
            </para>
            <seealso cref="T:Telerik.OpenAccess.IQuery"/>
            </remarks>
            <returns>Returns a query instance, which can be executed.
            </returns>
            <param name="oqlExpression">The oql query expression.
            </param>    
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1">
            <summary>
            Makes a new oql query object from the specified type.
            </summary>
            <remarks>
            <para>
            Using this method, all instances of the specified types
            can be returned.
            </para>
            <para>
            Internally this is replaced by and OQL expression 
            "SELECT * FROM 'T'Extent".
            </para>
            <seealso cref="T:Telerik.OpenAccess.Query`1"/>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)"/>
            </remarks>
            <returns>Returns a query instance, which can be executed.
            </returns>
            <typeparam name="T">The type of the objects to query for.
            </typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)">
            <summary>
            Makes a new oql query object from the specified expression.
            </summary>
            <remarks>
            <para>
            Using this method, oql queries can be executed 
            in the scope of the object scope and its current transaction.
            </para>
            <para>
            The provided query expression parameter has to be in oql 
            syntax. An example for an oql expression is
            "SELECT * FROM AddressExtent AS a WHERE a.street = $1".
            </para>
            <seealso cref="T:Telerik.OpenAccess.Query`1"/>
            </remarks>
            <param name="oqlExpression">The oql query expression.
            </param>    
            <returns>Returns a query instance, which can be executed.
            </returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.QueryException">
             Result type of the OQL query and T do not match.
            </exception>
            <typeparam name="T">The type of the objects to return.
            </typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)">
            <summary>
            Makes a new sql query object from the specified expression.
            </summary>
            <remarks>
            <para>
            Using this method, native sql queries can be executed 
            in the scope of the object scope and its current transaction.
            </para>
            <para>
            The provided query expression parameter has to be in sql 
            syntax and is directly passed to the database backend, when the 
            query is executed. An example for a sql statement is
            "SELECT address_id, city_id, street FROM address WHERE street = ? ".
            </para>
            <para>
            When calling stored procedure provide the stored procedure name,
            followed by a comma separated list of the parameters as in the following 
            example:
            "sp_tables ?,?,?,?"
            </para>        
            <para>
            The type of the result instances can be specified with the 
            generic parameter. If a persistence-capable class is specified as 
            result type, the columns selected in the
            sql statement must at least contain the primary key columns of the 
            mapped result class, and additionally the discriminator column if 
            defined and the version column(s) if defined.
            </para>
            <para>
            For each parameter in the query expression, the param parameter 
            has to contain its declaration, e.g. param="VARCHAR p1" for 
            the sql query expression in the example above, or
            "VARCHAR table_name,VARCHAR table_owner,VARCHAR table_qualifier,VARCHAR table_type"
            for the stored procedure call in the example above.
            For stored procedures the specified parameter names must be the same
            as the parameter names in the stored procedure declaration.
            </para>
            <seealso cref="T:Telerik.OpenAccess.Query`1"/>
            </remarks>
            <param name="sqlExpression">The sql query expression.
            </param>    
            <param name="param">The parameter declarations for the sql 
            expression. 
            </param>    
            <returns>Returns a query instance, which can be executed.
            </returns>
             <typeparam name="T">The type of the returned objects.
             </typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(Telerik.OpenAccess.IQuery)">
            <summary>
            Makes a new oql query object from an exististing query.
            </summary>
            <remarks>
            <para>This method can be used, if an existing query 
            shall be executed in the context of an object scope 
            different from the object scope where the query was originally
            created.
            </para> 
            <para>  
            If the original query has already been compiled, the 
            newly created query takes over the compiled format
            and needs not to be compiled again.
            </para>    
            </remarks>
            <returns>Returns a query instance, which can be executed.
            </returns>
            <param name="query">The original sql query. 
            </param>    
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists this instance in a given transaction.
            </summary>
            <remarks>
            Explicitly enlists this object scope in the given transaction. This is not
            necessary in case of <see cref="F:Telerik.OpenAccess.TransactionProvider.TransactionScope"/> as 
            value of <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider"/> and will throw
            an exception in case of <see cref="F:Telerik.OpenAccess.TransactionProvider.OpenAccess"/>.
            </remarks>
            <param name="transaction">The <see cref="T:System.Transactions.Transaction"/> that enlists this instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transaction"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="transaction"/> is closed or disposed.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">The 
            <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider"/> had an incorrect value.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.Retrieve(System.Object)">
            <summary>
            Retrieves an instance from the database. This is a hint to the
            implementation.
            </summary>
            <remarks>
            This method hints the implementation
            that the application intends to use the
            persistent object, and that its field values should be retrieved.
            Might use policy information about the
            class to retrieve associated instances.
            </remarks>
            <param name="persistentObject">The object or an IEnumerable of objects to be retrieved.</param>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.Retrieve(System.Object,Telerik.OpenAccess.FetchPlan)">
            <summary>
            Retrieves instances from the database according to the passed FetchPlan. This is a hint to the
            implementation.
            </summary>
            <remarks>
            This method hints the implementation
            that the application intends to use the
            persistent object(s), and that their field values should be retrieved.
            <para>
            When <c>null</c> is passed as the <paramref name="fetchPlan"/>, the default retrieve fetch
            plan is used.
            </para>
            Might use policy information about the
            class to retrieve associated instances.
            </remarks>
            <param name="persistentObject">An object or an IEnumerable of objects to be retrieved.</param>
            <param name="fetchPlan">The FetchPlan to be used.</param>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)">
            <summary>
            Makes a new sql query object from the specified expression.
            </summary>
            <remarks>
            <para>
            Using this method, native sql queries can be executed 
            in the scope of the object scope and its current transaction.
            </para>
            <para>
            The provided query expression parameter has to be in sql 
            syntax and is directly passed to the database backend, when the 
            query is executed. An example for a sql statement is
            "SELECT address_id, city_id, street FROM address WHERE street = ? ".
            </para>
            <para>
            When calling stored procedure provide the stored procedure name,
            followed by a comma separated list of the parameters as in the following 
            example:
            "sp_tables ?,?,?,?"
            </para>        
            <para>
            The type of the result instances can be specified with the 
            result parameter. If null is specified, System.Object[] arrays
            are returned, with one array element for each column in the 
            result set. If a persistence-capable class is specified as 
            result type, the columns selected in the
            sql statement must at least contain the primary key columns of the 
            mapped result class, and additionally the discriminator column if 
            defined and the version column(s) if defined.
            </para>
            <para>
            For each parameter in the query expression, the param parameter 
            has to contain its declaration, e.g. param="VARCHAR p1" for 
            the sql query expression in the example above, or
            "VARCHAR table_name,VARCHAR table_owner,VARCHAR table_qualifier,VARCHAR table_type"
            for the stored procedure call in the example above.
            For stored procedures the specified parameter names must be the same
            as the parameter names in the stored procedure declaration.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IQuery"/>
            </remarks>
            <param name="sqlExpression">The sql query expression.
            </param>    
            <param name="result">The type of the instances returned in the 
            query result after query execution.
            </param>    
            <param name="param">The parameter declarations for the sql 
            expression. 
            </param>    
            <returns>Returns a query instance, which can be executed.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(Telerik.OpenAccess.IQuery)">
            <summary>
            Makes a new sql query object from an exististing query.
            </summary>
            <remarks>
            <para>This method can be used, if an existing query 
            shall be executed in the context of an object scope 
            different from the object scope where the query was originally
            created.
            </para> 
            <para>  
            If the original query has already been compiled, the 
            newly created query takes over the compiled format
            and needs not to be compiled again.
            </para>    
            </remarks>
            <param name="query">The original sql query. 
            </param>    
            <returns>Returns a query instance, which can be executed.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.LookupObjectById(Telerik.OpenAccess.IObjectId)">
            <summary>
            Returns the instance which is associated with the given 
            database object ID from this context if it is already loaded.
            </summary>
            <remarks>
            <para>
            The method attempts 
            to find an instance in the context with the specified database object ID.
            </para>
            <para>
            The <paramref name="objectId"/> parameter object might have been returned by 
            an earlier call 
            to <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/>,
            or might have been provided by the application using a new
            <see cref="T:Telerik.OpenAccess.IObjectId"/> object.
            </para>
            <para>
             No change will be made to the state of the returned
            instance.
            </para>
            <para>
            If the persistent object with the specified object ID is already
            in the context, its reference will be returned.
            </para>
            <para>
            If there is no instance in the context with the same database
            identity as the  <paramref name="objectId"/> parameter, then a null is returned 
            and no attempt to load it from the database or second level cache is made. 
            </para>
            <seealso cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            </remarks>
            <returns>The instance with the specified <paramref name="objectId"/> or null.
            </returns>
            <param name="objectId">The database identity object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetState(System.Object)">
            <summary>
            Returns the state of the persistent object.
            </summary>
            <param name="entity">The object the state should be returned for.</param>
            <returns>An enumeration representing the state of the persistent object.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Object is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetState(System.Object,System.String)">
            <summary>
            Returns the state of the named property or field from the persistent object.
            </summary>
            <param name="entity">The object holding the field or property with the respective name.</param>
            <param name="fieldName">The name of the field or property the state should be returned for.</param>
            <returns>An enumeration representing the state of the data hold by the named field or property.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">Object is not marked as persistent.</exception>
            <exception cref="T:System.ArgumentNullException">No entity or field name passed in.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetOriginalValue``1(System.Object,System.String)">
            <summary>
            Returns the original value of the named property of field from the persistent object.
            </summary>
            <remarks>
            <para>
            If a property or field in a persistent type is changed or marked as dirty, the original value might be of interest. 
            This method can be used to access the original value if it is available.
            </para>
            <para>
            Per default only the original values for types marked with concurrency mode <see cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/> are kept. 
            If all original values are of interest, the <see cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues">context.ContextProperties.MaintainOriginalValues</see> 
            property has to be set to true.
            </para>
            <para>
            To keep all original values in memory might have an memory overhead. If one field is made dirty, all fields
            of that respective type are stored in an extra object[].
            </para>
            <para>
            If the object is new, the default value of the respective property type is returned. If the property or field is clean, the clean value is returned.
            </para>
            </remarks>
            <typeparam name="T">The type of the expected return value. Object can be used for untyped access.</typeparam>
            <param name="entity">The object holding the field or property of interest.</param>
            <param name="propertyName">The name of the property or field of interest.</param>
            <returns>The old value if it was available and the property or field was dirty, the actual value otherwise.</returns>
            <seealso cref="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed"/>
            <seealso cref="P:Telerik.OpenAccess.IOpenAccessContextOptions.MaintainOriginalValues"/>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetState(System.Object,System.String)"/>
            <exception cref="T:System.ArgumentNullException">If one of the arguments is null or string.Empty</exception>
            <exception cref="T:System.InvalidOperationException">If the entity is not managed by this context.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">If the no property or field with the specified name can be found.</exception>
            <exception cref="T:System.NotSupportedException">If the original value is not available.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetUniqueId(Telerik.OpenAccess.UniqueIdGenerator)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="idGenerator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <returns>Unique integer value for a specified sequence.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetUniqueIds(Telerik.OpenAccess.UniqueIdGenerator,System.Int32)">
            <summary>
            Returns a unique integer value respecting the settings specified in a UniqueIdGenerator.
            </summary>
            <param name="idGenerator">A UniqueIdGenerator instance that specifies the seed, grab size and sequence name for the unique integer.</param>
            <param name="size">Specifies the number of unique id keys that should be fetched from the database.</param>
            <returns>An IEnumerator instance which enumerates values in the range of the grab size.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetIncrementalGuid">
            <summary>
            Returns an incremental unique identifier value. This value can be used as the identity value on persistent objects for better indexing on the database server.
            </summary>
            <returns>An incremental unique identifier.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetIncrementalGuid(System.Int32)">
            <summary>
            Calculates a number of incremental unique identifiers and returns the first one. This value can be used as the identity value on persistent objects for better indexing on the database server.
            </summary>
            <param name="grabSize">The number of incremental Guids that will be calculated before reading the next one from the database.</param>
            <returns>An incremental unique identifier.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetIncrementalGuids(System.Int32)">
            <summary>
            Calculates a number of incremental unique identifiers and returns them in a collection. These values can be used as the identity value on persistent objects for better indexing on the database server.
            </summary>
            <param name="grabSize">The number of incremental Guids that will be calculated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.ResetIncrementalGuid">
            <summary>
            Resets the current unique identifier value to random value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetIncrementalGuidRange">
            <summary>
            Gets the range of the last generated incremental Guid value.
            </summary>
            <returns>The range (second most significant byte).</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.SetIncrementalGuidRange(System.Byte)">
            <summary>
            Sets the range of the next generated incremental Guid value.
            </summary>
            <param name="range">The new range (second most significant byte).</param>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetMemberNames(System.Object,Telerik.OpenAccess.ObjectState)">
            <summary>
            Returns a collection of members names for a given instance based on the provided member state.
            </summary>
            <param name="instance">The instance.</param>
            <param name="state">The member state.</param>
            <returns>The collection which contains the member names.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IObjectScope.GetSyncRootObject">
            <summary>
            Gets an object to be used to synchronize any manual operations with the rest of the context operations.
            </summary>
            <returns>An instance of a object to be used in lock statements</returns>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectScope.Database">
            <summary>
            Gets the Database object used to create
            this instance.  
            </summary>
            <remarks>The database can create / might have created more than
            one IObjectScope instance.</remarks>
            <value>The database object that created
            this instance.</value>    
        </member>
        <member name="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">
            <summary>
            Gets the configuration settings of the 
            transaction. Transaction properties can only be changed 
            if the transaction is not active.
            </summary>    
            <value>Transaction properties object.</value>
             <remarks>
             Transaction properties describe the behavior of the transaction
             and might be changed only when the transaction is not active.
             <seealso cref="P:Telerik.OpenAccess.ITransaction.IsActive"/>
             </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectScope.FetchPlan">
            <summary>
            Gets and Sets the actual Fetch Plan. 
            You can change the Fetch Plan definition at any time.
            </summary>    
            <value>Fetch Plan instance.</value>
             <remarks>
             Fetch Plan instance describes the fetch behavior of the object scope.
             Changing the plan will change the amount of data fetched from the database.
             <seealso cref="P:Telerik.OpenAccess.IObjectScope.FetchPlan"/>
             <seealso cref="T:Telerik.OpenAccess.FetchGroupAttribute"/>
             <seealso cref="T:Telerik.OpenAccess.FetchFieldAttribute"/>
             </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectScope.PersistentMetaData">
            <summary>
            Returns the metadata describing all persistent classes
            </summary>
            <value>The PersistentMetaData for the persistent classes associated with the IObjectScope instance</value>
        </member>
        <member name="P:Telerik.OpenAccess.IObjectScope.Log">
            <summary>
            Specifies the destination to write the SQL query or command.
            </summary>
            <remarks>
            If no log level is defined in the backend configuration the level is set to 'normal'. 
            If the parameters should be printed as well the log level has to set to 'all' in the backend configuration.
            If additional information is required, a trace listener has to be implemented.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.IPersistentBehavior">
            <summary>
            Defines how add and remove on a list should be handled with regards to the database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.IPersistentBehavior.AddBehavior">
            <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.IPersistentBehavior.DeleteBehavior">
            <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.PersistenceBehavior">
            <summary>
            Enum to define the persistent bahavior of list add and remove calls.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PersistenceBehavior.Persistent">
            <summary>
            The add or remove call should be reflected in the 
            database by inserting or deleting the data.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.PersistenceBehavior.NonPersistent">
            <summary>
            The add or remove call should not be reflected in the 
            database.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.IQuery">
            <summary>
            Interface for executing queries.
            </summary>
            <remarks>
            <para>
            An instance of this interface
            can be obtained from the 
            <see cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">IObjectScope.GetOqlQuery</see> or
            <see cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)">
             IObjectScope.GetSqlQuery</see> methods.
            </para>
            <para>
            Queries are always executed in an actual transaction context.
            </para>
            <para>
            Instances of this class represent OQL or SQL queries.
            </para>
            <para>
            An OQL-query can contain parameters in its WHERE-clause, 
            that have to be suplied later for execution.
            Parameters are marked with $1, $2, ... in the query expression and
            must be matched with the parameter values during query execution.
            </para>
            <para>
            The query execution is deferred until the result enumerator
            is used to retrieve the first result object.
            </para>
            Please see the Telerik.OpenAccess .NET OQL reference for more information about
            the OQL syntax.
            </remarks> 
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">IObjectScope.GetOqlQuery</seealso>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)">
             IObjectScope.GetSqlQuery</seealso>
            <seealso cref="T:Telerik.OpenAccess.IQueryResult"/>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.Compile">
            <summary>
            Compiles the query to the native query format, e.g. SQL.
            </summary>
            <remarks>
            If Compile has not been called before <see cref="M:Telerik.OpenAccess.IQuery.Execute"/> is 
            called, Execute will call Compile implicitely.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.Execute">
            <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
            <returns>The result of the query execution.</returns>
            <remarks>
            The returned result object needs to be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.Execute(System.Object[])">
            <summary>
            Executes the specified query using the parameters passed
            and returns the result.
            </summary>
            <param name="args">The query parameters to use.</param>
            <returns>The result of the
             query execution.</returns>
            <remarks>
            The returned result object needs to be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.ExecuteDelete(System.Object[])">
            <summary>
            Executes the specified query using the parameters passed
            and deletes resulting instances on server only.
            </summary>
            <param name="args">The query parameters to use.</param>
            <returns>The result of the
             query execution.</returns>
            <remarks>
            The execution is done server side only.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.ExecuteUpdate(System.Object[])">
            <summary>
            Executes the specified query using the parameters passed
            and updates the resulting instances on server only.
            </summary>
            <param name="args">The query parameters to use.</param>
            <returns>The result of the query execution.</returns>
            <remarks>
            The execution is done server side only.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)">
            <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
            <remarks>
            Prefetching describes the number of objects that are 
            fetched in advance during client/server mode while using 
            an Enumerator.
            <para>Notice, that by default read-locks are applied to these 
            objects. 
            </para> 
            <para>
            The Prefetch method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            <para>
            Allowed values are 0 to 32767, the default value is 0.
            </para>
            </remarks>
            <param name="count">The prefetch value to be used.
            </param>
            <returns>The query with applied prefetch settings.</returns>
            <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.ForwardsOnly">
            <summary>
            Determines whether the query result can be traversed
            forwards only, or if random access is possible.
            </summary>
            <remarks>
            This property is only an optimization hint. 
            Also with ForwardsOnly==true, random access might be possible.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            </remarks>
            <value>True, if the query result can be traversed.
            forwards only</value>    
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.IgnoreUncommitted">
            <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
            <remarks>
            This property is only an optimization hint. 
            Also with IgnoreCache==false, uncommitted data might be 
            considered by the query.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
             <para>
             Persistence by reachability is maintained for the time of Flush(),
             but not for the time of Commit().
             </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.ITransaction.Flush">IObjectScope.Transaction.Flush()</seealso>
            <value>True, if uncommitted changes can be ignored.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.MaxResultCount">
            <summary>
            Limits the maximum number of instances to return by query execution.
            result.
            </summary>
            <remarks>
            This property can be used for performance optimizations, 
            if not all instances matching the query are required.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            </remarks>
            <value>The maximum number of instances to return by query execution.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.Expression">
            <summary>
            Provides the query expression from which this query was created.
            </summary>
            <value>The query expression.
            </value>    
            <remarks>
            The returned value is the value as given from the application;
            query parameters will not be resolved yet.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.BackendQuery">
            <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
            <remarks>
            The returned value may depend on the values of the query 
            parameters.
            A backend that does not use string representation for the query 
            language will return null.
            </remarks>
            <value>The native query expression.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.RootType">
            <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
            <remarks>
            The returned type is the common type of all returned persistence-capable
            instances (enhanced classes). If no common type exists (for example by
            use of a projection), null is returned.
            </remarks>
            <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.ParallelFetch">
            <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
            <remarks>
            Parallel fetching allows the use of multiple result sets in a combined
            way for an improved performance at the possible expense of more data beeing fetched.
            </remarks>
            <value>
            <c>True</c> when parallel result fetching is allowed, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IQuery.Skip">
            <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
            <remarks>
            Together with <see cref="P:Telerik.OpenAccess.IQuery.MaxResultCount"/> this method can be used to implement paging.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            </remarks>
            <value>Amount of data to skip. (Default:0)</value>
        </member>
        <member name="T:Telerik.OpenAccess.IQueryResult">
            <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>    
            <remarks>
            <para>
            Instances of this type can be obtained from the
            <see cref="M:Telerik.OpenAccess.IQuery.Execute">IQuery.Execute</see> methods.
            </para>
            <para>
            Instances of this type must be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>
            to free underlying resources.
            The result object itself and all enumerator objects for it become
            invalid, the contained objects itself remain valid.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IMovableEnumerator"/>
            <seealso cref="T:System.Collections.IList"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.IQueryResult.GetEnumerator">
            <summary>
            Returns a moveable enumerator to enumerate the query result objects.
            </summary>
            <remarks>
            IMovableEnumerator instances can be used to move freely in
            the underlying collection.
            </remarks>
            <returns>New enumerator for the query result.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IQueryResult.Prefetch(System.Int32)">
            <summary>Prefetches a speicified amount of result elements.</summary>
            <remarks>
            This method has been moved to the <see cref="T:Telerik.OpenAccess.IQuery"/> interface.
            <seealso cref="T:Telerik.OpenAccess.IQuery"/>
            </remarks>
            <returns>See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)"/></returns>
            <param name="count">See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)"/></param>
        </member>
        <member name="M:Telerik.OpenAccess.IQueryResult.GetTotalCount">
            <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
            <remarks>
            <para>
            The purpose of this method is to obtain the total number of results prior to enumerating
            the result itself in a paging-independend fashion (e.g. the overall number of results, 
            not the number of results in the page).
            </para>
            <para>
            This method will execute a seperate, optimized auxilliary query when the
            value of the <see cref="P:Telerik.OpenAccess.IQuery.ForwardsOnly"/> property of the generating 
            <see cref="T:Telerik.OpenAccess.IQuery"/> instance had been set to <c>True</c>.
            </para>
            </remarks>
            <returns>The total number of results.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.IQueryResult.ToList">
            <summary>
            Resolves the complete result and adds it to an ArrayList
            </summary>
            <remarks>
            To free memory and server side resources the call to ToList will close the query result.
            </remarks>
            <returns>ArrayList with the complete fetched result.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.IQueryResult.Context">
            <summary>
            Returns the context in which the query was executed.
            </summary>
            <remarks>
            The context returned can be used f.e. to add new objects to the used database.
            </remarks>
            <value>
            The IObjectContext of the query result.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.IQueryResult.OutParameter">
            <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
            <remarks>
            The key is the name of the parameter used in the stored procedure description.
            Having out parameters in a stored procedure forces the retrieval of the full 
            result set.
            </remarks>
            <value>
            Dictionary of out parameter values by name.
            </value>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)"/>
        </member>
        <member name="P:Telerik.OpenAccess.IQueryResult.RootType">
            <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
            <remarks>
            The returned type is the common type of all returned persistence-capable
            instances (enhanced classes). If no common type exists (for example by
            use of a projection), null is returned.
            </remarks>
            <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.ITracking">
            <summary>
            Provides change tracking events for modifications of persistent objects.
            </summary>
            <remarks>
            This interface provides events which can be used to get track changes on
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent objects</see>. 
            Such events can be used to implement custom change tracking models.
            <para>
            An instance of this interface is always bound to one 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> or <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instance. It 
            can be obtained from the <see cref="P:Telerik.OpenAccess.IObjectContext.Tracking"/> property.
            </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
            <example>
            The following example attaches tracking to all events. Please note, that
            all events are tracked in their -ing form (the event before an action occurs)
            except the Added; this is because the object identity is only available after
            the <see cref="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)"/> method has been executed.
            <code>
                class Program
                {
                    static void Main(string[] args)
                    {
                        using (IObjectScope scope = Database.Get("DatabaseConnection1").GetObjectScope())
                        {
                            ChangeTracker ct = new ChangeTracker(scope, Console.Out);
                            ct.Start();                             // writes modifications to the Console
                            Person p = new Person("James Gosling"); // some persistent class
                            scope.Transaction.Begin();
                            scope.Add(p);                           // fires the Added event
                            scope.Transaction.Commit();
            
                            scope.Transaction.Begin();
                            p.Name = "Anders Hejlsberg";            // fires the Changing event
            				scope.Refresh(p);                       // fires the Refreshing event
            			    scope.Remove(p);                        // fires the Removing event
                            scope.Transaction.Commit();
                        }
                    }
                }
            
                public class ChangeTracker
                {
                    private IObjectContext context;
                    private System.IO.TextWriter log;
            
                    public ChangeTracker(IObjectContext ctx, System.IO.TextWriter logFile)
                    {
                        context = ctx; log = logFile;
                    }
            
                    public void Start()
                    {
                        context.Tracking.Added += new AddEventHandler(Add);
                        context.Tracking.Changing += new ChangeEventHandler(Change);
                        context.Tracking.Removing += new RemoveEventHandler(Remove);
                        context.Tracking.Refreshing += new RefreshEventHandler(Refresh);
                    }
            
                    public void Stop()
                    {
                        context.Tracking.Adding -= new AddEventHandler(Add);
                        context.Tracking.Changing -= new ChangeEventHandler(Change);
                        context.Tracking.Removing -= new RemoveEventHandler(Remove);
                        context.Tracking.Refreshing -= new RefreshEventHandler(Refresh);
                    }
            
                    private void Change(object sender, ChangeEventArgs args)
                    {
                        IObjectId oid = context.GetObjectId(args.PersistentObject);
                        log.WriteLine("&lt;Changing oid='"+oid.ToString()+
                                          "' field='"+args.FieldName+
                                          "' oldValue='"+args.OldValue+
                                          "' newValue='"+args.NewValue+
                                          "' /&gt;");
                    }
                    private void Add(object sender, AddEventArgs args)
                    {
                        IObjectId oid = context.GetObjectId(args.PersistentObject);
                        log.WriteLine("&lt;Added oid='" + oid.ToString() + "' /&gt;");
                    }
                    private void Remove(object sender, RemoveEventArgs args)
                    {
                        IObjectId oid = context.GetObjectId(args.PersistentObject);
                        log.WriteLine("&lt;Removing oid='" + oid.ToString() + "' /&gt;");
                    }
                    private void Refresh(object sender, RefreshEventArgs args)
                    {
                        IObjectId oid = context.GetObjectId(args.PersistentObject);
                        log.WriteLine("&lt;Refreshing oid='" + oid.ToString() + "' /&gt;");
                    }
                }
            </code>
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Changing">
            <summary>
            Occurs before a field of a persistent object is changed by the application.
            </summary>
            <remarks>
            The Changing event is raised before the new value of a field
            is assigned to the field. 
            <para>It is possible to avoid the assignment
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Changed">
            <summary>
            Occurs after a field of a persistent object has been changed by the application.
            </summary>
            <remarks>
            The Changed event is raised after the new value of a field
            has been assigned to the field. 
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Adding">
            <summary>
            Occurs before a persistent object is added to the object context.
            </summary>
            <remarks>
            The Adding event is raised before the object is added to an <see cref="T:Telerik.OpenAccess.IObjectContext"/>
            instance. 
            <para>It is possible to avoid the persisting of an object
            by throwing an exception.
            </para>
            <para>
            Please note, that the retrieval of the (possibly database-assigned) object
            identity is not possible before the object is actually known to the object context.
            When this <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">object identity retrieval</see> is 
            required, the <see cref="E:Telerik.OpenAccess.ITracking.Added"/> event should be used.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Added">
            <summary>
            Occurs after an object was marked as to be persisted by the object context.
            </summary>
            <remarks>
            The Added event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been added to the <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Removing">
            <summary>
            Occurs before a persistent object is removed from the object context.
            </summary>
            <remarks>
            The Removing event is raised before the object is removed the <see cref="T:Telerik.OpenAccess.IObjectContext"/>
            instance. 
            <para>It is possible to avoid the deletion of a persistent object
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Removed">
            <summary>
            Occurs after a persistent object was marked as to be removed from the object context.
            </summary>
            <remarks>
            The Removed event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been removed from the <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            <para>
            Please note, that an access of the field values of a removed persistent object is 
            not possible. When this access is required, the <see cref="E:Telerik.OpenAccess.ITracking.Removing"/> event should be used.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Refreshing">
            <summary>
            Occurs before a persistent object is refreshed from the database.
            </summary>
            <remarks>
            The Refreshing is raised occurs before the object is reloaded from the database.
            <para>It is possible to avoid the refreshing of a persistent object
            by throwing an exception.
            </para>
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="E:Telerik.OpenAccess.ITracking.Refreshed">
            <summary>
            Occurs after a persistent object was refreshed from the database.
            </summary>
            <remarks>
            The Refreshed event is raised after the <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent object</see>
            has been refreshed from the database.
            </remarks>
            <example>
            Please refer to the example of <see cref="T:Telerik.OpenAccess.ITracking"/>.
            </example>
        </member>
        <member name="T:Telerik.OpenAccess.ChangeEventHandler">
            <summary>
            Represents the method that will handle the Changing and Changed events.
            </summary>
            <remarks>
            This delegate is usable for handling the <see cref="E:Telerik.OpenAccess.IContextEvents.Changing"/> 
            and <see cref="E:Telerik.OpenAccess.IContextEvents.Changed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope"/>,
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> or an <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance.</param>
            <param name="e">A <see cref="T:Telerik.OpenAccess.ChangeEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="T:Telerik.OpenAccess.AddEventHandler">
            <summary>
            Represents the method that will handle the Adding and Added events.
            </summary>
            <remarks>
            This delegate is usable for handling the <see cref="E:Telerik.OpenAccess.IContextEvents.Adding"/> 
            and <see cref="E:Telerik.OpenAccess.IContextEvents.Added"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope"/>,
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> or an <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance.</param>
            <param name="e">A <see cref="T:Telerik.OpenAccess.AddEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="T:Telerik.OpenAccess.RemoveEventHandler">
            <summary>
            Represents the method that will handle the Removing and Removed events.
            </summary>
            <remarks>
            This delegate is usable for handling the <see cref="E:Telerik.OpenAccess.IContextEvents.Removing"/> 
            and <see cref="E:Telerik.OpenAccess.IContextEvents.Removed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope"/>,
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> or an <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance.</param>
            <param name="e">A <see cref="T:Telerik.OpenAccess.RemoveEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="T:Telerik.OpenAccess.RefreshEventHandler">
            <summary>
            Represents the method that will handle the Refreshing and Refreshed events.
            </summary>
            <remarks>
            This delegate is usable for handling the <see cref="E:Telerik.OpenAccess.IContextEvents.Refreshing"/> 
            and <see cref="E:Telerik.OpenAccess.IContextEvents.Refreshed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope"/>,
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> or an <see cref="T:Telerik.OpenAccess.OpenAccessContextBase"/> instance.</param>
            <param name="e">A <see cref="T:Telerik.OpenAccess.RefreshEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectConstructedEventHandler">
            <summary>
            Represents the method that will handle the ObjectConstructed event.
            </summary>
            <param name="sender">The sender of the event (either OpenAccessContext or IObjectScope instances)</param>
            <param name="e">Event arguments</param>
            <remarks>This delegate is usable for handling the <see cref="E:Telerik.OpenAccess.IContextEvents.ObjectConstructed"/> </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.PersistenceEventArgs">
            <summary>
            Base class for change tracking events of persistent objects.
            </summary>
            <remarks>
            This is the base class for all events fired for persistent object changes.
            <para>
            The general pattern is, that a event is raised before and another event is
            raised after a certain state or value change.
            </para>
            <para>
            Currently, the before and after change event uses the same 
            PersistentEventArgs instance.
            </para>
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <seealso cref="T:Telerik.OpenAccess.AddEventArgs"/>
            <seealso cref="T:Telerik.OpenAccess.ChangeEventArgs"/>
            <seealso cref="T:Telerik.OpenAccess.RefreshEventArgs"/>
            <seealso cref="T:Telerik.OpenAccess.RemoveEventArgs"/>
        </member>
        <member name="M:Telerik.OpenAccess.PersistenceEventArgs.#ctor(System.Object)">
            <summary>Constructs a new instance.</summary>
            <remarks></remarks>
            <param name="pc">The tracked persistent object.</param>
        </member>
        <member name="P:Telerik.OpenAccess.PersistenceEventArgs.PersistentObject">
            <summary>
            Gets the persistent object the event was fired for.
            </summary>
            <remarks>
            The object which gets/got modified is given by this property.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
            <value>
            The persistent object which has changed it's state or value.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Finished">
            <summary>
            Indicates whether the event action is starting or finished.
            </summary>
            <remarks>
            Because the same event argument instance is used by the before and
            after events, this property can be used to distinguish between the two.
            </remarks>
            <value><c>True</c> when the event action is finished.</value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Tag">
            <summary>
            Gets or sets a user defined value.
            </summary>
            <remarks>
            This property is intended to be used by the application. It can
            transport arbitrary values between before and after event processing.
            </remarks>
            <value>Application defined value.</value>
        </member>
        <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Cancel">
            <summary>
            True will cancel the current operation.
            </summary>
            <remarks>
            If set to true, the operation will be canceled by throwing an <see cref="T:Telerik.OpenAccess.OpenAccessException"/>.
            An already finished operartion cannot be canceled.
            </remarks>
            <exception cref="T:System.ArgumentException">If set to true and the operation is already finished.</exception>
            <value>Set to true to cancel the operation.</value>
        </member>
        <member name="T:Telerik.OpenAccess.AddEventArgs">
            <summary>
            Provides data for the Adding and Added events.
            </summary>
            <remarks>
            An instance of this class is used to pass information during the
            <see cref="E:Telerik.OpenAccess.IContextEvents.Adding"/> and <see cref="E:Telerik.OpenAccess.IContextEvents.Added"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
        </member>
        <member name="M:Telerik.OpenAccess.AddEventArgs.#ctor(System.Object)">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>
            Not intended for application use.
            </remarks>
            <param name="o">The persistent object.</param>
        </member>
        <member name="T:Telerik.OpenAccess.RemoveEventArgs">
            <summary>
            Provides data for the Removing and Removed events.
            </summary>
            <remarks>
            An instance of this class is used to pass information during the
            <see cref="E:Telerik.OpenAccess.IContextEvents.Removing"/> and <see cref="E:Telerik.OpenAccess.IContextEvents.Removed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
        </member>
        <member name="M:Telerik.OpenAccess.RemoveEventArgs.#ctor(System.Object)">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>
            Not intended for application use.
            </remarks>
            <param name="o">The persistent object.</param>
        </member>
        <member name="T:Telerik.OpenAccess.RefreshEventArgs">
            <summary>
            Provides data for the Refreshing and Refreshed events.
            </summary>
            <remarks>
            An instance of this class is used to pass information during the
            <see cref="E:Telerik.OpenAccess.IContextEvents.Refreshing"/> and <see cref="E:Telerik.OpenAccess.IContextEvents.Refreshed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
        </member>
        <member name="M:Telerik.OpenAccess.RefreshEventArgs.#ctor(System.Object)">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>
            Not intended for application use.
            </remarks>
            <param name="o">The persistent object.</param>
        </member>
        <member name="T:Telerik.OpenAccess.ChangeEventArgs">
            <summary>
            Provides data for the Changing and Changed events.
            </summary>
            <remarks>
            An instance of this class is used to pass information during the
            <see cref="E:Telerik.OpenAccess.IContextEvents.Changing"/> and <see cref="E:Telerik.OpenAccess.IContextEvents.Changed"/> events.
            </remarks>
            <example>Please refer to the example of <see cref="T:Telerik.OpenAccess.IContextEvents"/>.</example>
        </member>
        <member name="M:Telerik.OpenAccess.ChangeEventArgs.#ctor(System.Object,System.String,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>
            Not intended for application use.
            </remarks>
            <param name="pc">The persistent object.</param>
            <param name="fld">The field name or an invalid field name when a change
            event occurs for an internal field (like hidden inverse reference).</param>
            <param name="newV">The new value of the field.</param>
            <param name="oldV">The old value of the field.</param>
            <param name="was">True if the object was dirty before.</param>
            <param name="loaded">True when the old value contains data.</param>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.FieldName">
            <summary>
            Get the name of the changed field.
            </summary>
            <remarks>
            When an unmapped internal field get changed (like a inverse reference), the
            field name is an invalid string like '-'.
            </remarks>
            <value>The name of the field or an invalid field name.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.PropertyName">
            <summary>
            Get the name of the changed property.
            </summary>
            <remarks>
            When no property name is specified in the mapping an empty string is returned.
            </remarks>
            <value>The name of the property or an <see cref="F:System.String.Empty"/>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.OldValue">
            <summary>
            Gets the old value of the changing/changed field.
            </summary>
            <remarks>This property contains the (boxed) old value.</remarks>
            <value>Old value of the field.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.NewValue">
            <summary>
            Gets the new value of the changing/changed field.
            </summary>
            <remarks>
            This property contains the (boxed) new value. When the value is a collection,
            changing the collection during event processing is currently not supported.
            </remarks>
            <value>New value of the field.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.WasDirty">
            <summary>
            Indicates whether the persistent object was marked as dirty before.
            </summary>
            <remarks>
            This property can be used to distinguish between the first and the following
            modifications of a persistent object.
            </remarks>
            <value><c>True</c> when the instance was marked as dirty before.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ChangeEventArgs.WasLoaded">
            <summary>
            Indicates whether the changing field was loaded.
            </summary>
            <remarks>
            This property can be used to find out if the old value is correct.
            </remarks>
            <value><c>True</c> when the old value contains data.</value>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectConstructedEventArgs">
            <summary>
            Provides data for the IContextEvents.ObjectConstructed event
            </summary>
            <remarks>
            Instance of this class should wrap the new persistence capable instance that was just created.
            Use this class to pass data during <see cref="E:Telerik.OpenAccess.IContextEvents.ObjectConstructed"/> event.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectConstructedEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance that is used as argument of the IContextEvents.ObjectConstructed event.
            </summary>
            <remarks></remarks>
            <see cref="E:Telerik.OpenAccess.IContextEvents.ObjectConstructed"/>
            <param name="persistentInstance">The newly created persistent instance</param>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectConstructedEventArgs.PersistentObject">
            <summary>
            Gets the newly constructed instance
            </summary>
            <remarks>
            Returned instance is persistence capable and should be not null.
            </remarks>
            <value>A newly constructed persistence capable instance</value>
        </member>
        <member name="T:Telerik.OpenAccess.LockMode">
            <summary>
            Specification of a pessimistic lock.
            </summary>    
            <remarks>
            <para>
            Can be used independent of TransactionMode setting.
            </para>
            <para>
            Values of this type can be used to specify the lock mode
            during <see cref="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">ITransaction.Lock</see>.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.LockMode.READ">
            <summary>
            Locks for read access. This is a shared lock, it conflicts with  
            exclusive locks of other transactions.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.LockMode.WRITE">
            <summary>
            Locks for write access. This is an exclusive lock, it conflicts 
            with any locks of other transactions. It also inhibits
            write or delete operations of other transactions.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.LockMode.DELETE">
            <summary>
            deprecated; behaves identical like WRITE
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ITransaction">
            <summary>
            Database transaction interface.
            </summary>
            <remarks>
            <para>
            Instances of this interface can be obtained
            from the <see cref="P:Telerik.OpenAccess.IObjectContext.Transaction">IObjectContext.Transaction
            </see> property, which will always contain the current transaction
            of the <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            </para>
            <para>
            The properties of a database transaction can be specified 
            using the <see cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties"/> property.
            </para>
            <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Begin">
            <summary>
            Begins a new transaction. 
            If there is another transaction already running an exception will be thrown.
            </summary>
            <remarks>
            <para>
            Begin marks the start of a transaction level.
            </para>
            <para>
            If this is a transaction bound to an 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/>, the current values of the 
            <see cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties"/> are used 
            for the transaction. 
            </para>
            <seealso cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties"/>
            <seealso cref="T:Telerik.OpenAccess.ITransactionProperties"/>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Concurrency property is wrong.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Associated IObjectScope object was disposed.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Commit">
            <summary>
            Commits the transaction on the current nesting level. 
            In case of exceptions, the transaction is implicitly rolled back.
            </summary>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
            When an unique index is violated.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            When there is a insufficient disk
            space condition or a disk writing failure.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When there is an access rights
            violation.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When a concurrency control conflict occured.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
            <remarks>
            Commit marks the end of a transaction level. If Commit fails,
            the database is not modified and the transaction level is 
            implicitly rolled back.
            <para>
            The database is only modified by a successful Commit.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Rollback">
            <summary>
            Rolls back this transaction on the current nesting level.
            </summary>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
            <remarks>
            Rollback marks the end of a transaction level.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Flush">
            <summary>
            Flush all dirty and new instances to the database.
            </summary>
            <remarks>
            <para>
            If a query or other database operation should take the actual changes into accout
            a flush can be done. It pushes all changes to the relational server but keep a server
            side transaction running to be able to rollback later.
            </para>
             <para>
             Persistence by reachability is maintained for the time of Flush(),
             but not for the time of Commit().
             </para>
             <para>
             The provisional persistent objects are also flushed to the database
             and will not be removed if they are not longer reachable from an 
             already persistent object during commit.
             </para>
            </remarks>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Transaction is not at level 1.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.FlushAndUnmanage">
            <summary>
            Flush all dirty and new instances to the database and evict all
            instances from the local cache.
            </summary>
            <remarks>
             <para>
            This method allows unreferenced instances to
            be garbage collected making it easier to write loops that update
            millions of instances in a single transaction. 
             </para>
             <para>
             Persistence by reachability is maintained for the time of Flush(),
             but not for the time of Commit().
             </para>
             <para>
             The provisional persistent objects are also flushed to the database
             and will not be removed if they are not longer reachable from an 
             already persistent object during commit.
             </para>
             <para>
             All objects are not longer bound to the context. You will get new instances from a following query.
             </para>
             <para>
             FlushAndUnmanage does not work together with System.Transaction.
             </para>
            </remarks>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Transaction is not at level 1.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">
            <summary>
            Sets a pessimistic lock on the specified object or collection
            elements. Might throw a LockNotGrantedException.
            </summary>    
            <param name="targetObject">The persistent object to be locked or an
            ICollection containing persistent objects to be locked.
            </param>
            <param name="mode">The lock to be applied.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the specified lock could not be obtained.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.</exception>
            <remarks>
            <para>
            This method allow the usage of pessimistic locks within optimistic
            transactions.
            </para>
            <para>
            If an instance of type <see cref="T:System.Collections.ICollection"/>
            is passed as <paramref name="targetObject"/>, all elements will be
            locked with the <paramref name="mode"/>. The elements must be 
            persistent objects. If the lock cannot be obtained for one element
            of the collection, the already locked objects will remain locked and
            the objects not processed yet will not be locked.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.GetDirtyObjects``1">
            <summary>
            Returns all objects of the specified type which have been modified in the 
            transaction. 
            </summary>    
            <value>An instance of System.Colections.Generic.IList<typeparam name="T">The type of the objects to be returned.</typeparam> containing all
            updated, deleted and newly inserted objects of the specified type.</value>
             <remarks>
             Removing objects from the returned list will not remove them from
             the transaction change set.
             <seealso cref="P:Telerik.OpenAccess.ITransaction.IsDirty"/>
             <typeparamref name="T">Type of the dirty instances</typeparamref>
             </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ITransaction.Objects``1(Telerik.OpenAccess.ObjectState)">
            <summary>
            Returns a read-only snapshot view of all objects of the specified type and state.
            </summary>
            <remarks>
            This method behaves differently between <see cref="T:Telerik.OpenAccess.IObjectScope"/> and
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/>:
            <list type="bullet">
            <item>
            <description>
            For the <see cref="T:Telerik.OpenAccess.IObjectScope"/>, only objects of the current transaction are returned.
            It is not possible to obtain all Clean and Hollow objects; an exception will be thrown when
            this is attempted.
            </description>
            </item>
            <item>
            <description>
            With the <see cref="T:Telerik.OpenAccess.ObjectContainer"/>, objects of the ObjectContainer are returned; 
            those might come from an earlier transaction in the ObjectContainer. In this case the
            objects in the ObjectContainer are seen as one transaction content.
            </description>
            </item>
            </list>
            You can combine different ObjectState values together (Dirty|New).
            </remarks>
            <returns>
            A read-only snapshot view of all objects of the specified type in the requested state.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When an attempt is made to obtain all
            clean and hollow objects when this is not possible.</exception>
            <param name="state">The state of the objects to be returned.</param>
            <typeparam name="T">The type of the objects to be returned.</typeparam>
        </member>
        <member name="P:Telerik.OpenAccess.ITransaction.IsActive">
            <summary>
            Indicates whether the transaction is currently active, i.e., the 
            transaction has
            been begun but not yet been committed or rolled back.
            </summary>	
            <value><c>true</c> if transaction is running, <c>false</c>, 
            if transaction is not running</value>	
            <remarks>
            Modifications to the database are only allowed 
            from an active transaction.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ITransaction.Level">
            <summary>
            Gets the current nesting level of the transaction. 
            </summary>    
            <value>Current transaction level if transaction is active or
            <c>0</c> if transaction is inactive.</value>
            <remarks>
            Modifications to the database / container are only allowed 
            from a transaction with level > 0.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ITransaction.IsDirty">
            <summary>
            Indicates whether modifications (updates, deletes, inserts)
            have been made in the transaction.
            </summary>    
            <value><c>true</c>, if modifications have been made.</value>
             <remarks>
             You can use this property to determine if the transaction needs to 
             be <see cref="M:Telerik.OpenAccess.ITransaction.Commit">committed</see> or if a <see cref="M:Telerik.OpenAccess.ITransaction.Rollback">
             rollback</see> is sufficient.
             <seealso cref="P:Telerik.OpenAccess.ITransaction.DirtyObjects"/>
             </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ITransaction.DirtyObjects">
            <summary>
            Returns all objects which have been modified in the 
            transaction. 
            </summary>    
            <value>An instance of System.Colections.IList containing all
            updated, deleted and newly inserted objects.</value>
             <remarks>
             Removing objects from the returned list will not remove them from
             the transaction change set.
             <seealso cref="P:Telerik.OpenAccess.ITransaction.IsDirty"/>
             </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ITransaction.IsManaged">
            <summary>
            Indicates whether the transaction is managed.
            </summary>
            <remarks>
            When System.Transactions (from .Net 2 framework) are used, this property returns <c>true</c>.
            </remarks>
            <value><c>true</c> if the transaction is managed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.OpenAccess.ITransactionProperties">
            <summary>
            Controls the properties of a database transaction. 
            </summary>    
            <remarks>
            <para>
            An instance of this type can be obtained from the
            <see cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">
            IObjectScope.TransactionProperties</see>
            property and controls the settings of the current transaction
            of the associated <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            The default transaction properties for the database can be obtained 
            from <see cref="P:Telerik.OpenAccess.Database.DefaultTransactionProperties">
            Database.DefaultTransactionProperties</see>.
            </para>
            <para>
            The default values are described at the description of
            the respective property.
            </para>
            <para>
            The properties of a transaction cannot be changed when the
            transaction is active (started).
            </para>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            <seealso cref="P:Telerik.OpenAccess.IObjectContext.Transaction"/>
            <seealso cref="T:Telerik.OpenAccess.Exceptions.TransactionException"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.RetainValues">
            <summary>
            Controls whether persistent objects retain their values after 
            commit of the transaction and if read access is allowed. 
            Default is true.
            </summary>
            <value>Default is <c>true</c>.</value>
            <remarks>
            Regardless of the setting the objects will be refreshed from the 
            database when the object is accessed within an active transaction 
            the next time.
            </remarks>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.RestoreValues">
            <summary>
            Controls whether the values of persistent objects are restored
            to their original values when the transaction 
            (or one particular nesting level) is rolled back. 
            Default is false.
            </summary>    
            <remarks>
            If set to <c>true</c>, the values of the persistent fields
            are restored to their original values.
            </remarks>
            <value>Default is <c>false</c>.</value>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.Concurrency">
            <summary>
            Controls the concurrency of the transaction. Default is 
            TransactionMode.OPTIMISTIC_NO_LOST_UPDATES.
            </summary>		
            <remarks>
            Default is to use optimistic transactions and to prevent lost
            updates (<see cref="F:Telerik.OpenAccess.TransactionMode.OPTIMISTIC_NO_LOST_UPDATES"/>)
            </remarks>    
            <value>Default is <c>TransactionMode.OPTIMISTIC_NO_LOST_UPDATES</c>.</value>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.RefreshReadObjectsInNewTransaction">
            <summary>
            Determines, whether objects that were read (but not modified)
            in a previous transaction are refreshed upon the first access
            in a subsequent transaction. Default is True; use with care!
            </summary>		
            <remarks>
            <para>
            The default is <c>true</c>, and this setting should only be changed with
            great care, as setting it to <c>false</c> might result in long-living
            stale objects.
            </para>
            <para>
            If setting this option to <c>false</c> the user is responsible
            to refresh read objects that are possible stale in subsequent transactions
            of the same IObjectScope.
            </para>
            <para>
            Note, that the default value of <c>true</c> does not guarantee non-stale
            objects when using optimistic transactions. It does only guarantee, that
            objects used in previous transactions are refreshed on the first read access
            in subsequent transactions of the same IObjectScope.
            </para>		
            </remarks>
            <value>Default is <c>true</c>.</value>
            <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.AutomaticBegin">
            <summary>
            Determines, whether a transaction is always active (automatically started).
            </summary>
            <remarks>
            <para>
            When set to <c>true</c>, the transaction will automatically started during
            a <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/> or 
            <see cref="M:Telerik.OpenAccess.ITransaction.Rollback"/>. Additionally, the 
            transaction is immediately made active when required.
            </para>
            <para>
            When set to <c>false</c>, the transaction is not automatically starting (any
            more) and the application must make calls to <see cref="M:Telerik.OpenAccess.ITransaction.Begin"/>.
            The transaction is not finished by setting the property to <c>false</c>.
            </para>
            <para>
            Setting this property to <c>true</c> is useful under two circumstances:
            <list type="bullet">
            <item>
            <description>
            You are forced to program in a similiar way as on a SQL connection.
            </description>
            </item>
            <item>
            <description>
            You are working in a multithreaded environment and need to execute 
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/>/<see cref="M:Telerik.OpenAccess.ITransaction.Rollback"/>
            and <see cref="M:Telerik.OpenAccess.ITransaction.Begin"/> in 
            one synchronized atomic operation.
            </description>
            </item>
            </list>
            </para>
            <para>
            Using <see cref="M:System.IDisposable.Dispose"/> on an <see cref="T:Telerik.OpenAccess.IObjectScope"/> 
            with an active transaction will 
            rollback that transaction; make sure that all changes are committed before 
            disposing the object scope.
            </para>
            <para>
            Setting the property to <c>true</c> in a managed transaction environment is not allowed
            and will result in an exception.
            </para>
            <seealso cref="P:Telerik.OpenAccess.ITransaction.IsActive"/>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
            </remarks>
            <value>The default is <c>false</c>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.FailFast">
            <summary>
            Determines, whether a transaction commit or flush should fail on the first failure.
            </summary>
            <remarks>
            <para>
            When set to <c>true</c>, the transaction will fail on occurence of the first 
            <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/>. 
             When set to
             <c>false</c> the commit or flush will continue and collect all 
             <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> that occur.
            </para>
            <para>
             Value <c>false</c> should only be used if the information about the failing objects
             is necessary.
            </para>
            <para>
            Attention: To collect all failures can be very time consuming!
            </para>
            <seealso cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/>
            </remarks>
            <value>The default is <c>true</c>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.ReadAfterDelete">
            <summary>
            Controls whether the values of persistent objects are accessible
            when the object is marked for deletion. 
            Default is false.
            </summary>    
            <remarks>
            If set to <c>true</c>, the values of the persistent fields
            are readable even if the object is marked for deletion by using <see cref="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)"/> or <see cref="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Object)"/>.
            <para>
            The values are only available in the actual transaction. If the transaction is committed or flushed the deleted object's fields are cleared. 
            The object should no longer be used because it is in an invalid state.
            </para>
            </remarks>
            <value>Default is <c>false</c>.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ITransactionProperties.EnableDataSynchronization">
            <summary>
            Gets or sets a Boolean value that determines whether the context behaves in data synchronization mode when it executes Insert and Update operations. 
            If the Telerik.OpenAccess.OpenAccessContextBase is in this mode, the DateTime and version fields that are automatically set by OpenAccess will not be calculated.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value that is true when data synchronization mode
            is enabled; otherwise false.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.PersistentMetaData">
             <summary>
             Metadata of all persistent classes
             </summary>
             <example>
             <code>
            class GenericPC
            {
            
                public GenericPC()
                {
                }
            
                public PropertyDescriptorCollection GetPersistentFields()
                {
                    return Database.GetContext(this).PersistentMetaData.GetTypeDescriptor(GetType()).GetProperties();
                }
            
                public object GetValue(_FieldInfo fi)
                {
                    return fi.GetValue(this);
                }
            }
             </code>
             </example>
        </member>
        <member name="F:Telerik.OpenAccess.Metadata.PersistentMetaData.typeDescriptors">
            <summary>
            Descriptor cache
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.#ctor">
            <summary>
            For internal usage only
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeNames">
            <summary>
            Returns all names of the persistent classes.
            </summary>
            <remarks>
            No guarantee is given regarding the sort order of the names.
            </remarks>
            <returns>
            Array with the names as known by the Telerik Data Access runtime.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type; can be null.</param>
            <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetExtendedTypeDescriptor(System.Object)">
            <summary>
            Gets an extended custom type descriptor for the given object.
            </summary>
            <remarks>
            The returned instance of type <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> contains additional methods
            dealing with persistence information.
            </remarks>
            <param name="instance">The object for which to get the extended type descriptor.</param>
            <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeDescriptor(System.Type)">
            <summary>
            Returns the persistent class descriptor for a specific type.
            </summary>
            <remarks>
            The returned instance of type <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> contains additional methods
            dealing with persistence information.
            </remarks>
            <param name="type">The persistent type.</param>
            <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeDescriptor(System.String)">
            <summary>
            Returns the persistent class descriptor for a specific type.
            </summary>
            <remarks>
            The returned instance of type <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> contains additional methods
            dealing with persistence information.
            </remarks>
            <param name="typeName">The full name of the persistent type without assembly specification, e.g. MyCompany.BigProject.FooBar</param>
            <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor"/> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeDescriptorImpl(System.Type,System.String)">
            <summary>
            Obtains a type descriptor
            </summary>
            <param name="typeName">Must be given</param>
            <param name="type">Can be null</param>
            <returns>An IPersistentTypeDescriptor for a specific persistent type</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeNamesImpl">
            <summary>
            Gets all persistent type names
            </summary>
            <returns>All type names, unsorted</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetApplicationIdentityFields(System.Type)">
            <summary>
            Obtains the list of fields that are used for the identity of a persistent type.
            </summary>
            <param name="type">The persistent type.</param>
            <returns>Read-only list of fields or <c>null</c> if the type does not use application identity.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor">
            <summary>
            Describes a Telerik Data Access persistent type
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.IsArtificialField(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the given property descriptor describes an artificial field.
            </summary>
            <remarks>
            Artificial fields are fields which do not have a representation in the user compiled code.
            </remarks>
            <param name="descriptor">The property descriptor to test</param>
            <returns><c>True</c> if the descriptor is for an artificial fields.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.GetMappedColumn(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Retrieves the description of the column(s) that persistent field maps to.
            </summary>
            <remarks>
            A field can be mapped to multiple columns in cases of composite keys used by
            reference of reference collection fields.
            <para>
            Normally, a field is mapped to exactly one column.
            </para>
            <para>
            In cases of an inversely mapped field, the returned value will be <c>null</c>.
            </para>
            </remarks>
            <param name="field">The field to get the mapped columns for.</param>
            <returns>Description of the mapped column(s) or <c>null</c> for inversely mapped fields.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.CreateInstance(System.Object)">
            <summary>
            Creates a new instance and optionally sets the key value when using application identity with a single field.
            </summary>
            <param name="singleFieldIdentityKey">Key value or <c>null</c> when no key should be set (internal identity, multi field application identity).</param>
            <returns>Newly created instance that is not yet added to a scope.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.GetProperty(System.String)">
            <summary>
            Returns the property descriptor associated with particular property or field name
            </summary>
            <param name="propertyOrFieldName">Property or Field name</param>
            <returns>Real property descriptor in case the argument was a property name,
            Field wrapper descriptor in case the argument was a field name</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.PersistentIdentity">
            <summary>
            Returns a property descriptor for the identity of a persistence capable instance.
            </summary>
            <remarks>
            The returned property descriptor can be used to obtain an <see cref="T:Telerik.OpenAccess.IObjectId"/> instance for
            a passed persistent instance.
            </remarks>
            <value>Property descriptor</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.PersistentVersion">
            <summary>
            Returns a property descriptor for the version of a persistence capable instance.
            </summary>
            <remarks>
            The returned property descriptor can be used to obtain the value of the concurrency control column.
            </remarks>
            <value>Property descriptor or <c>null</c> when no single column provides concurrency control information</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DiscriminatorField">
            <summary>
            Returns a property descriptor for the discriminator of a persistence capable instance.
            </summary>
            <remarks>
            The returned property descriptor can be used to obtain the value of the concurrency control column.
            </remarks>
            <value>
            Property descriptor or <c>null</c> when inheritance is involved with the persistent type.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DiscriminatorColumn">
            <summary>
            Returns a column descriptor for the discriminator column if there is one.
            </summary>
            <remarks>
            A discriminator is a value that identifies the type of the instance in a table hierarchy. 
            </remarks>
            <value>Column descriptor or <c>null</c> when no discriminator column is used.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.HasArtificialFields">
            <summary>
            Indicates whether the described type has artificial fields.
            </summary>
            <remarks>
            Artificial fields are fields which do not have a representation in the user compiled code.
            </remarks>
            <value><c>True</c> if the type contains an artificial field.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.IdentityFields">
            <summary>
            Returns a list of names for the application identity fields.
            </summary>
            <remarks>
            The returned list contains at least one name.
            </remarks>
            <value>
            List of names or <c>null</c> if no application identity is used.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DiscriminatorValue">
            <summary>Returns the discriminator column value.</summary>
            <remarks>
            If the type is not in a persistent class hierarchy, a null value will be returned. 
            The discriminator value is stored in an integer column if possible, as string otherwise.
            </remarks>
            <value>Datastore discriminator value as string.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.ClassId">
            <summary>Returns the class id.</summary>
            <remarks>
            This class id is normally part of the internal Object Id string only. 
            </remarks>
            <value>The class id as int.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.BaseType">
            <summary> Returns the persistent base type.</summary>
            <remarks>If the type has no persistent base type a null is returned.</remarks>
            <value>The persistent base type or null.</value>
        </member>
        <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DescribedType">
            <summary>Returns the type that is described by this descriptor.</summary>
            <remarks>
            The returned value can be <c>null</c> if the type is an artificial type.
            </remarks>
            <example>
            The following code fragment is invariant and should not fail for an enhanced class:
            <code>
            Type t = ...
            Type s = Scope.PersistentMetaData.GetPersistentTypeDescriptor(t.FullName).DescribedType;
            if (object.ReferenceEquals(t,s))
                Console.WriteLine("Invariant");
            </code>
            </example>
            <value>Type instance or <c>null</c></value>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer">
            <summary>
            <para>
             Implementation of a container for networks of persistent 
             objects which are disconnected from a database. The 
             ObjectContainer
             implements change tracking and can be used later to reapply
             the offline changes to a database.
            </para>
            </summary>
            <remarks>
            <para>
             Because the <see cref="T:Telerik.OpenAccess.ObjectContainer"/> is not associated with a 
             <see cref="T:Telerik.OpenAccess.Database"/>
             object it does not provide a <see cref="T:Telerik.OpenAccess.ITransaction">transaction
             </see> concept and is unable to 
             obtain connected objects like
             <see cref="T:Telerik.OpenAccess.IQuery"/>. The 
             <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
             keeps track of all contained persistent objects and their 
             modifications.
             </para>
             <para>
             The change tracking of the <see cref="T:Telerik.OpenAccess.ObjectContainer"/> 
             implements the 
             states <c>DETACHED</c>, 
             <c>CLEAN</c>, <c>DIRTY</c>, <c>DELETED</c> and <c>NEW</c>. 
             The states are connected like this:
             <code>
             Original State           Method           Target State
             
             IObjectScope Object ---&gt; CopyFrom()  ---&gt; CLEAN | DETACHED
             new Object          ---&gt; Add()       ---&gt; NEW
             NEW                 ---&gt; ChangeObjectId()    ---&gt; DIRTY
             CLEAN               ---&gt; MakeDirty() ---&gt; DIRTY
             CLEAN               ---&gt; Remove()    ---&gt; DELETED
             DIRTY | DETACHED    ---&gt; Remove()    ---&gt; DELETED
             NEW                 ---&gt; Remove()    ---&gt; -
             </code>
             </para>
             <para>
             The initial filling of the <see cref="T:Telerik.OpenAccess.ObjectContainer"/> can be done 
             using
             existing objects from a <see cref="T:Telerik.OpenAccess.IObjectScope"/> and the
             <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/> method. New persistent objects can also be 
             added into the <see cref="T:Telerik.OpenAccess.ObjectContainer"/> with the 
             <see cref="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)"/>
             method and get a temporary object ID which is
             valid within the used container. 
             </para>
             <para>
             When the changed <see cref="T:Telerik.OpenAccess.ObjectContainer"/> content needs to be 
             made 
             available
             to the <see cref="T:Telerik.OpenAccess.Database"/>, a target 
             <see cref="T:Telerik.OpenAccess.IObjectScope"/> can be updated with the 
             content using the <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> 
             method. In order to detect concurrent changes, a verification step 
             is made which <see cref="T:Telerik.OpenAccess.ObjectContainer.Verify">verifies</see> 
             all persistent objects marked with 
             <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> as 
             <c>Verifiable</c>.
             <!--
             If the verification detects a concurrent change, an instance of class
             <see cref="ContainerMerger"/> needs to be supplied 
             in order to handle the conflict(s).
             -->
             If the verification detects a concurrency conflict, the 
             <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> method will fail with an exception and the
             ObjectContainer will need to be modified by the application until
             the verification succeeds. This can be accomplished using an 
             <see cref="T:Telerik.OpenAccess.IObjectScope"/> to retrieve the actual values and merging 
             those values to the ObjectContainer manually in an application specific
             manner.
             Another approach is to abandon the current values of the ObjectContainer
             and repeat the operations in a new ObjectContainer (filled with the
             correct current values from the database).
             </para>	
             <para>
             The <see cref="T:Telerik.OpenAccess.ObjectContainer"/> implements a simple way to mark 
             objects
             for later simplified retrieval. Objects can be put into a 'named list'.
             Named lists can be enumerated separately and might be useful to hold 
             application specific root objects. It is intended, that the root
             objects are used as business-objects.
             </para>
             <para>
             ObjectContainer instances can be serialized and will include the
             persistent objects contained objects in them.
             </para>
             <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
             <!--
             <seealso cref="ContainerMerger"/>
             <seealso cref="ObjectMerger"/>
             -->
             <seealso cref="T:Telerik.OpenAccess.ObjectContainer.Verify"/>
             <seealso cref="T:System.Runtime.Serialization.ISerializable"/>
            </remarks>
            <example>General usage of an ObjectContainer object
            <code>
             ... 
             // Declaring an example application class as persistent and specify and alias name
             //
             [Persistent(Alias="model.AppClass")]
             public class AppClass
             {
             ...
             }
             //
             // An IObjectScope scope1 exists and a transaction is running;
             // The AppClass instance obj1 is managed by the scope1.
             // ...
             ObjectContainer container1 = new ObjectContainer();
             FetchGroupCollector fgCollector = 
            		new FetchGroupCollector(FetchGroupCollector.DeepFetchGroup);
            		
             container1.CopyFrom( scope1,"AppList", obj1, fgCollector);
             //
             // A deep copy of all objects reached by obj1 has been made into
             // the container1 object.
             // ...
             OutputStream outstream1 = new MemoryStream();
             Formatter format1 = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
             format1.Serialize(outstream1, container1);
             //
             // outstream1 contains now a representation of the ObjectContainer
             // container1 and its contained objects like obj1
             // ...
             // Working on the deserialized container on a remote client 
             // while tracking all changes is left out here, but intended.
             // Assuming that the container1 comes back with some changes
             // and is already deserialized.
             // ...
             // Another IObjectScope scope2 was created and a transaction
             // is running within. Using this scope2 to receive all changes 
             // tracked in container1.
             //
             container1.CopyTo(scope2, Verify.All|Verify.Lock);
             //
             // The verification process will verify all objects and try to lock them.
             // Changed objects will get the specified write lock of the transaction
             // and untouched objects will be locked for read.
             // The implicitly executed merge process will copy all changes
             // to scope2. The default merge handler will fail if an object
             // contained in container1 has been changed in the mean time in
             // the database or if a lock cannot be set.
             // ...
             // Do not forget to call scope2.Transaction.Commit() to persist the
             // changes in the database!
            </code>
            </example>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ObjectRepository">
            <summary>
            hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.copyMutable(System.Object,Telerik.OpenAccess.SPI.OfflineStateManager,System.Int32)">
            <summary> Used to provide the offline state manager with a copy of mutable
            objects.
            </summary>
            <param name="x">The object in the connected scope.
            </param>
            <param name="osm">The offline state manager.
            </param>
            <param name="slot">The slot number to be used.
            </param>
            <returns>  The object for offline usage.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.createSM4FCO(System.Type,System.Object)">
            <summary> Creates a new state manager for an FCO with the given identity.</summary>
            <param name="clazz">    Class of the FCO 
            </param>
            <param name="doid">     Disconnected OID of the FCO 
            </param>
            <returns>          New Offline State Manager
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.createSM4SCO(System.Type,Telerik.OpenAccess.SPI.OfflineStateManager,System.Int32)">
            <summary> Creates a new state manager for an FCO with the given identity.</summary>
            <param name="clazz">    Class of the FCO 
            </param>
            <param name="fcoSM">    State Manager of controlling FCO
            </param>
            <param name="slot">     slot number of sco wrt. fco 
            </param>
            <returns>          Offline State Manager
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.lookupAndCreate(Telerik.OpenAccess.SPI.IPersistenceManager,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Object)">
            <summary> Finds the corresponding OfflineStateManager instance for a given pc.
            If the pc is not known, a proxy is generated which can be filled later.
            </summary>
            <param name="epm">      Source PersistenceManager
            </param>
            <param name="pc">       Source user object
            </param>
            <param name="idObj">    DisconnectedOID instance  
            </param>
            <returns>          Offline State Manager
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.insertObject(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Boolean)">
            <summary> Can be used to notify object repository about newly added things.
            Was used by tracked collection implementation.
            </summary>
            <param name="pc">
            </param>
            <param name="reeval">   True for reevaluation (without making it a root object)
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.isTemporaryId(System.Object)">
            <summary> Determines if an object ID is temporary.</summary>
            <param name="x">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepository.setModified">
            <summary> Sets the ObjectRepository dirty. Might throw an exception.</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ReferenceCollector">
            <summary> Callback interface to be used with ReferenceHelper.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ReferenceCollector.Add(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Boolean,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor">
            <summary>
            Constructs an empty ObjectContainer.
            </summary>
            <remarks>
            The ObjectContainer is empty and modifiable initially. 
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)">
            <summary>
            Inserts an object of a persistence-capable class into 
            this ObjectContainer.
            </summary>
            <remarks>
            <para>
            The object to be inserted must not belong to any 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/>
            or <see cref="T:Telerik.OpenAccess.ObjectContainer"/> before.		
            </para>
            <para>
            The class of the object must be declared as 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">persistent</see>.
            </para>
            <para>
            The object will be added with the state 'NEW' if it was not 
            available in the container before; otherwise the state is
            maintained.
            </para>
            The ObjectContainer instance must not be read-only.
            </remarks>
             <param name="obj">The persistence capable object to be added to 
             the ObjectContainer. It can also be an IEnumerable of objects to add.</param>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="obj"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
             <exception cref="T:System.ArgumentNullException">When 
             <paramref name="obj"/> is <c>null</c>.</exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)">
            <summary>
            Marks a persistent object as deleted. 
            </summary>
            <remarks>
            When <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">updating the 
            database</see> with this 
            ObjectContainer, the corresponding object will be permanently 
            deleted from the database upon successful commit.
            Deleting detached (hollow) objects is allowed. The removed 
            object will go to state 'DELETED'.
             <para>
             When the removed instance is new, the instance is 
             <see cref="M:Telerik.OpenAccess.ObjectContainer.Evict(System.Object)">evicted</see> from
             the ObjectContainer. 
             </para>
             <para>
             The persistent object must be contained in this ObjectContainer.
             The instance must not be read-only.
             </para>
            </remarks>
             <param name="persistent">The object to be removed from 
             the ObjectContainer. It can also be an IEnumerable of objects to remove.
             </param>
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistent"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.MakeDirty(System.Object,System.String)">
            <summary>
            Marks the field of a persistent object explicitly as dirty. 
            Must be called before modifications occur.
            </summary>
            <remarks>
            <para>
            When <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">updating the database</see>
            with this ObjectContainer, the corresponding object will be 
            modified. 
            </para>
            <para>
            This method must be called before modifications occur.
            </para>
            <para>
            The ObjectContainer will be notified
            implicitly for all modifications of the contained objects 
            (change tracking). The resulting state will be 'DIRTY'.
            </para>
            <para>
            The persistent object must be contained in this ObjectContainer.
            The instance must not be read-only.
            </para>
            </remarks>
            <param name="persistentObject">The persistent object to be 
            marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
            <param name="fieldName">The field of the persistent object to be 
            marked as dirty.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject"/> is not contained in this
            ObjectContainer.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object)">
            <summary>
            Checks if a persistent object is in the 'DIRTY' state.
            </summary>
            <remarks>
            Objects of 'DIRTY' state will be updated in the database
            during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>.
            </remarks>
            <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
            <returns>Value <c>true</c> if object has been modified or has been 
             marked dirty explicitly; otherwise <c>false</c>.</returns>		
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object,System.String)">
            <summary>
            Checks if a field of a persistent object is in the 'DIRTY' state.
            </summary>
            <remarks>
            Objects of 'DIRTY' state will be updated in the database
            during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>.
            </remarks>
            <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
             <param name="fieldName">The name of the field to be checked.</param>
            <returns>Value <c>true</c> if field has been modified or has been 
             marked dirty explicitly; otherwise <c>false</c>.</returns>		
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.IsRemoved(System.Object)">
            <summary>
            Checks if a persistent object is in the 'DELETED' state.
            </summary>
            <remarks>
            Objects of 'DELETED' state will be removed from the database
            during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>.
            </remarks>
            <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
            <returns>Value <c>true</c> if this object has been removed; 
             otherwise <c>false</c>.</returns>
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)">
            <summary>
            Checks if a persistent object is in the 'NEW' state.
            </summary>
            <remarks>
            Objects of 'NEW' state will be inserted into the database
            during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>; their temporary database object ID
            will be replaced by the final one.
            </remarks>
            <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
            <returns>Value <c>true</c> if the object has been inserted; 
             otherwise <c>false</c>.</returns>
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.IsHollow(System.Object)">
             <summary>
             Checks if a persistent object is in the 'DETACHED' state 
             and therefore its values cannot be read (is hollow).
             </summary>
            <remarks>
            Objects of 'DETACHED' state are not accessible from the container
            and will not be modified during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>. The 
            serve as object graph delimiters.
            </remarks>
             <param name="persistentObject">The object to checked; 
             must be managed by this
             ObjectContainer.</param>
             <returns>Value <c>true</c> if the object is actually a detached
             hollow object whose values cannot be read.</returns>
             <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)">
            <summary>
            Returns the database object ID for the passed 
            persistent object.
            </summary>
            <remarks>
            The instance returned can later be used to retrieve the
            persistent object from the database using 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)">IObjectContext.GetObjectById
            </see>.
            </remarks>
            <param name="persistentObject">The persistent object of which the 
            database object ID is requested.</param>
            <returns>Database identity object.</returns>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            <paramref name="persistentObject"/> is not 
            persistence capable (not enhanced or class is not declared
            [Persistent]
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)">
            <summary>
            Returns the persistent object with the given database object ID.
            </summary>
            <remarks>
            Database object ID instances can be obtained from the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/> methods of <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
            and <see cref="T:Telerik.OpenAccess.IObjectScope"/> or can be created as
            <see cref="T:Telerik.OpenAccess.IObjectId"/>.
            <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/>
            </remarks>
            <param name="oid">The database object identity object.</param>
            <returns>Persistent object having the passed object ID from 
            this ObjectContainer 
            or <c>null</c> if the object is not available from this
            ObjectContainer.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectById``1(Telerik.OpenAccess.IObjectId)">
            <summary>
            Returns the persistent object of the specified type with the given database object ID.
            </summary>
            <remarks>
            Database object ID instances can be obtained from the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/> methods of <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
            and <see cref="T:Telerik.OpenAccess.IObjectScope"/> or can be created as
            <see cref="T:Telerik.OpenAccess.IObjectId"/>.
            <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/>
            </remarks>
            <param name="objectId">The database object identity object.</param>
            <returns>Persistent object having the passed object ID from 
            this ObjectContainer 
            or <c>null</c> if the object is not available from this
            ObjectContainer.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(System.Object)">
            <summary>
            Marks a persistent object as no longer needed in the object container.
            </summary>
            <remarks>
            In opposition to the <see cref="T:Telerik.OpenAccess.IObjectScope"/>, eviction is not automatically 
            done by the <see cref="T:Telerik.OpenAccess.ObjectContainer"/>.
            This method allows the application to
            explicitly provide a hint that the instance
            is no longer needed.
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.Evict(Telerik.OpenAccess.IObjectId)"/>
            </remarks>
            <param name="persistent">The instance to evict from the container. It can also be an IEnumerable of objects to evict.
            </param>    
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeObjectId(System.Object,Telerik.OpenAccess.IObjectId)">
            <summary>
            Changes the id of a persistent object to another database object ID. 
            </summary>
            <remarks>
            <para>
            The persistent object
            must be available from this ObjectContainer and the new object ID
            must be conflict free. The caller is responsible for correctly 
            allocating object ID objects.
            </para>
            <para>
             Only objects of state 'NEW' can be 
            renamed and change their state to 'DIRTY'.
            </para>
            <para>
            The new object id must not be a temporary one.
            </para>
            </remarks>
            <param name="persistentObject">Object contained 
            in this writable ObjectContainer 
            whose OID is to be changed.</param>
            <param name="newIdObj">The new database object ID.</param>
            <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject"/> is not contained in this
            ObjectContainer.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="newIdObj"/> is not given.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="newIdObj"/> is not valid.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When the state of <paramref name="persistentObject"/> 
            is not <c>NEW</c>.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.ToString">
            <summary>
            Returns a string describing all contained objects for 
            debugging purposes.
            </summary>
            <remarks>
            The value is intended for debugging purposes only and the
            format of the string can change any time.
            </remarks>
            <returns>Returns a string with a description of the state of 
            all contained objects.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetListNames">
            <summary>
            Returns an enumerator for all known list names.
            </summary>
            <remarks>
            The enumerator will provide the names of all known lists maintained
            by this ObjectContainer instance.
            </remarks>
            <returns>New enumerator instance of string values.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String)">
            <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
            <remarks>The <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/>
            methods can be used to control the name under which an object
            can be retrieved.</remarks>
            <param name="listName">An name of a registered IList</param>
            <returns>An instance of IList or <c>null</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String,System.Boolean)">
            <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
            <remarks>The <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/>
            methods can be used to control the name under which an object
            can be retrieved.</remarks>
            <param name="listName">An name of a registered IList</param>
            <param name="implicitCreate">If <c>true</c>, the list will be created if necessary.</param>
            <returns>An instance of IList or <c>null</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList``1(System.String)">
            <summary>
            Get an IList of the specified type that is registered by the id 'name'.
            </summary>
            <remarks>The <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/>
            methods can be used to control the name under which an object
            can be retrieved.</remarks>
            <param name="listName">An name of a registered IList</param>
            <typeparam name="T">The type of the objects to be returned.</typeparam>
            <returns>An instance of IList or <c>null</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList``1(System.String,System.Boolean)">
            <summary>
            Get an IList of the specified type that is registered by the id 'name'.
            </summary>
            <remarks>The <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/>
            methods can be used to control the name under which an object
            can be retrieved.</remarks>
            <param name="listName">An name of a registered IList</param>
            <param name="implicitCreate">If <c>true</c>, the list will be created if necessary.</param>
            <typeparam name="T">The type of the objects to be returned.</typeparam>
            <returns>An instance of IList or <c>null</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)">
            <summary>
            Creates a copy of each specified persistent root object and adds it to the 
            ObjectContainer.
            </summary>
            <remarks>
            <para>
            This method can be used to create a copy of objects in an object scope, and add
            these copies to the container. The <paramref name="objectToBeAdded"/> parameter
            specifies the 'root objects' that are to be added to the container. All the
            root objects are added to a 'named list'. This list can be used to later
            retrieve the root objects.
            </para>
            <para>
            The <paramref name="objectCollector"/> parameter, which is an instance of 
            the <see cref="T:Telerik.OpenAccess.IObjectCollector"/> interface, can be used to specify that 
            objects referenced by the 'root objects' also need to be copied and added to 
            the container. In this case the 'root objects' are added to both, the named 
            list and the container whereas the referenced objects are added only to the 
            container.
            </para>
            <para>
            The <see cref="T:Telerik.OpenAccess.FetchGroupCollector"/> class provides an implementation
            of the IObjectCollector interface.
            </para>
            The imported objects will be added into the state 'CLEAN'.
            </remarks>
            <param name="objectScope">The source IObjectScope to copy 
            from.</param>
            <param name="listName">The name of the list under which the added
            objects should be retrievable.
            </param>
            <param name="objectToBeAdded">Persistent object that is to be added to the
            container. Can also be of type IEnumerable or IEnumerator in which case all
            contained objects are added to the container.
            <para>
            In the case where a persistent capable class also implements IEnumerable or
            IEnumerator, the object network for only this class' object is calculated.
            The contained objects are not enumerated.
            </para>
            </param>
            <param name="objectCollector">An implementation of the IObjectCollector interface
            used to calculate the object network for each of the root objects.
            <para>This parameter can be null, in which case only the root objects are added
            to the contatiner.</para>
            </param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When the source scope object is not accessible.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the source scope transaction mode is pessimistic and the
            object cannot be locked.
            </exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            When the source scope object was referenced but is deleted in the
            database.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">
            <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
            <remarks>
            <para>
            This method can be used to replay the changes made offline
            into a database. It is recommended, that you verify all changed
            objects with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.All"/> and lock them pessimistically
            with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock"/>. 
            </para>
            <para>
            Only objects marked as <c>Verifiable</c> in the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
             attribute
            will be verified.
            </para>
            <para>
            The CopyTo method is executed non-atomically; the target IObjectScope
            might contain modifications when CopyTo is aborted.
            </para>
            <para>
            Depending on the objects to be copied and the data model used
            newly created objects might lead to unwanted duplicates; if 
            this needs to be avoided, the new objects from the container
            must be checked with the current data from the target object
            scope beforehand.
            </para>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.Verify"/>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            </remarks>
            <param name="objectScope">The target IObjectScope to 
            copy to.</param>
            <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.
            </param>		
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)">
            <summary>
            Commits the changes of an ObjectContainer into a database.
            </summary>
            <remarks>
            <para>
            This method can be used to apply the changes of an ObjectContainer
            into a database using an IObjectScope instance.
            </para>
            <para>
            This method can be used for two purposes: 
            <list type="bullet">
            <item><description>Apply changes of an ObjectContainer</description></item>
            <item><description>Apply changes of an ObjectContainer and generate a ChangeSet instance
            which allows to source ObjectContainer to become 'clean' again.
            </description></item>
            </list>
            The <paramref name="generateUpdateChanges"/> parameter can be used to
            distinguish between the two purposes.
            </para>
            <para>
            When an exception occurs during processing, the target scope's transaction
            can still be active. Therefore you should handle this situation within a
            finally block.
            </para>
            </remarks>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When changes have been made in the database concurrently.</exception>
            <param name="changes">The extracted changes of an ObjectContainer.</param>
            <param name="verifyMode">The verification mode to use.</param>
            <param name="targetScope">The target scope with inactive transaction.</param>
            <param name="allFields">Controls whether all fields should be overwritten 
            (usually <c>true</c>).</param>
            <param name="generateUpdateChanges">If <c>true</c>, the return value
            will be calculated; otherwise null is returned.</param>
            <returns>When generateUpdateChanges is <c>true</c>, a change set
            is generated; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CopyToWithUpdate(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
            <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
            <remarks>
            	<para>
                    This method can be used to replay the changes made offline into a database. It
                    is recommended, that you verify all changed objects with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.All"/> and lock them pessimistically with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock"/>.
                </para>
            	<para>
                    Only objects marked as <c>Verifiable</c> in the <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> attribute will be verified.
                </para>
            	<para>The CopyTo method is executed non-atomically; the target IObjectScope might
                contain modifications when CopyTo is aborted.</para>
            	<para>Depending on the objects to be copied and the data model used the
                ObjectContainer content will be updated to reflect the changes.</para>
            	<para>Attention: The same scope has to be used for all following operations. If the
                scope is not committed to the database the container content does not reflect a
                committable state. After committing the scope transaction the container should not
                be used anymore or at least completely refreshed. It might contain old concurrency
                control information.</para>The verification mode to use.The target scope with
                inactive transaction.Controls whether all fields should be overwritten (usually
                <c>true</c>).
                <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
                When the changes stored in the container cannot be applied to the target object
                scope because the database content was changed concurrently.</exception>
            	<exception cref="T:Telerik.OpenAccess.OpenAccessException">When an object could not be accessed from the
                database.</exception>
            </remarks>
            <param name="allFields">true if all fields should be updated</param>
            <param name="verifyMode">The verification mode to use.</param>
            <param name="targetScope">The target scope with inactive transaction.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
            <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected. Can protect attributed object fields
            from being overwritten with the ObjectContainer content.
            </summary>
            <remarks>
            <para>
            This method can be used to replay the changes made offline
            into a database. It is recommended, that you verify all changed
            objects with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.All"/> and lock them pessimistically
            with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock"/>. 
            </para>
            <para>
            Only objects marked as <c>Verifiable</c> in the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
            attribute
            will be verified.
            </para>
            <para>
            The changed/inserted objects will be copied with all field
            values when <paramref name="allFields"/> is set to <c>true</c>;
            otherwise, the <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            attribute is obeyed and such attributed fields will not be
            copied.
            </para>
            <para>
            The CopyTo method is executed non-atomically; the target IObjectScope
            might contain modifications when CopyTo is aborted.
            <para>
            Depending on the objects to be copied and the data model used
            newly created objects might lead to unwanted duplicates; if 
            this needs to be avoided, the new objects from the container
            must be checked with the current data from the target object
            scope beforehand.
            </para>
            </para>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.Verify"/>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            </remarks>
            <param name="objectScope">The target IObjectScope to copy 
            to.</param>
            <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.</param>		
            <param name="allFields">Specifies if all object fields are 
            to be copied; 
             if <c>false</c> copies only fields not marked with the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/> attribute.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean,Telerik.OpenAccess.FetchPlan)">
            <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected. Can protect attributed object fields
            from being overwritten with the ObjectContainer content.
            </summary>
            <remarks>
            <para>
            This method can be used to replay the changes made offline
            into a database. It is recommended, that you verify all changed
            objects with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.All"/> and lock them pessimistically
            with <see cref="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock"/>. 
            </para>
            <para>
            Only objects marked as <c>Verifiable</c> in the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
            attribute
            will be verified.
            </para>
            <para>
            The changed/inserted objects will be copied with all field
            values when <paramref name="allFields"/> is set to <c>true</c>;
            otherwise, the <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            attribute is obeyed and such attributed fields will not be
            copied.
            </para>
            <para>
            The CopyTo method is executed non-atomically; the target IObjectScope
            might contain modifications when CopyTo is aborted.
            <para>
            Depending on the objects to be copied and the data model used
            newly created objects might lead to unwanted duplicates; if 
            this needs to be avoided, the new objects from the container
            must be checked with the current data from the target object
            scope beforehand.
            </para>
            </para>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.Verify"/>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            </remarks>
            <param name="objectScope">The target IObjectScope to copy 
            to.</param>
            <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.</param>		
            <param name="allFields">Specifies if all object fields are 
            to be copied; 
             if <c>false</c> copies only fields not marked with the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/> attribute.</param>
            <param name="fetchPlan">The FetchPlan used to load the original data from the database.</param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Contains(System.Object)">
            <summary>
            Checks if a persistent object is contained by this ObjectContainer.
            </summary>
            <remarks>
            Only persistent objects can be contained in an ObjectContainer.
            </remarks>
            <param name="obj">The object to test for.</param>
            <returns>Value <c>true</c> if the object is known; 
            <c>false</c> otherwise</returns>
            <exception cref="T:System.InvalidCastException">When 
            <paramref name="obj"/> is not an instance of a
            persistence-capable class (not marked with the [Persistent]
            attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(Telerik.OpenAccess.IObjectId)">
            <summary>
            Evicts a contained clean/proxy object from the container.
            </summary>
            <remarks>
            This call will actually do not evict instances != Persistent_Deleted from the container.
            The reason is, that the container holds strong references to its
            managed instances.
            <para>
            When there is no instance with the given object id in this container,
            no exception is thrown.
            </para>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)"/>
            </remarks>
            <param name="oid">The database object identity object.</param>
            <exception cref="T:System.ArgumentException">
            When the oid instance is not given.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetPersistentVersion(System.Object)">
            <summary>
            Returns the persistent version information for persistent objects. 
            </summary>
            <remarks>
            <para>
            This method is only intended when serializing a ObjectContainer 
            content to XML etc., to be capable of restoring all information 
            from just the XML without accessing the database.
            </para>
            <para>
            The persistent version information of a class marked as
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
            is a unique transaction identifier of
            the last transaction having modified this persistent object and
            might change in an unpredictable way.
            </para>
            </remarks>
             <returns>Version information of the object.</returns>
            <param name="verifiable">The object to verify.</param>
             <exception cref="T:System.ArgumentException">
             When <paramref name="verifiable"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="verifiable"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)">
            <summary>
            Sets the persistent version stamp for persistent objects of 
            verifiable classes. 
            </summary>
            <remarks>
            <para>
            This method is intended for advanced concurrency control only and
            useful only to avoid verification conflicts during 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>.
            </para>
            <para>
            A value set manually might be overwritten by the value 
            <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/> generates.
            </para>
            <para>
            The class of the <paramref name="verifiable"/> parameter must 
            be marked as 
            <c>Verifiable</c> in the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see>
            attribute declaration.
            </para>
            </remarks>
             <exception cref="T:System.ArgumentException">
             Class of <paramref name="verifiable"/> was not marked 
             as <c>Verifiable</c> during enhancement.
             </exception>
            <param name="verifiable">The verifiable object.</param>
            <param name="version">The new version information.</param>
             <exception cref="T:System.ArgumentException">
             When <paramref name="verifiable"/> is not contained in this
             ObjectContainer.</exception>
             <exception cref="T:System.InvalidCastException">When 
             <paramref name="verifiable"/> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Extent(System.Type)">
            <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
            <remarks>
            <para>
            When <c>null</c> is passed as the <paramref name="type"/>, all objects 
            in the container are included and no type filtering happens.
            </para>
            <para>
            Only instances of state clean, dirty and new are returned. Instances
            which have been removed by <see cref="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)"/> are not included
            in the result.
            </para>
            </remarks>
            <param name="type">The type filter or <c>null</c>.</param>
            <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Extent``1">
            <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
            <remarks>
            <para>
            Only instances of state clean, dirty and new are returned. Instances
            which have been removed by <see cref="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)"/> are not included
            in the result.
            </para>
            </remarks>
            <typeparam name="T">The type of the objects to be returned.</typeparam>
            <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator">
            <summary>
            Returns an enumerator that can enumerate all objects directly reachable from
            the named sets not marked as to be deleted.
            </summary>
            <remarks>
            If the containers content is changed while enumerating, the
            result is not predictable. This especially applies, when
            an object is deleted.
            </remarks>
            <returns>New enumerator object.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator(System.Type)">
            <summary>
            Returns an enumerator that can
            enumerate all objects directly reachable from the named sets not
            marked as to be deleted and of a given class.
            </summary>
            <remarks>
            The result is scoped to the class passed, and only such objects 
            will be retrieved by the enumerator object.
            <para>
            If the containers content is changed while enumerating, the
            result is not predictable. This especially applies, when
            an object is deleted.
            </para>
            </remarks>
            <param name="scope">The class used for scoping.</param>
            <returns>New enumerator object.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator">
            <summary>
            Returns an enumerator that can iterate over all contained objects.
            </summary>
            <remarks>
            The returned enumerator will give back objects of all types.
            <para>
            If the containers content is changed while enumerating, the
            result is not predictable. 
            </para>
            </remarks>
            <returns>New enumerator object.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator(System.Type)">
            <summary>
            Returns an enumerator that can iterate over all contained 
            objects of a given class.
            </summary>
            <remarks>
            <para>
            The result is scoped to the class passed, and only such objects 
            will be retrieved by the returned enumerator.
            </para>
            <para>
            If the containers content is changed while enumerating, the
            result is not predictable. 
            </para>
            </remarks>
            <param name="scope">The class used for scoping.</param>
            <returns>New enumerator object.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetContent">
            <summary>
            Creates a new change set with the current content.
            </summary>
            <remarks>
            The returned change set instance will contain a serializable copy of the
            complete content of this ObjectContainer.
            <para>
            A <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> can be applied to
            another ObjectContainer instance with the <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)"/>
            method.
            </para>
            </remarks>
            <returns>
            A serializable object with the current content.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)">
            <summary>
            Creates a new change set with the actual modifications.
            </summary>
            <remarks>
            The returned change set instance will contain a serializable copy of
            all added,modified or deleted objects of this ObjectContainer.
            <para>
            A <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> can be applied to
            another ObjectContainer instance with the <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)"/>
            method.
            </para>
            <para>
            Using the <see cref="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)"/> method allows
            to make the changes of this ObjectContainer persistent in a database.
            The <paramref name="verificationMode"/> controls the amount of data 
            in the result; it does not control the verification used during CommitChanges.
            </para>
            </remarks>
            <returns>
            A serializable object containing the current modífications.
            </returns>
            <param name="verificationMode">Controls, which objects must be present
            in the result (all or changed).</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
            <summary>
            Updates this instance with the information from a change set.
            </summary>
            <param name="changes">The changes to be applied.</param>
            <remarks>
            <para>
            The <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> contains a serializable
            set of modifications to this container.
            </para>
            <para>
            Instances of <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> can be obtained
            by the <see cref="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)"/>  or <see cref="M:Telerik.OpenAccess.ObjectContainer.GetContent"/> methods.
            </para>
            </remarks>
            <returns>An array of all IObjectId instances representing objects that are added, refreshed or removed from the container.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet,System.Boolean)">
            <summary>
            Updates this instance with the information from a change set.
            </summary>
            <param name="changes">The changes to be applied.</param>
            <param name="force">Force mode</param>
            <remarks>
            <para>
            The <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> contains a serializable
            set of modifications to this container.
            </para>
            <para>
            Instances of <see cref="T:Telerik.OpenAccess.ObjectContainer.ChangeSet"/> can be obtained
            by the <see cref="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)"/>  or <see cref="M:Telerik.OpenAccess.ObjectContainer.GetContent"/> methods.
            </para>
            <para>
            The <paramref name="force"/> parameter can be used to force
            a possible overwriting of the ObjectContainer instance when an active 
            transaction is present.
            </para>
            </remarks>
            <returns>An array of all IObjectId instances representing objects that are added, refreshed or removed from the container.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ReferenceCollector#Add(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Boolean,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#lookupAndCreate(Telerik.OpenAccess.SPI.IPersistenceManager,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#insertObject(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#createSM4FCO(System.Type,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#createSM4SCO(System.Type,Telerik.OpenAccess.SPI.OfflineStateManager,System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#copyMutable(System.Object,Telerik.OpenAccess.SPI.OfflineStateManager,System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#isTemporaryId(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Telerik#OpenAccess#SPI#ObjectRepository#setModified">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.Hello(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Custom deserialization method implemenation.
            </summary>
            <param name="sender">The deserialization event sender.</param>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization method implemenation.
            </summary>
            <param name="sinfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <remarks>
            <para>
            The container must have an inactive transaction. When the
            transaction of the container is active, a 
            <see cref="T:System.Runtime.Serialization.SerializationException"/> will occur.
            </para>
            <para>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom deserialization method implemenation.
            </summary>
            <remarks>
            This method supports the .NET Framework infrastructure and is 
            not intended to be used directly from application code.
            </remarks>
            <param name="sinfo">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.MarkContentAsNew">
            <summary>
            Marks the complete container content as new.
            </summary>
            <remarks>
            Marking the content as new is useful if the data should be copied from one database to another. 
            The destination database should not contain data with the same primary keys. The data will be 
            handled as new data, it cannot be used for an update process of existing data.
            </remarks>
            <example>Create copy of all Person objects to a second database
            <code>
            // you need 2 connection nodes in the app.config file (SourceDatabaseConnection and DestinationDatabaseConnection)
            IObjectScope sourceScope = Database.Get("SourceDatabaseConnection").GetObjectScope();
            
            // Step1: Fill container from source database
            ObjectContainer c = new ObjectContainer();
            c.CopyFrom(sourceScope, "allPersons", sourceScope.Extent&lt;Person&gt;().ToList(), new FetchGroupCollector(FetchGroupCollector.DeepFetchGroup));
            sourceScope.Dispose();
            
            // Step 2: Mark content as new
            c.ConvertAllToNew();
            
            // Step 3: Deliver content to destination database
            IObjectScope destinationScope = Database.Get("DestinationDatabaseConnection").GetObjectScope();
            destinationScope.Transaction.Begin();
            c.CopyTo(destinationScope, Telerik.OpenAccess.ObjectContainer.Verify.None, false);
            destinationScope.Transaction.Commit();
            </code>
            </example>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.MarkContentAsClean">
            <summary>
            Marks the complete container content as clean.
            </summary>
            <remarks>
            Executing this function will break the synchronization to the scope. It is useful to track changes on 
            objects that you do not want to copy back. Use with care.
            <para>
            Usage Example:
            </para>
            <para>
            <list type="bullet">
            <item>Fill container with new objects.</item>
            <item>Call MarkContentAsClean.</item>
            <item>Start changing the container content.</item>
            <item>Use container.Transaction.DirtyObjects to access the dirty objects.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.Transaction">
            <summary>
            Gets the associated transaction instance.
            </summary>
            <remarks>
            There is exactly one <see cref="T:Telerik.OpenAccess.ITransaction"/> instance associated 
            with each ObjectContainer instance. 
            </remarks>
            <value>The associated transaction instance.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.DBConnection">
            <summary>
            Controls the database connection.
            </summary>
            <remarks>
            This property is used from the Telerik.OpenAccess.ObjectProvider
            instances.
            <seealso cref="T:Telerik.OpenAccess.Util.IDBConnection"/>
            </remarks>
            <value>An instance of IDBConnection.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.AutoSync">
            <summary>
            Controls the transactional behavior of the database connection.
            </summary>
            <remarks>
            If a DBConnection has been set and AutoSync is set to true,
            transaction demarcation, i.e. Begin, Commit, Rollback or Checkpoint
            is propagated to the DBConnection. 
            <seealso cref="T:Telerik.OpenAccess.Util.IDBConnection"/>
            <seealso cref="P:Telerik.OpenAccess.ObjectContainer.DBConnection"/>
            </remarks>
            <value>An instance of IDBConnection.</value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.IsModified">
            <summary>
            Indicates whether the ObjectContainer was modified.
            </summary>
            <value><c>true</c> if the ObjectContainer was 
            modified, <c>false</c> otherwise.</value>
            <remarks>
            If the ObjectContainer was modified (either by adding/removing
            an object or by modifying an object), this property will be
            <c>true</c>.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.IsReadOnly">
            <summary>
            Controls the modification behavior of the ObjectContainer.
            </summary>
            <value>
            If the value is <c>true</c>, modifcations to the container are 
            not allowed. Attempting to modify a container set to 
            read-only results in a 
            <see cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException"/>.
            </value>
            <remarks>
            An ObjectContainer can be set/unset read-only multiple times.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.Count">
            <summary>
            Gets the number of persistent objects
            in the ObjectContainer including proxy objects and objects
            marked as to be deleted.
            </summary>
            <value>The number of persistent objects.
            </value>
            <remarks>
            The number returned includes objects of all states, even
            objects marked as to be removed.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.Tracking">
            <summary>Gets the associated change tracking interface.</summary>
            <remarks>The returned instance allows change behavior to be added.</remarks>
            <value>The associated tracking instance.</value>
        </member>
        <member name="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy">
            <summary>
            Occurs when the user attempts to access the content of a proxy (hollow) object.
            </summary>
            <remarks>
            <para>
            The ResolveProxy event is raised when the user attempts to access the content of a
            hollow (proxy) object. When a proper handling is made within the event handler, the
            otherwise resulting exception can be avoided. 
            </para>
            <para>
            When <see cref="P:Telerik.OpenAccess.ObjectContainer.Tracking"/> is used and a write access is attempted, the ResolveProxy
            event occurs after the ChangingEvent and before the ChangedEvent.
            </para>
            <para>
            Please notice, that modifying an ObjectContainer with <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)"/> is only
            permitted when no transaction is active. This is to prevent local modifications to be
            overwritten by a remotely obtained change set. In cases where such modifications are
            required, the <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet,System.Boolean)"/> method
            must be used with a force=true parameter.
            </para>
            </remarks>
            <example>
            Using a customer provided event handler to lazily resolve a proxy instance (schematic).
            <code>
            private void LazyProxy(object sender, ObjectContainer.ResolveProxyEventArgs e)
            {
                ObjectContainer another = new ObjectContainer();
                using(IObjectScope sco = scope.Database.GetObjectScope())
                {   // opening a temporary object scope
                    sco.Transaction.Begin();
                    foreach(IObjectId oid in e.ProxyIdentity)
                    {
                        object obj = sco.GetObjectById(oid);
                        // copy the absent object (or more) to the container
                        another.CopyFrom(sco,"LazyLoaded",obj,null);
                    }
                    // no need to commit here
                    sco.Transaction.Rollback();
                }
                ObjectContainer oc = (ObjectContainer)sender;
                // A container can only receive modifications from a ChangeSet when
                // no user made modifications are pending.
                // Here we temporarily need to commit a pending transaction.
            	   bool wasActive = oc.Transaction.IsActive;
            	   if (wasActive)
                    oc.Transaction.Commit();
            
                oc.Apply(another.GetContent()); // or Apply(another.GetContent(), true)
            
            	   if (wasActive)
            	       oc.Transaction.Begin();
            }
            </code>
            </example>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet,System.Boolean)"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)"/>
            <seealso cref="P:Telerik.OpenAccess.ObjectContainer.Transaction"/>
            <seealso cref="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)"/>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.ChangeSet">
            <summary>
            Serializable change set of an ObjectContainer.
            </summary>
            <remarks>
            Instances of this class can be obtained from the 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.GetContent"/> and 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)"/> and can
            be used with the <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)"/>
            and <see cref="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)"/> methods.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.format">
            <summary>
            Compatibility information.
            </summary>
            <remarks>Used for serialization.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.changes">
            <summary>
            The binary encoded changes in byte form.
            </summary>
            <remarks>Used for serialization.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor">
            <summary>
            Constructs a new change set.
            </summary>
            <remarks>Used for serialization.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor(System.Object)">
            <summary>
            Constructs a new change set.
            </summary>
            <remarks>Used for WSDL purposes.</remarks>
            <param name="x">The source object, usually a WSDL generated instance OR <c>null</c>.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.CopyTo(System.Object)">
            <summary>
            Copies the data of this instance to another.
            </summary>
            <remarks><para>Used for WSDL purposes.</para>
            <para>
            This method can be used to copy the content to a user-supplied change set
            holder instance of a user defined type (not derived from ObjectContainer.ChangeSet).
            For this the class must contain two public fields 'format' and 'changes' of the
            same type as the ones from ObjectContainer.ChangeSet.
            </para>
            </remarks>
            <param name="target">Copy target instance.</param>
            <returns>The target instance</returns>
            <exception cref="T:System.Exception">Wrong type of target.</exception>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite">
            <summary>
            Protects members of persistence capable classes from being 
            overwritten during ObjectContainer.CopyTo() .
            </summary>
            <remarks>
             <!--
             The protection occurs only if the actual return value of the
             <see cref="ObjectMerger.ProtectOverwrite">
             ObjectMerger.ProtectOverwrite</see>
             method is <c>true</c> for the given object.
             -->
             The protection occurs only if the actual value of the
             <cref name="ObjectMerger.ProtectOverwrite"/>
             parameter is <c>true</c>.
             <!--
            <seealso cref="ObjectMerger"/>
            <seealso cref="ContainerMerger"/>
            -->
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.Verify">
            <summary>
            Specification of the conflict detection and resolution for importing 
            objects into an object scope.
            </summary>
            <remarks>
            <!--<para>
            Only persistent objects marked as <c>Verifiable</c> in the 
            <see cref="PersistentAttribute">[Persistent(Verifiable=true)]</see>
            attribute will be verified.
            </para>-->    
            <para>
            Values of this type are used by the 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> methods.
            </para>
            </remarks>
            <example>
            <code>
            ...
            [Persistent(Alias="mymodel.Person")]
            [Serializable]
            public class Person
            {
            	public string		firstName;
            	...
            };
            ...
            </code>
            </example>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.All">
            <summary>
            All objects from the object source context will be verified 
            (except new objets).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Changed">
            <summary>
            Only changed/deleted objects from the object source context will
             be verified.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.None">
            <summary>
            No object from the object source context will be verified.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock">
            <summary>
            All verified objects from the source context will also get locked.
            The lock mode used depends on action required (read or write/delete).
            The lock will be granted even if the optimistic verification 
            fails (there was
            a concurrent change to the object). 
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs">
            <summary>
            Provides data for an object resolution event.
            </summary>
            <remarks>
            Instances of this class will be used with the <see cref="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy"/> event.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.ProxyIdentity">
            <summary>
            Gets the database identities of the proxy instances which are requested to be resolved.
            </summary>
            <remarks>
            For an example please see the <see cref="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy"/> event.
            </remarks>
            <value>
            The database object identities for the instances to be resolved.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.FieldName">
            <summary>
            Gets the name of the field which was accessed for Read or Write.
            </summary>
            <remarks>
            The name of the field could be used to decide about the FetchPlan to be used 
            for retrieving the instance.
            </remarks>
            <value>
            The name of the accessed field when read or write access is performed; null otherwise.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Operation">
            <summary>
            Indicates the attempted operation.
            </summary>
            <remarks>
            Write access handling could also be done via <see cref="P:Telerik.OpenAccess.ObjectContainer.Tracking"/> ChangingEvent
            handling.
            </remarks>
            <value>
            Indication of the attempted operation.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action">
            <summary>
            Specification about an attempted operation on proxy instances.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Read">
            <summary>
            A read access was attempted.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Write">
            <summary>
            A write access was attempted.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Delete">
            <summary>
            A delete access was attempted.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventHandler">
            <summary>
            Represents the method that will handle the ResolveProxy event.
            </summary>
            <remarks>
            <para>
            The <see cref="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy"/> event occurs when the content of hollow (proxy)
            object is attempted to access.
            </para>
            <para>
            For an example see the <see cref="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy"/> event.
            </para>
            </remarks>
            <param name="sender">The ObjectContainer instance in which the proxy is managed.</param>
            <param name="e">The ResolveProxyEventArgs instance containing the data for the event.</param>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.MoveNext">
            <summary>
            Move enumerator to next object.
            </summary>
            <returns>true, if there is a next element; otherwise false</returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.Reset">
            <summary>
            Moves cursor to the position before the first element.
            </summary>		
        </member>
        <member name="P:Telerik.OpenAccess.ObjectContainerEnumerator.Current">
            <summary>
            Returns the current element of this enumerator.
            </summary>		
        </member>
        <member name="T:Telerik.OpenAccess.ObjectState">
            <summary>
            Specifies the state of a persistent object.
            </summary>
            <remarks>
            The state is returned by the GetState method of the context class.
            <para>
            Instances of this enumeration can be used with the 
            <see cref="M:Telerik.OpenAccess.ITransaction.Objects``1(Telerik.OpenAccess.ObjectState)"/> method to 
            obtain persistent objects of the specified type(s).
            </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetState(System.Object)"/>
            <seealso cref="M:Telerik.OpenAccess.OpenAccessContextBase.GetState(System.Object,System.String)"/>
            <seealso cref="T:Telerik.OpenAccess.ITransaction"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskDeleted">
            <summary>Mask representing all objects marked as to be deleted.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Deleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NewDeleted"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskNew">
            <summary>Mask representing all objects marked as to be inserted.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.New"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NewDeleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.DetachedNew"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskDirty">
            <summary>Mask representing all objects marked as changed.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Dirty"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.New"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Deleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NewDeleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.DetachedDirty"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskLoaded">
            <summary>Mask representing all objects marked as loaded.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Clean"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Dirty"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.New"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Deleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NewDeleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.DetachedClean"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskManaged">
            <summary>Mask representing all objects managed by a context.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NotLoaded"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Clean"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Dirty"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.New"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.Deleted"/>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NewDeleted"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.MaskNoMask">
            <summary>Object is not managed by a context.</summary>
            <seealso cref="F:Telerik.OpenAccess.ObjectState.NotManaged"/>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.NotManaged">
            <summary>Object is not managed by a context.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.NotLoaded">
            <summary>Object was not loaded yet; ObjectContainer: fields cannot be accessed; OpenAccessContext: fields are lazy loaded.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Clean">
            <summary>Object was not modified.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.DetachedClean">
            <summary>Object is detached and was not modified.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Dirty">
            <summary>Object was modified and needs to be updated.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.DetachedDirty">
            <summary>Object is detached and was modified and needs to be updated.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Deleted">
            <summary>Object was marked as to be removed.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.New">
            <summary>Object was marked as to be inserted.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.DetachedNew">
            <summary>Object is detached and was marked as to be inserted.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.NewDeleted">
            <summary>Object was marked as to be inserted and later as to be removed.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Removed">
            <summary>Object was marked as to be removed.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Hollow">
            <summary>Object was not loaded yet; ObjectContainer: fields cannot be accessed; OpenAccessContext: fields are lazy loaded.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.ObjectState.Detached">
            <summary>Object is detached.</summary>
        </member>
        <member name="T:Telerik.OpenAccess.OIDHelper">
            <summary>
            Helper class for database object identity processing.
            </summary>
            <remarks>
            To obtain an instance of this class use the <see cref="P:Telerik.OpenAccess.Database.OID"/> property.
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.Database"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
        </member>
        <member name="M:Telerik.OpenAccess.OIDHelper.FromString(System.String)">
            <summary>
            Creates a new database object identifier from an externalized form.
            </summary>
            <remarks>
            This method can be used to generate a <see cref="T:Telerik.OpenAccess.IObjectId"/> instance suitable
            for use with the <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> method.
            <para>
            The <paramref name="externalizedForm"/> parameter must be in the <c>{type}:{key}</c>
            form. This representation is produced by the <see cref="M:Telerik.OpenAccess.OIDHelper.ToString(Telerik.OpenAccess.IObjectId)"/>
            method.
            </para>
            <para>
            This method requires, that <see cref="T:System.Type"/> references can be resolved by name. 
            When a type cannot be resolved, check that the respective type has been used by 
            the application before.
            </para>
            <para>
            To obtain an instance of OIDHelper use the <see cref="P:Telerik.OpenAccess.Database.OID"/> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">No external string representation given.</exception>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">The external string representation could not be parsed.</exception>
            <param name="externalizedForm">String representation of a database object id.</param>
            <returns>New IObjectId instance.</returns>
            <seealso cref="T:Telerik.OpenAccess.IObjectId"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
        </member>
        <member name="M:Telerik.OpenAccess.OIDHelper.ToString(Telerik.OpenAccess.IObjectId)">
            <summary>
            Creates the externalized representation of a database object identity.
            </summary>
            <remarks>
            This method can be used to generate a string suitable for external use (WebService).
            <para>
            The returned string value can be reparsed by the <see cref="M:Telerik.OpenAccess.OIDHelper.FromString(System.String)"/> method and
            has the general form of <c>{type}:{key}</c> where type is a type identifier and key the
            string representation of the identifying key.
            </para>
            <para>
            You can  obtain an instance of type <see cref="T:Telerik.OpenAccess.IObjectId"/> by using the 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/> method.
            </para>
            <para>
            To obtain an instance of OIDHelper use the <see cref="P:Telerik.OpenAccess.Database.OID"/> property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">No oid instance given.</exception>
            <param name="oid">Database object identifier.</param>
            <returns>Externalized form for the <paramref name="oid"/>.</returns>
            <seealso cref="T:Telerik.OpenAccess.IObjectScope"/>
            <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
        </member>
        <member name="M:Telerik.OpenAccess.OIDHelper.ParseObjectId(System.Type,System.String)">
             <summary>
             Creates database object identifiers by parsing a string representation for a given type.
             </summary>
             <remarks>
             The returned database object id can be used with
             <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> to retrieve the persistent object.
            <para>
            To obtain an instance of OIDHelper use the <see cref="P:Telerik.OpenAccess.Database.OID"/> property.
            </para>
             </remarks>
             <param name="oidstr">
             Database object ID in string form.
             </param>
             <param name="t">
             The type of the object with the specified id. For internal identity,
             null can be specified.
             </param>
             <returns>
             New database object identifier.
             </returns>
        </member>
        <member name="M:Telerik.OpenAccess.OIDHelper.GetObjectId(System.Object)">
             <summary>
             Returns the object identity for the passed object.
             </summary>
             <remarks>
             This method returns a value != <c>null</c> when the object is enhanced 
             for single or muliple field identity, regardless of the 
             <see cref="T:Telerik.OpenAccess.IObjectContext">managing context</see>. When internal identity
             is used, the persistence capable object must be managed to return a oid instance.
            <para>
            To obtain an instance of OIDHelper use the <see cref="P:Telerik.OpenAccess.Database.OID"/> property.
            </para>
             </remarks>
             <returns>New database object identifier or <c>null</c> when internal identity is used and
             the persistence capable instance is not in managing context.</returns>
             <param name="persistenceCapable">The enhanced object.</param>
             <seealso cref="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)"/>
             <seealso cref="T:Telerik.OpenAccess.IObjectContext"/>
             <exception cref="T:System.ArgumentNullException">No instance given.</exception>
             <exception cref="T:Telerik.OpenAccess.OpenAccessException">No persistence capable instance given.</exception>
        </member>
        <member name="T:Telerik.OpenAccess.Query`1">
            <summary>
            Class for executing queries.
            </summary>
            <remarks>
            <para>
            Instances of this class represent OQL or SQL queries.
            </para>
            <para>
            An instance of this interface
            can be obtained from the 
            <see cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)">IObjectScope.GetOqlQuery&lt;T&gt;</see> or
            <see cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)">
             IObjectScope.GetSqlQuery&lt;T&gt;</see> methods.
            </para>
            <para>
            Queries are always executed in an actual transaction context.
            </para>
            <para>
            An OQL-query can contain parameters in its WHERE-clause, 
            that have to be suplied later for execution.
            Parameters are marked with $1, $2, ... in the query expression and
            must be matched with the parameter values during query execution.
            </para>
            <para>
            The query execution is deferred until the result enumerator
            is used to retrieve the first result object.
            </para>
            Please see the Telerik.OpenAccess .NET OQL reference for more information about
            the OQL syntax.
            </remarks> 
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)">IObjectScope.GetOqlQuery&lt;T&gt;</seealso>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)">
             IObjectScope.GetSqlQuery</seealso>
            <seealso cref="T:Telerik.OpenAccess.QueryResultEnumerable`1"/>
            <seealso cref="T:Telerik.OpenAccess.QueryResultList`1"/>
            <seealso cref="T:Telerik.OpenAccess.QueryResultBindingList`1"/>
             <typeparam name="T">Return type of the executed query.
             </typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.#ctor(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.IQuery)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Constructs a new Query object that can be executed.
            </remarks>
            <param name="scope">The <see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see> object.</param>
            <param name="query">The <see cref="T:Telerik.OpenAccess.IQuery"/>IQuery object.</param>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList">
            <overloads>Executes the specified query and returns the result.</overloads>
            <summary>
            Executes the specified query and returns the result as 
             QueryResultBindingList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
            <returns>The result of the query execution.</returns>
            <remarks>
             The Query is executed immediately and the result will be
             completely held in memory.
            </remarks>
            <seealso cref="T:System.ComponentModel.BindingList`1"/>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList(System.Object[])">
            <overloads>Executes the specified query and returns the result.</overloads>
            <summary>
            Executes the specified query using the paramaters passed
            and returns the result as QueryResultBindingList.
            </summary>
            <param name="parameters">The query parameters to use.</param>
            <returns>The result of the
             query execution.</returns>
            <remarks>
             The Query is executed immediately and the result will be
             completely held in memory.
            </remarks>
            <seealso cref="T:System.ComponentModel.BindingList`1"/>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteList">
            <overloads>Executes the specified query and returns the result.</overloads>
            <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
            <returns>The result of the query execution.</returns>
            <remarks>
             The Query is executed lazy. See the properties at 
             <see cref="T:Telerik.OpenAccess.QueryResultList`1">QueryResultList&lt;T&gt;</see>.
            </remarks>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteList(System.Object[])">
            <overloads>Executes the specified query and returns the result.</overloads>
            <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
            <param name="parameters">The query parameters to use.</param>
            <returns>The result of the query execution.</returns>
            <remarks>
             The Query is executed lazy. See the properties at 
             <see cref="T:Telerik.OpenAccess.QueryResultList`1">QueryResultList&lt;T&gt;</see>.
            </remarks>
            <seealso cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable">
            <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
            <returns>The result of the query execution.</returns>
            <remarks>
            The returned result object needs to be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable(System.Object[])">
            <summary>
            Executes the specified query using the paramaters passed
            and returns the result.
            </summary>
            <param name="parameters">The query parameters to use.</param>
            <returns>The result of the
             query execution.</returns>
            <remarks>
            The returned result object needs to be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect">
            <summary>
            Executes the specified query and returns no result.
            This method can only be used for queries without parameters.
            </summary>
            <remarks>
             This method can be used to execute a direct SQL statement or
             an stored proceduer without result.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect(System.Object[])">
            <summary>
            Executes the specified query using the paramaters passed
            and returns no result.
            </summary>
            <param name="parameters">The query parameters to use.</param>
            <returns>The result of the
             query execution.</returns>
            <remarks>
             This method can be used to execute a direct SQL statement or
             an stored proceduer without result.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.IgnoreUncommitted">
            <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
            <remarks>
            This property is only an optimization hint. 
            Also with IgnoreCache==false, uncommitted data might be 
            considered by the query.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
             <para>
             If working in an optimistic scenario this will flush the 
             current changes to the server and keep the database
             transaction running until the <see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>
             transaction is committed or rollbacked.
             </para>
             <para>
             Persistence by reachability is maintained for the time of Flush(),
             but not for the time of Commit().
             </para>
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.ITransaction.Flush">IObjectScope.Transaction.Flush()</seealso>
            <value>True (default), if uncommitted changes can be ignored.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.Skip">
            <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
            <remarks>
            Together with <see cref="P:Telerik.OpenAccess.Query`1.MaxResultCount"/> this method can be used to implement paging.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            </remarks>
            <value>Amount of data to skip. (Default:0)</value> 
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.MaxResultCount">
            <summary>
            Limits the maximum number of instances to return.
            </summary>
            <remarks>
            This property can be used for performance optimizations, 
            if not all instances matching the query are required.
            <para>
            This method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            </remarks>
            <value>The maximum number of instances to return by query execution.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.ParallelFetch">
            <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
            <remarks>
            Parallel fetching allows the use of multiple result sets in a combined
            way for an improved performance at the possible expense of more data beeing fetched.
            </remarks>
            <value>
            <c>True</c> when parallel result fetching is allowed, <c>false</c> (default) otherwise.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.Prefetch">
            <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
            <remarks>
            Prefetching describes the number of objects that are 
            fetched in advance during client/server mode while using 
            an Enumerator.
            <para>Attention: In a pessimistic concurrency control scenario by default read-locks 
             are applied to these objects. 
            </para> 
            <para>
            The Prefetch method must be called before the query is compiled or
            executed as this setting changes the generated backend query.
            </para>
            <para>
            Allowed values are 0 to 32767, the default value is 0.
            </para>
            </remarks>
            <value>The prefetch value to be used.
            </value>
            <returns>The query with applied prefetch settings.</returns>
            <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.BackendQuery">
            <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
            <remarks>
            The returned value may depend on the values of the query 
            parameters.
            A backend that does not use string representation for the query 
            language will return null.
             <para>
             Obtaining the value will currently when parameters are used.
             </para>
            </remarks>
            <value>The native query expression.
            </value>    
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.Expression">
            <summary>
            Provides the query expression from which this query was created.
            </summary>
            <value>The query expression.
            </value>    
            <remarks>
            The returned value is the value as given from the application;
            query parameters will not be resolved yet.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Query`1.Context">
            <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
            <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>    
            <remarks>
            The returned value is the context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>) 
             in which scope this query will be executed.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.QueryResultBindingList`1">
            <summary>
            Typed result of a database query execution.
            </summary>    
            <remarks>
            <para>
             The Query is executed immediately and the result will be
             completely held in memory.
             </para>
            <para>
            Instances of this type can be obtained from the
            <see cref="M:Telerik.OpenAccess.Query`1.ExecuteBindingList">Query.ExecuteBindingList&lt;T&gt;</see> methods.
            </para>
             <para>
             This special result type should be used to bind 
             the query result directly to the UI elements
             </para>
             <para>
             How add and remove functionaliy, f.e. from a GridView is 
             handled is defined via the 
             <see cref="T:Telerik.OpenAccess.IPersistentBehavior">persistent behavior</see> 
             functionality.
             </para>
            </remarks>
            <typeparam name="T">The result type of the query.</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.AddNewCore">
            <summary>
            Adds a new item to the end of the collection.
            </summary>
            <returns>The item that was added to the collection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
            <param name="index">The zero-based index where the item is to be inserted.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to replace.</param>
            <param name="item">The new value for the item at the specified index. 
            The value can be null for reference types.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items.
            </summary>
            <param name="property">
            A  <see cref="T:System.ComponentModel.PropertyDescriptor">System.ComponentModel.PropertyDescriptor</see> 
            that specifies the property to sort on.
            </param>
            <param name="direction">
            One of the <see cref="T:System.ComponentModel.ListSortDirection">System.ComponentModel.ListSortDirection</see> values.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveSortCore">
            <summary>
            Removes any sort applied.
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.DeleteBehavior">
            <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
            <value>The value if the list remove operations should delete the database data.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.AddBehavior">
            <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
            <value>The value if the list add operations should insert the data into the database.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SupportsSortingCore">
            <summary>
            Gets a value indicating whether the list supports sorting. This will return true;
            </summary>
            <value>The value indicating whether the list supports sorting.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.IsSortedCore">
            <summary>
            Gets a value indicating whether the list is sorted.
            </summary>
            <value>The value indicating whether the list is sorted.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortDirectionCore">
            <summary>
            Gets the direction the list is sorted.
            </summary>
            <value>The direction the list is sorted.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortPropertyCore">
            <summary>
            Gets the property descriptor that is used for sorting the list.
            </summary>
            <value>The property descriptor that is used for sorting the list.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.Context">
            <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
            <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>    
            <remarks>
            The returned value is the context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>) 
             in which scope this query will be executed.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.QueryResultEnumerable`1">
            <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>    
            <remarks>
             <para>
             The executed query is executed and the result is fetched lazy.
             </para>
            <para>
            Instances of this type can be obtained from the
            <see cref="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable">Query&lt;T&gt;.ExecuteEnumerable</see> methods.
            </para>
            <para>
            Instances of this type must be 
            <see cref="M:System.IDisposable.Dispose">disposed</see>
            to free underlying resources.
            The result object itself and all enumerator objects for it become
            invalid, the contained objects itself remain valid.
            </para>
            </remarks>
            <typeparam name="T">The result type of the query.</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetTotalCount">
            <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
            <remarks>
            <para>
            The purpose of this method is to obtain the total number of results prior to enumerating
            the result itself in a paging-independend fashion (e.g. the overall number of results, 
            not the number of results in the page).
            </para>
            <para>
            This method will execute a seperate auxilliary query (count(*)-query).
            </para>
            </remarks>
            <returns>The total number of results.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.ToList">
            <summary>
            Resolves the complete result and adds it to a real List
            </summary>
            <remarks>
            To free memory and server side resources the call to ToList will close the query result.
            </remarks>
            <returns>Generic List with the complete fetched result.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultEnumerable`1.Context">
            <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
            <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>    
            <remarks>
            The returned value is the context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>) 
             in which scope this query will be executed.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultEnumerable`1.OutParameter">
            <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
            <remarks>
            The key is the name of the parameter used in the stored procedure description.
            Having out parameters in a stored procedure forces the retrieval of the full 
            result set.
            </remarks>
            <value>
            Dictionary of out parameter values by name.
            </value>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)"/>
        </member>
        <member name="T:Telerik.OpenAccess.QueryResultList`1">
            <summary>
            Result of a database query execution.
            </summary>    
            <remarks>
            <para>
            Instances of this type can be obtained from the
            Query&lt;T&gt;.ExecuteList() methods.
            </para>
             <para>
             The Query is executed lazy and the result will be
             fetched in chunks defined by 
             <see cref="P:Telerik.OpenAccess.Query`1.Prefetch">Query&lt;T&gt;.Prefetch</see> 
             whenever a not yet loaded part is touched.
            </para>
            </remarks>
            <seealso cref="T:Telerik.OpenAccess.QueryResultBindingList`1"/>
            <seealso cref="T:Telerik.OpenAccess.QueryResultEnumerable`1"/>
            <typeparam name="T">The result type of the query.</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the 
            list.
            </summary>
            <param name="item">The object to locate in the 
            <see cref="T:System.Collections.Generic.IList`1">System.Collections.Generic.IList&lt;T&gt;</see></param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(`0)">
            <summary>
            Adds an item to the List.
            </summary>
            <param name="item">The object to add to the List.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Clear">
            <summary>
            Removes all items from the List.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(`0)">
            <summary>
             Determines whether the List contains a specific value.
            </summary>
            <param name="item">The object to locate in the List.</param>
            <returns>true if item is found in the List otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the List to an 
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from List. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">
            The object to remove from the List.
            </param>
            <returns>
            true if item was successfully removed from the List
            otherwise, false. This method also returns false if item is not found in
            the original List.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.GetTotalCount">
            <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
            <remarks>
            <para>
            The purpose of this method is to obtain the total number of results prior to enumerating
            the result itself in a paging-independend fashion (e.g. the overall number of results, 
            not the number of results in the page).
            </para>
            </remarks>
            <returns>The total number of results.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(System.Object)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The object to add to the list.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(System.Object)">
            <summary>
            Determines whether the list contains a specific value.
            </summary>
            <param name="value">The object to locate in the list.</param>
            <returns>true if the System.Object is found in the System.Collections.IList; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="value">The object to locate in the list.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The object to insert into the list.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="value">The object to remove from the list.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the list to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from list. The array must have zero-based 
            indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.QueryResultList`1.ToList">
            <summary>
            Resolves the complete result and adds it to a real List
            </summary>
            <remarks>
            To free memory and server side resources the call to ToList will close the query result.
            </remarks>
            <returns>Generic List with the complete fetched result.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.OutParameter">
            <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
            <remarks>
            The key is the name of the parameter used in the stored procedure description.
            Having out parameters in a stored procedure forces the retrieval of the full 
            result set.
            </remarks>
            <value>
            Dictionary of out parameter values by name.
            </value>
            <seealso cref="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)"/>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.Count">
            <summary>
            Gets the number of elements contained in the List.
            </summary>
            <value>The number of elements contained in the List.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the List is read-only.
            </summary>
            <value>Value indicating whether the List is read-only.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.Context">
            <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
            <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>    
            <remarks>
            The returned value is the context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>) 
             in which scope this query will be executed.
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the list has a fixed size.
            </summary>
            <value>true if list has fixed size; otherwise, false. </value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the list 
            is synchronized (thread safe).
            </summary>
            <value>
            true if access to the list is synchronized (thread safe); otherwise, false.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.QueryResultList`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the list.
            </summary>
            <value>
            An object that can be used to synchronize access to the list.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.TrackedBindingList`1">
            <summary>
            Base implementation of a generic binding list which tracks modifications.
            </summary>
            <remarks>
            <para>
            An instance of this class can be used to provide a tracked BindingList collection.
            </para>
            <para>
            You can derive your own BindingList from this class and use it in persistent objects.
            </para>
            </remarks>
            <typeparam name="T">The type of the elements in the list</typeparam>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ITrackedCollection">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.Track(System.Object,System.String,System.Object,Telerik.OpenAccess.SPI.ICollectionManager,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.OriginalData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.SetOriginalData(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.InvalidateOriginalData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.Reset(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.HasBeenReset">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.CurrentData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.GetFieldName">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.GetOwner">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.NoTrack">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.ManyToManyAdd(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.ManyToManyRemove(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITrackedCollection.PostLoad">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IProvideOriginalValues">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IProvideOriginalValues.ProvideOriginalCollection">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IProvideOriginalValues.ProvideOriginalMap">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor">
            <summary>
            Constructor generating new, empty and tracked BindingList.
            </summary>
            <remarks>
            The inner list is able to track modifications.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor generating new, tracked BindingList over the list given.
            </summary>
            <remarks>
            The given list is wrapped so that modifications are tracked.
            </remarks>
            <param name="src">List with existing values</param>
            <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetOwner">
            <summary>
            Gets the owner instance of this list.
            </summary>
            <remarks>
            The owner instance is the object which has a field with the name as returned 
            by <see cref="M:Telerik.OpenAccess.TrackedBindingList`1.GetFieldName"/> whose content is this list.
            </remarks>
            <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetFieldName">
            <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
            <remarks>
            The owning instance as returned by <see cref="M:Telerik.OpenAccess.TrackedBindingList`1.GetOwner"/> has a field with
            the returned name which references this list when change tracking is performed.
            </remarks>
            <returns>Field name of the owning instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.PostLoad">
            <summary>
            Override this function to get a notification after collection load.
            </summary>
            <remarks>
            If the collection has transient members they can be initialized by
            overriding this function.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.Equals(System.Object)">
            <summary>
            Compares for content equality including ordering.
            </summary>
            <param name="obj">Another TrackedBindingList instance for type <typeparamref name="T"/></param>
            <returns>True when content and order are equal</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetHashCode">
            <summary>
            Calculates a hash code for this instance.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Telerik.OpenAccess.TrackedList`1">
            <summary>
            Base implementation of a tracked list.
            </summary>
            <remarks>
            <para>
            You can either use the <see cref="T:System.Collections.Generic.IList`1"/> type for a collection
            field of a persistent type or use the <see cref="T:Telerik.OpenAccess.TrackedList`1"/> type directly.
            </para>
            <para>
            You can use your own sub classes for collection fields as long as a public empty constructor is
            available.
            </para>
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor">
            <summary>
            Creates a new empty and tracked list.
            </summary>
            <remarks>
            The created list instance is initially not tracking.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Int32)">
            <summary>
            Creates a new tracked list of the specified size.
            </summary>
            <remarks>
            The created list instance is initially not tracking.
            </remarks>
            <param name="count">Number of elements to reserve space for.</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new tracked list with the given content.
            </summary>
            <remarks>
            The created list instance is initially not tracking.
            </remarks>
            <param name="src">List instance to make tracked.</param>
            <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.GetOwner">
            <summary>
            Gets the owner instance of this list.
            </summary>
            <remarks>
            The owner instance is the object which has a field with the name as returned 
            by <see cref="M:Telerik.OpenAccess.TrackedList`1.GetFieldName"/> whose content is this list.
            </remarks>
            <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.GetFieldName">
            <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
            <remarks>
            The owning instance as returned by <see cref="M:Telerik.OpenAccess.TrackedList`1.GetOwner"/> has a field with
            the returned name which references this list when change tracking is performed.
            </remarks>
            <returns>Field name of the owning instance.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.PostLoad">
            <summary>
            Override this function to get a notification after collection load.
            </summary>
            <remarks>
            If the collection has transient members they can be initialized by
            overriding this function.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Equals(System.Object)">
            <summary>
            Compares for content equality including ordering.
            </summary>
            <param name="obj">Another TrackedList instance for type <typeparamref name="T"/></param>
            <returns>True when content and order are equal</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.GetHashCode">
            <summary>
            Calculates a hash code for this instance.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.IndexOf(`0)">
            <summary>hidden</summary>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the System.Collections.Generic.IList&lt;T&gt;.</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Insert(System.Int32,`0)">
            <summary>hidden</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the System.Collections.Generic.IList&lt;T&gt;.</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.RemoveAt(System.Int32)">
            <summary>hidden</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Add(`0)">
            <summary>hidden</summary>
            <param name="item">The object to add into the System.Collections.Generic.IList</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Clear">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Contains(`0)">
             <summary>hidden</summary>
             <param name="item">
             The object to locate in the
             System.Collections.Generic.ICollection&lt;T&gt;
             </param>
             <returns>true if item is found in the System.Collections.Generic.ICollection; otherwise,
            false.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.CopyTo(`0[],System.Int32)">
            <summary>hidden</summary>
            <param name="array">The one-dimensional array that 
            is the destination of the elements copied from System.Collections.Generic.ICollection&lt;T&gt;
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.Remove(`0)">
            <summary>hidden</summary>
            <returns>
            true if item was successfully removed from the
            System.Collections.Generic.ICollection&lt;T&gt;;<br/>
            otherwise, false. This method also returns false if item is not found in<br/>
            the original System.Collections.Generic.ICollection&lt;T&gt;.
            </returns>
            <param name="item">
            The object to remove from the
            System.Collections.Generic.ICollection&lt;T&gt;.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.GetEnumerator">
            <summary>hidden</summary>
            <value>A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through
                   the collection.</value>
        </member>
        <member name="M:Telerik.OpenAccess.TrackedList`1.CopyTo(System.Array,System.Int32)">
            <summary>hidden</summary>
            <param name="array">The one-dimensional System.Array that 
            is the destination of the elements copied from System.Collections.Generic.ICollection&lt;T&gt;
            The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Telerik.OpenAccess.TrackedList`1.Item(System.Int32)">
            <summary>hidden</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Telerik.OpenAccess.TrackedList`1.Count">
            <summary>hidden</summary>
            <value>The number of elements contained in the System.Collections.ICollection.</value>
        </member>
        <member name="P:Telerik.OpenAccess.TrackedList`1.IsReadOnly">
            <summary>hidden</summary>
            <value>true if the System.Collections.IList is read-only; otherwise, false.</value>
        </member>
        <member name="P:Telerik.OpenAccess.TrackedList`1.IsSynchronized">
            <summary>hidden</summary>
            <value>true if access to the System.Collections.ICollection is synchronized (threadsafe); otherwise, false.</value>
        </member>
        <member name="P:Telerik.OpenAccess.TrackedList`1.SyncRoot">
            <summary>hidden</summary>
            <value>An object that can be used to synchronize access to the System.Collections.ICollection.</value>
        </member>
        <member name="T:Telerik.OpenAccess.TransactionMode">
            <summary>
            Specification of the concurrency control for a transaction.
            </summary>
            <remarks>
            <para>
            Values of this type are used by the
            <see cref="P:Telerik.OpenAccess.ITransactionProperties.Concurrency">ITransactionProperties.Concurrency</see> property.
            This enum contains all concurrency settings which can be used by a database backend.
            </para>
            <para>
            In general, there are two main concurency modes, which can both be used 
            within a transaction:
            <list type="bullet">
            	<item>OPTIMISTIC</item>
            	<item>PESSIMISTIC</item>
            </list>
            </para>
            <para>
            Using optimistic transactions will cause the system
            to implicitly keep track of accessed objects and their modifications.
            Conflicts throughout the concurrent execution of operations are 
            detected late. Conflicts will lead to an 
            <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/> 
            during <see cref="M:Telerik.OpenAccess.ITransaction.Commit"/>.
            </para>
            <para>
            Using pessimistic transactions locks are set in the database backend
            when objects are accessed for read or write by a client.
            Conflicts are detected early and will cause a
            <see cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"/>. 
            For instance, GetObjectById will throw an exception
            when the object is already locked against reading access by another
            transaction.
            </para>
            <para>
            <list type="bullet">
            <item>
            For optimistic mode, 
            <see cref="F:Telerik.OpenAccess.TransactionMode.OPTIMISTIC_NO_LOST_UPDATES"/> has to be used.
            </item>
            <item>
            For pessimistic mode, 
            either <see cref="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_EXPLICIT"/> or
            <see cref="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED"/> has to be used.
            </item>
            </list>
            </para>
            <para>
            With PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED the database automatically 
            applies exclusive locks, when objects are read from the datastore.
            Locks are released atomically during commit or
            rollback, respectively.
            </para>
            <para>
            With PESSIMISTIC_EXPLICIT the database does not apply any exclusive
            locks automatically before commit.
            The <see cref="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">ITransaction.Lock</see> method can be 
            used to obtain
            exclusive locks manually. 
            All locks are released atomically during commit or
            rollback, respectively.
            Although no automatic locks are set, a write or delete operation of a 
            PESSIMISTIC_EXPLICIT
            transaction may be inhibited by locks held by other transactions.
            </para>
            <para>
            For more information please refer to the Open Access .NET Programmers Guide.
            </para>
            <seealso cref="P:Telerik.OpenAccess.IObjectScope.TransactionProperties"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionMode.OPTIMISTIC_NO_LOST_UPDATES">
            <summary>
            Commit will verify that modified objects have not been
            updated by another transaction meanwhile.
            </summary>
            <remarks>
            Concurrency control happens during transaction commit.
            Transaction conflicts will be detected during Transaction.Commit()
            and will cause <see cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException"/>.
            Transaction will verify that modified objects have not been
            updated by another transaction meanwhile. Only available with
            optimistic transactions.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_EXPLICIT">
            <summary>
            Write locks have to be set explicitely by ITransaction.Lock().
            </summary>
            <remarks>
            Concurrency control happens during entire transaction.
            Transaction conflicts will be detected for all reading/modifying
            methods and will cause <see cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"/> to be thrown.
            Write locks have to be set explicitely by 
            <see cref="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">ITransaction.Lock</see>.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED">
            <summary>
            All Objects are write-locked when fetched from the datastore.
            </summary>
            <remarks>
            Concurrency control happens during entire transaction.
            Transaction conflicts will be detected for all reading/modifying
            methods and will cause <see cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"/> to be thrown.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED_FIRST">
            <summary>
            First Object is write-locked when fetched from the datastore.
            </summary>
            <remarks>
            Concurrency control happens during entire transaction.
            Transaction conflicts will be detected for all reading/modifying
            methods and will cause <see cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"/> to be thrown.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.TransactionProvider">
             <summary>
             Specifies how transactions are provided.
             </summary>
             <remarks>
             <para>
             This enumeration value is used by <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider"/> and defines
             the providers for transactions. There are three providers which can be used:
             <list type="bullet">
            	    <item>Telerik.OpenAccess</item>
            	    <item>TransactionScope</item>
                 <item>Explicit</item>
             </list>
             </para>
             <para>
             <c>Telerik.OpenAccess</c> indicates the usage of built-in database transactions provided by Telerik.OpenAccess.
             These transactions can be accessed via the property <see cref="P:Telerik.OpenAccess.IObjectContext.Transaction"/>.
             <c>Telerik.OpenAccess</c> is the default setting.
             </para>
             <para>
             The values <c>TransactionScope</c> and <c>Explicit</c> require the usage of the namespace
             <see cref="N:System.Transactions"/>. This namespace is supported since .NET 2.0.
             <see cref="N:System.Transactions"/> provides two different transactional programming models:
             <list type="bullet">
            	    <item>an <i>implicit</i> model based on the 
                     <see cref="T:System.Transactions.TransactionScope"/> class.
                 </item>
                 <item>an <i>explicit</i> model using the class 
                     <see cref="T:System.Transactions.Transaction"/> or one of its subclasses.
                 </item>
             </list>
             </para>
             <para>
             For more information about implicit system transactions see <see cref="T:System.Transactions.TransactionScope"/>.
             </para>
             <para>
             For more information about explicit system transactions see <see cref="T:System.Transactions.Transaction"/>.
             </para>
             </remarks>
             <example>
             The following code fragment illustrates the usage of <c>Telerik.OpenAccess</c>:
             <code>
             // get database and set transaction provider
             Database database = Database.Get("DatabaseConnection1");
             database.Properties.TransactionProvider = TransactionProvider.Telerik.OpenAccess;
             
             using (IObjectScope os = database.GetObjectScope())
             {
                 // start transaction
                 os.Transaction.Begin();
             
                 // add new person to object scope
                 Person person = new Person("James", "Bond");
                 os.Add(person);
             
                 // commit transaction
                 os.Transaction.Commit();
             }
             </code>
             
             The following code fragment demonstrates the usage of <c>TransactionScope</c>:
             <code>
             // get database and set transaction provider
             Database database = Database.Get("DatabaseConnection1");
             database.Properties.TransactionProvider = TransactionProvider.TransactionScope;
            
             using (IObjectScope os = database.GetObjectScope())
             {
                 // start transaction
                 using (TransactionScope ts = new TransactionScope())
                 {
                     // add new person to object scope
                     Person person = new Person("James", "Bond");
                     os.Add(person);
            
                     // commit transaction
                     ts.Complete();
                 }
             }
             </code>
             
             The following code fragment shows the usage of <c>Explicit</c>:
             <code>
             // get database and set transaction provider
             Database database = Database.Get("DatabaseConnection1");
             database.Properties.TransactionProvider = TransactionProvider.Explicit;
            
             using (IObjectScope os = database.GetObjectScope())
             {
                 // start transaction
                 using (CommittableTransaction ct = new CommittableTransaction())
                 {
                     // enist our object scope in transaction explicitly
                     os.EnlistTransaction(ct);
            
                     // add new person to object scope
                     Person person = new Person("James", "Bond");
                     os.Add(person);
            
                     // commit transaction
                     ct.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionProvider.OpenAccess">
            <summary>
            Use built-in transactions provided by Telerik.OpenAccess.
            This is the default setting.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionProvider.TransactionScope">
            <summary>
            Use the implicit transactional programming model (TransactionScope).
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionProvider.Explicit">
            <summary>
            Use the explicit transactional programming model.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.TransactionProvider.Automatic">
            <summary>
            Use the actual available transaction.
            </summary>
            <remarks>
            If a System.Transaction.Current is set it is used, if not the Openaccess Transaction is used.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IFillerMethod">
            <summary>
            Interface for a method to calculates a collection of objects
            </summary>
            <remarks>
            <para>This type supports the code that is generated by the wizards and is not intended to be used directly from your code.</para>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IFillerMethod.Execute(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Method to implement that provides an enumerable of persistent capable objects
            </summary>
            <remarks>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
            <param name="os">An IObjectScope with a started transaction.</param>
            <returns>IEumerable containing persistent capable objects</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IFillerObjectCollector">
            <summary>
            Interface for a method to determine the referenced object that has to be included
            </summary>
            <remarks>
            <para>This type supports the code that is generated by the wizards and is not intended to be used directly from your code.</para>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IFillerObjectCollector.GetCollector">
            <summary>
            Used to get an IObjectCollector implementation.
            </summary>
            <remarks>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
            <returns>An IObjectCollector implementation used to calculate reference objects to be 
            included</returns>
        </member>
        <member name="T:Telerik.OpenAccess.Util.FillInstruction">
            <summary>
            Instructions to get a ChangeSet that can be applied to an ObjectContainer.
            </summary>
            <remarks>
            <para>This type supports the code that is generated by the wizards and is not intended to be used directly from your code.</para>
            A class with instructions that will be used to get a ChangeSet
            that can be Applied to an ObjectContainer.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstruction.Serialize(Telerik.OpenAccess.Util.FillInstruction)">
            <summary>
            Method to transform in a via ASP.NET transferable format
            </summary>
            <param name="fillInst">Object to serialize.</param>
            <returns>An object containing the serialized data.</returns>
            <remarks>See also <see cref="T:Telerik.OpenAccess.Util.IDBConnection"/></remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstruction.Deserialize(Telerik.OpenAccess.Util.FillInstructionData)">
            <summary>
            Method to transform back from a via ASP.NET transferable format
            </summary>
            <param name="data">Object to deserialize.</param>
            <returns>A FillInstruction with the deserialized data.</returns>
            <remarks>See also <see cref="T:Telerik.OpenAccess.Util.IDBConnection"/></remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstruction.#ctor(System.String,Telerik.OpenAccess.Util.IFillerMethod,Telerik.OpenAccess.Util.IFillerObjectCollector)">
            <summary>
            Constructs a FillInstruction.
            </summary>
            <param name="aName">A name for the set of resulting root objects.</param>
            <param name="aMethod">A method to get the root objects.</param>
            <param name="aCollector">An interface that provides the method to calculate the 
            referenced objects to include.</param>
            <remarks>See also <see cref="T:Telerik.OpenAccess.Util.IDBConnection"/></remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstruction.Execute(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Executes the filler method and closure method and calculates a ChangeSet
            with the resulting root objects bound to name.
            </summary>
            <param name="os">An IObjectScope with a started transaction.</param>
            <remarks>See also <see cref="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)"/></remarks>
            <returns>ChangeSet that can be applied to an ObjectContainer.</returns>
        </member>
        <member name="P:Telerik.OpenAccess.Util.FillInstruction.Name">
            <summary>
            Get the name of the method result.
            </summary>
            <remarks>Within a ChangeSet the root objects are bound to one or more
            named sets, to reflect for example different query results.
            </remarks>
            <value>The name for the result.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Util.FillerMethodOQLQuery">
            <summary>
            IFillerMethod implementation that executes an OQL query
            </summary>
            <remarks>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.#ctor(System.String)">
            <summary>
            Contructs a method object
            </summary>
            <param name="query">An OQL query string</param>
            <remarks>Filler method that executes an OQL query.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Execute(Telerik.OpenAccess.IObjectScope)">
            <summary>
            Execute the OQL query
            </summary>
            <param name="os">An IObjectScope with a started transaction.</param>
            <returns>The query result.</returns>
            <remarks>
            See also <see cref="T:Telerik.OpenAccess.Util.FillInstruction"/>
            </remarks>
        </member>
        <member name="P:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Oqlquery">
            <summary>Get the OQL query string.</summary>
            <remarks>For details about OQL take a look into the Programmers Guide.</remarks>
            <value>The OQL query string.</value>
        </member>
        <member name="T:Telerik.OpenAccess.Util.FillInstructionData">
            <summary>
            Serializable FillInstruction used for data transfer within ASP.NET Webmethods.
            </summary>
            <remarks>
            <para>This type supports the code that is generated by the wizards and is not intended to be used directly from your code.</para>
            This class can be used directly as parameter of ASP.NET Webmethods.
            See also <see cref="T:Telerik.OpenAccess.Util.IDBConnection"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Util.FillInstructionData.format">
            <summary>
            Compatibility information.
            </summary>
            <remarks>Internal.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Util.FillInstructionData.fillData">
            <summary>
            The binary encoded fill instruction in byte form.
            </summary>
            <remarks>Internal.</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Util.FillInstructionData.reserved">
            <summary>
            Reserved for further use. 
            </summary>
            <remarks>Internal.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor">
            <summary>Constructor.</summary>
            <remarks>Internal.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor(System.Object)">
            <summary>
            Constructs an object and copies the corresponding field data of x
            </summary>
            <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
            <remarks>
            The type of x has to be a from WSDL generated class in different namespace.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.FillInstructionData.CopyTo(System.Object)">
            <summary>
            Copies the field data to the corresponding fields of object x.
            </summary>
            <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
            <returns>The object x.</returns>
            <remarks>
            The type of x has to be a from WSDL generated class in different namespace.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IDBConnection">
            <summary>
            Interface for the IDBConnection classes
            </summary>
            <remarks>
            <para>This type supports the code that is generated by the wizards and is not intended to be used directly from your code.</para>
            Used for automated ObjectContainer synchronization, <see cref="P:Telerik.OpenAccess.ObjectContainer.DBConnection"/>
            Implementations are in general generated by the <see href="ms-help://openaccess/VS-Wizards/html/EnableProject/EnableProject_Intro.htm">Enable Project Wizard</see> contained in an ObjectContainerProvider file.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IDBConnection.Load(Telerik.OpenAccess.Util.FillInstructionData)">
            <summary>
            Load an ObjectContainer content
            </summary>
            <param name="data">Instruction to fill.</param>
            <returns>
            A serializable object containing the content.
            </returns>
            <remarks>
            Implementations are in general generated by the Enable Project Wizard.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IDBConnection.Save(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
            <summary>
            Save the changes made in an ObjectContainer.
            </summary>
            <param name="data">The changes.</param>
            <remarks>
            Implementations are in general generated by the Enable Project Wizard.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.Util.IDBConnection.Sync(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
            <summary>
            Save the changes made in an ObjectContainer and updates the
            local container to work on.
            </summary>
            <param name="data">The changes.</param>
            <returns>Container update info.</returns>
            <remarks>
            Implementations are in general generated by the Enable Project Wizard.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IObjectContainerProvider">
            <summary>
            Interface for the IObjectContainerProvider classes
            </summary>
            <remarks>
            Used within Telerik.OpenAccess.ObjectProvider to get an instance
            of an <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            Implementations are in general generated by the <see href="ms-help://openaccess/VS-Wizards/html/EnableProject/EnableProject_Intro.htm">Enable Project Wizard</see>.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IObjectContextProvider">
            <summary>
            Interface for the ObjectContextProvider classes.
            </summary>
            <remarks>Used within Telerik.OpenAccess.ObjectProvider to get an instance
            of an <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            The ObjectContextProvider classes is in general generated by the <see href="ms-help://openaccess/VS-Wizards/html/EnableProject/EnableProject_Intro.htm">Enable Project Wizard</see>.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Util.IObjectScopeProvider">
            <summary>
            Interface for the ObjectScopeProvider classes.
            </summary>
            <remarks>Used within Telerik.OpenAccess.ObjectProvider&gt; to get an instance
            of an <see cref="T:Telerik.OpenAccess.IObjectContext"/>.
            The ObjectScopeProvider classes is in general generated by the <see href="ms-help://openaccess/VS-Wizards/html/EnableProject/EnableProject_Intro.htm">Enable Project Wizard</see>.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.Config.BackendConfiguration.BackendConfigurationParser">
            <summary>
            Summary description for BackendConfigurationParser.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.BackendConfiguration.Sql.SqlBackendConfigurationParser">
            <summary>
            Summary description for SqlBackendConfigurationParser.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.ConfigDefs">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_t7">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_mssql">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_oracle">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_mysql">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_ads">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_sqlanywhere">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_firebird">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_azure">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_sqlce">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_vistadb">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_sqlite">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backend_postgresql">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.driver_ntds">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.driver_odp">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.driver_genericADO2">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.openAccessSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.openAccessNamespace">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.connectionsSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.connectionSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.databaseNameElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.serverNameElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.portElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.userElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.passwordElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.integratedSecurityElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.connectionParamsElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backendConfigurationNameElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ftsSecondaryConnectionElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.connectionStringElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.configFileElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backendConfigurationsSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backendConfigurationSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.backendAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.driverAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.mappingsSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.currentAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.mappingElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.mappingnameElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.schemaOfDatabaseAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.sectionIdentifier">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.referencesSection">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.referenceElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.assemblyNameAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.configRequiredAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.typeMappingElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.typeMapElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.CLRTypeElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.enabledAttr">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ADOTypeElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SQLTypeElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.LengthElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ScaleElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.NullsElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.EqualityElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ConverterElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ConverterFactoryElement">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.OracleClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ODPClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ManagedOracleClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.MySqlClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlAnywhereClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.AdvantageClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.FirebirdClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlCeClient">
            <summary>This is pre-release name that VS returns for SQL CE 3.5 driver - watch out!</summary> 
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlCeClient4">
            <summary>This is pre-release name that VS returns for SQL CE 4.0 driver - watch out!</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlCeClientSystem">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SqlCeClient4System">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.OpenAccessClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.VistaDBClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.VistaDB5Client">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.SQLiteClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.PostgreSqlClient">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.ProviderNamesForBackendMap">
            <summary>
            Map between Backend and it's supported Data Providers.
            Do not modify this dictionary after it is initialized!
            </summary>
            <remarks>There are some backends with multiple providers!</remarks>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.BackendNameForProviderMap">
            <summary>
            Map between Data Provider and it's corresponding Backend
            Do not modify this dictionary after it is initialized!
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.ConfigDefs.BackendType">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.BackendType.t7">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigDefs.BackendType.voa">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.ConfigManager">
            <summary>
            The ConfigManager controls the configuration sources.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigManager.UrlKey">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.ConfigManager.ProviderKey">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.#ctor(System.Reflection.Assembly[],System.String,System.Xml.XmlElement,System.Xml.XmlElement,System.Reflection.Assembly,Telerik.OpenAccess.BackendConfiguration)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.#ctor(System.String,System.Boolean,System.Reflection.Assembly,Telerik.OpenAccess.SPI.AssemblyProvider,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetGenieConfigProps(System.String,System.String,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetConnectionData(System.String,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetConnectionData(System.String,System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetBackendConfigurationNode">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetMappingNodesFromBackendConfiguration(System.Xml.XmlNode,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetReferences">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetOpenAccessRootElement">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.MapConnectionId2Url">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetOpenAccessConfigFile">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetBackendDrivername(Telerik.OpenAccess.Config.Sql.ConnectionString)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.SetDefaultGenieProperties(Telerik.OpenAccess.SPI.PropertySet,Telerik.OpenAccess.Config.Sql.ConnectionString)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.ExpandEnvironmentVariables(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetProvider2BackendMap">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.ConfigManager.GetTrace">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.ConfigManager.ConfigOverride">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.ConfigManager.RootAssemblies">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.ConfigManager.CallingAssembly">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.ConfigManager.SupportedProviderNames">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.ConfigManager.Properties">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Connection.ConnectionData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Connection.ConnectionData.#ctor(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.BackendType">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.BackendConfigurationName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ConnectionString">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ConnectionId">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ServerName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.Port">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.DatabaseName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.User">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.Password">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.IntegratedSecurity">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ConnectionParams">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ConnectionProperties">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.Backend">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.Driver">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.SchemaName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Connection.ConnectionData.ConfigSource">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Connection.ConnectionManager">
            <summary>
            Summary description for ConnectionManager.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Connection.ConnectionParser">
            <summary>
            Summary description for ConnectionParser.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Connection.ConnectionPool">
            <summary>
            Summary description for ConnectionPool.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Connection.SqlConnectionParser">
            <summary>
            Summary description for SqlConnectionParser.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.References.ReferenceData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.References.ReferenceData.Find(Telerik.OpenAccess.Config.References.ReferenceData[],System.String)">
            some helpers:
        </member>
        <member name="M:Telerik.OpenAccess.Config.References.ReferenceData.ShortName(System.Reflection.Assembly)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.References.ReferenceData.GetConfigRoot(System.Reflection.Assembly,System.String@)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.References.ReferenceData.ConfigRequired">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.References.ReferenceData.AssemblyName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.References.ReferenceData.Assembly">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.References.ReferenceData.ConfigSource">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Sql.DriverEnumeration">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.Sql.DriverEnumeration.ntds">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.Sql.DriverEnumeration.genericADO2">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.Sql.DriverEnumeration.odp">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.Sql.DriverEnumeration.mySqlOpenaccess">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.Config.Sql.DriverEnumeration.unknown">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Sql.ConnectionString">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Sql.ConnectionString.#ctor(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Sql.ConnectionString.ToString">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Sql.ConnectionString.Equals(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Sql.ConnectionString.GetHashCode">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.IntegratedSecurity">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.User">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Password">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Server">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Instance">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Port">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Backend">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Driver">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Database">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.Factory">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.ConnectionParams">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.HasConnectionString">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.UseOracleTnsNames">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.EffectiveValue">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.ConnectOnly">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.CreateDatabase">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.DbRequired">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.Config.Sql.ConnectionString.ProviderFactory">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Sql.NTDSDefs">
            <summary>
            Summary description for NTDSDefs.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Xml.ConfigFileReader">
            <summary>
            Summary description for ConfigFileReader.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Xml.XmlHelper">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Config.Xml.XPathQueries">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Xml.XPathQueries.GetConnection(System.Xml.XmlNode,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Xml.XPathQueries.GetMapping(System.Xml.XmlNode,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Config.Xml.XPathQueries.GetBackendConfiguration(System.Xml.XmlNode,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SymbolicFieldName">
            <summary>
            This classes defines symbolic name for several internal for Telerik Data Access Runtime fields and columns.
            These symbolic names are intended to be used as parameters of FieldValue&lt;T&gt; and SetFieldValue&lt;T&gt; extention methods.
            </summary>
            <remarks>
            The internal fields cannot be set using SetFieldValue&lt;T&gt; extension method!
            </remarks>
            <example>
            // assuming Product entity inherits from another entity type
            Product product = entitiesModel.Products.First();
            string classId = product.FieldValue&lt;string&gt;(SymbolicFieldName.ClassId);
            </example>
        </member>
        <member name="F:Telerik.OpenAccess.SymbolicFieldName.InternalPrimaryKey">
            <summary>
            Represents the symbolic name for any internal primary key used by an entity.
            Internal primary keys are the identity mechanism used by Telerik Data Access when no identity is specified by the developer.
            </summary>
            <remarks>
            <para>Internal primary keys can be extracted as System.Int32, System.Long or <seealso cref="T:Telerik.OpenAccess.IObjectId"/> types.</para>
            <para>Setting the internal primary key using SetFieldValue&lt;T&gt; extension method is not supported.</para>
            <para>Getting the internal primary key when using application defined key(s) is not supported.</para>
            </remarks>
            <example>
            // assuming Product entity uses internal identity mechanism
            Product product = entitiesModel.Products.First();
            long internalPrimaryKey = product.FieldValue&lt;long&gt;(SymbolicFieldName.InternalPrimaryKey);
            </example>
        </member>
        <member name="F:Telerik.OpenAccess.SymbolicFieldName.ClassId">
            <summary>
            Represents the symbolic name for the class type discriminator column when the type is part of an inheritance tree.
            </summary>
            <remarks>
            <para>Class types discriminators can be extracted as System.String or System.Long types.</para>
            <para>Setting the class type discriminator using SetFieldValue&lt;T&gt; extension method is not supported.</para>
            <para>Getting the class type discriminator when type has no base entity type is not supported.</para>
            </remarks>
            <example>
            // assuming Product entity inherits from another entity type
            Product product = entitiesModel.Products.First();
            string classId = product.FieldValue&lt;string&gt;(SymbolicFieldName.ClassId);
            </example>
        </member>
        <member name="F:Telerik.OpenAccess.SymbolicFieldName.Version">
            <summary>
            Represents the symbolic name for the internal version control column.
            Internal version control column is the mechanism used by Telerik Data Access to track changes in different concurrency control scenarios. 
            </summary>
            <remarks>
            <para>Internal versioning information can be extracted as System.Short type.</para>
            <para>Setting the internal version using SetFieldValue&lt;T&gt; extension method is not supported.</para>
            <para>Getting the public or the internal version is supported except when AllChanged mode is configured for the entity type.</para>
            </remarks>
            <example>
            // assuming Product entity uses internal versioning mechanism
            Product product = entitiesModel.Products.First();
            short version = product.FieldValue&lt;short&gt;(SymbolicFieldName.Version);
            </example>
        </member>
        <member name="T:Telerik.OpenAccess.ReturnValueDelegate">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.ObjectResult`1">
            <summary>
            Represents a typed result from the database operation.
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.ObjectResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="P:Telerik.OpenAccess.ObjectResult`1.ReturnValue">
            <summary>
            Gets the return value of the stored procedure or function that was executed to obtain this instance.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Wrapper4Reference">
            <summary>
            Summary description for Wrapper of object references and collections that implements IBindingList.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.#ctor(System.Collections.ICollection,System.Boolean,Telerik.OpenAccess.RT.IModifiable)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.AddNew">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.RemoveAt(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Wrapper4ICollection.GetEnumerator">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Wrapper4ICollection.AllowNew">
            <summary>hidden</summary>   //TODO WHY?
        </member>
        <member name="P:Telerik.OpenAccess.RT.Wrapper4ICollection.AllowRemove">
            <summary>hidden</summary>
        </member>
        <member name="E:Telerik.OpenAccess.RT.Wrapper4ICollection.System#ComponentModel#IBindingList#ListChanged">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Wrapper4ICollection.Item(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ContainerSerializationHelper">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerSerializationHelper.Translate(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerSerializationHelper.Clear">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ContainerMerger">
            <summary>
            Implements a merge algorithm for a set of objects to be merged 
            from an ObjectContainer to an instance of IObjectScope.
            </summary>
            <remarks>
            <para>
            The implemented merge algoritm tries to merge changes made offline
            from an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> into an 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/> object which is connected
            online to a <see cref="T:Telerik.OpenAccess.Database"/>.
            </para>
            <para>
            Objects derived from this class can be used to implement
            custom merge algorithms. Such algorithms can
            be useful if an application specific way of dealing with
            concurrency conflicts does exist. 
            </para>
            <para>
            A concurrency conflict arises, when an object
            managed by an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> gets 
            modified in 
            the <see cref="T:Telerik.OpenAccess.Database">database</see> and in the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
            at the same time. Because the <see cref="T:Telerik.OpenAccess.ObjectContainer"/>
            managed object is not connected to a 
            <see cref="T:Telerik.OpenAccess.Database"/> 
            conflict prevention via locking protocol cannot be done. The conflict 
            will be detected, when
            the content of the <see cref="T:Telerik.OpenAccess.ObjectContainer"/> is
            to be copied to the database using the 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> method. However,
            the object in the database is already modified (hence the conflict)
            and the modification made in the database is correct. There are 
            several ways to handle this situation:
            <list type="number">
            	<item>
            		Throw away the changes made offline in the 
            		<see cref="T:Telerik.OpenAccess.ObjectContainer"/>, creating a new
            		<see cref="T:Telerik.OpenAccess.ObjectContainer"/>, recreating the
            		offline changes with the new set of objects and try again
            		the <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>. 
            		This is	the hard but working way.
            	</item>
            	<item>
            		Try to merge the changes logically from both sides into 
            		the database. 
            	</item>
            	<item>
            		Ignoring the conflict, the changes made offline will overwrite
            		the database content.
            	</item>
            </list>
            Because (2) and (3) require special knowledge about the data model
            and its inherent constraints, only (1) can be made default; this is
            why a conflict during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>
            will prevent the changes to be made into the database using the 
            standard <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> implementation.
            </para>
            <para>
            In order to support (2) and (3), a customized subclass of 
            <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> is required. This subclass
            must handle all conflicts and merge every object from the source
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/> into the target 
            <see cref="T:Telerik.OpenAccess.IObjectScope"/>. The required actions 
            to do this fall in two categories: <list type="bullet">
            <item>Flow control and traversing all objects</item>
            <item>Handling a single object</item>
            </list>
            </para>
            <para>
            To implement the handling of a single object (possibly type 
            dependend) a customized derivation of class 
            <see cref="T:Telerik.OpenAccess.RT.ObjectMerger"/> can be used. It will be called
            back by the <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> used.
            In order to hold the
            required information for a given object, helper objects of class 
            <see cref="T:Telerik.OpenAccess.RT.ObjectMergeInfo"/> are created by the
            <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>. The helper objects will
            contain information about the <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.from">
            source</see> and <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.to">target</see> object 
            as well as
            information about the possible <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.conflict">
            conflict</see> and last but not least the
            <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.merged">merge state</see>. 
            This merge state will be deciding, if the calling
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> will be successful
            or not. All persistent objects of the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/> need to be merged and must
            set their associated <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.merged"/> field 
            to <c>true</c>.
            </para>
            <para>
            Instances of type <see cref="T:Telerik.OpenAccess.RT.ObjectMerger"/> are used to define 
            application specific merge algorithm for a specific type. Telerik Data Access
            provides a standard algorithm, which will use all fields of the
            <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.from">source</see> object and copy them to 
            the <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.to">target</see> object.
            </para>
            <para>
            The standard implementation of the 
            <see cref="T:Telerik.OpenAccess.RT.ObjectMerger"/> is used, when no customized
            object merger is provided. For protecting fields from overwriting
            please refer to 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>.
            </para>
            <para>
            To control the flow control and the merge order of the single objects 
            the <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> can be customized.
            Customization can be done by overriding virtual methods like 
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAll(System.Collections.ArrayList)"/> and <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeObject(Telerik.OpenAccess.RT.ObjectMergeInfo)"/>. Several 
            predefined methods (f.e. <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAllNoOrder"/>) can
            be used to define a customized traversing strategy and merge handling.
            </para>
            <para>
            Objects are only subject to verification and concurrent change
            detection, if they are attributed with <c>Verifiable=true</c> in
            the <see cref="T:Telerik.OpenAccess.PersistentAttribute"/>.
            </para>
            <para>
            In order to support advanced merge algorithms where object ID 
            mappings need to be done, an additional step can be made before
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> is called. When
            calling <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifiers(Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)"/> all objects of the source
            container with a temporary object ID will be used in the call back 
            of the <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifier(System.Object,System.Object,Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)"/> method. This can be used to 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.ChangeObjectId(System.Object,Telerik.OpenAccess.IObjectId)"/> new objects before
            they are merged into a database. Adapting object identifiers needs
            to be done before the <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> method
            is run in order to provide the verification step with the correct
            database object IDs.
            </para>
            <seealso cref="T:Telerik.OpenAccess.PersistentAttribute"/>
            <seealso cref="T:Telerik.OpenAccess.RT.ObjectMerger"/>
            <seealso cref="T:Telerik.OpenAccess.RT.ObjectMergeInfo"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="T:Telerik.OpenAccess.RT.IObjectMergerContext"/>
            </remarks>
            <example>
            <code>
            // ...
            // ObjectContainer container1 has been modified and the content
            // needs to be transferred to the database. The database is 
            // accessible via IObjectScope scope1.
            //
            // Using a custom conflict resolver.
            ContainerMerger myMerger = new AppConflictHandler();
            //
            container1.CopyTo(scope1,Verify.All,myMerger);
            //
            // All conflicts will be resolved by myMerger or the CopyTo will
            // fail with an exception.
            </code>
            </example>
        </member>
        <member name="T:Telerik.OpenAccess.RT.IObjectMergerContext">
            <summary>
            Methods to
            modify the destination context when object values 
            need to be merged
            from a source context to a different destination context.
            </summary>
            <remarks>
            Instances of this type are passed to the methods of class
            <see cref="T:Telerik.OpenAccess.RT.ObjectMerger"/> and can be used to modify the
            target context (usually an <see cref="T:Telerik.OpenAccess.IObjectScope"/>) during
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">ObjectContainer.CopyTo</see>.
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            <seealso cref="T:Telerik.OpenAccess.RT.ObjectMerger"/>
            <seealso cref="T:Telerik.OpenAccess.RT.ObjectMergeInfo"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.SourceContext">
            <summary>
            Retrieves the source context of a merge operation.
            </summary>
            <returns>The source context object.</returns>
            <remarks>The source context is the context of the modified
            objects.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.DestinationContext">
            <summary>
            Retrieves the destination context of a merge operation.
            </summary>
            <remarks>
            The destination context is the context of the objects to
            be modified by the merge operation. An active transaction
            is required for the destination context.
            </remarks>
            <returns>The destination context object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.NewDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Creates a new persistent object in the destination
            context for the corresponding source context object.
            </summary>
            <remarks>
            Creates a new instance in the destination context. The class
            of the instance will be the same as the source objects class.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.ResolveDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Resolves the object in the destination context for the
            corresponding source context object.
            </summary>
            <remarks>
            Resolves an object in the destination context using the
            database object ID.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Target object 
            not found, already deleted or not accessible (locked).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.UpdateDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Updates the object in the destination context with the 
            values from the corresponding source context object.
            </summary>
            <remarks>
            Copies the values of the source object to the destination
            object. This involves also references to other objects which
            will be resolved/created as needed.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Target object not 
            found, already deleted or not accessible (locked).</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.IObjectMergerContext.DeleteDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Deletes the destination context object from the database
            for the corresponding source context object.
            </summary>
            <remarks>
            Marks the destination object as to be removed.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Target object not 
            found, already deleted or not accessible (locked).</exception>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.fromContainer">
            <summary>
            Source container object.
            </summary>
            <remarks>
            The source of the modifications is held in this field.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.toScope">
            <summary>
            Target scope object.
            </summary>
            <remarks>
            The target of the modifications is held in this field.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.objectMergeInfos">
            <summary>
            Mapping of ObjectMergeInfo objects by reference of their 
            from object.
            </summary>
            <remarks>
            This field will hold all merge info objects. To 
            access information for a single object, the indexer [] can be used
            with the source object being the index value.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.objectMerger">
            <summary>
            Object specific merger algorithm.
            </summary>
            <remarks>
            Type specific merge algorithms can be implemented by providing
            this field with a custom implementation.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.#ctor(System.Boolean)">
            <summary>
            Constructs a new ContainerMerger object using a default
            ObjectMerger object.
            </summary>
            <param name="allFields">If value is <c>true</c>, then all fields
            of the target object will be overwritten with the content
            of the source object when updating. If value is <c>false</c>, 
            the fields attributed with <c>[ObjectMergeProtectOverwrite]</c>
            will not be touched.
            </param>
            <remarks>
            An instance of this class can be used to merge the content of
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> into a database
            via <see cref="T:Telerik.OpenAccess.IObjectScope"/>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.#ctor(Telerik.OpenAccess.RT.ObjectMerger)">
            <summary>
            Constructs a new ContainerMerger object using a custom
            ObjectMerger object.
            </summary>
            <param name="objMerger">The handler to use for merging a single
            object.
            </param>
            <exception cref="T:System.ArgumentNullException">When 
            <paramref name="objMerger"/> is <c>null</c>.</exception>
            <remarks>
            An instance of this class can be used to merge the content of
            an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> into a database
            via <see cref="T:Telerik.OpenAccess.IObjectScope"/>. 
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifiers(Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)">
            <summary>
            Triggers the callback AdaptIdentifier to be called for all
            persistent objects of an ObjectContainer which have a 
            temporary object ID only.
            </summary>
            <param name="from">The container with the objects having a 
            temporary object ID.</param>
            <param name="to">Target IObjectScope of an advanced merge
            algorithm.</param>
            <remarks>
            For usage scenario description see <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifier(System.Object,System.Object,Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)"/>.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifier(System.Object,System.Object,Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)">
            <summary>
            Callback triggered by AdaptIdentifiers (to be overridden by user).
            </summary>
            <param name="obj">The object with the temporary object ID.</param>
            <param name="parent">The referencing object of 
            				<paramref name="obj"/>.</param>
            <param name="from">The ObjectContainer managing 
            				<paramref name="obj"/>.</param>
            <param name="to">Target IObjectScope of an advanced
            merge algorithm. </param>
            <remarks>
            This callback method is triggered by <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.AdaptIdentifiers(Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.IObjectScope)"/>
            and allows the implementor to modify the database object ID for
            all objects of <c>NEW</c> state from the ObjectContainer.
            <para>
            The primary usage scenario for this method is to 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.ChangeObjectId(System.Object,Telerik.OpenAccess.IObjectId)">change the id</see> of objects
            of an <see cref="T:Telerik.OpenAccess.ObjectContainer"/> which was filled offline. Filling
            the container this way will create objects in the <c>NEW</c> state.
            If the values for the objects come from a source where information
            about the original database object IDs is available, those newly
            created objects in the container might need to be renamed 
            before their values are
            transferred to the database using the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> method because the
            real object ID must be known before the object is 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.Verify">checked</see> for
            concurrent modification.
            </para>
            <para>
            This method is called for all objects of state <c>NEW</c> of
            the <paramref name="from"/> container.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.CreateObjectMergeInfo(System.Object,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Contructs a new ObjectMergeInfo object.
            </summary>
            <remarks>This callback will be called implicitely
            for all objects of the source ObjectContainer. User can
            override this callback to supply a custom merge algorithm
            specific merge info object.
            </remarks>
            <param name="obj">The object of the source ObjectContainer to
            create an ObjectMergeInfo for.</param>
            <param name="e">A possible conflict which was detected during the
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> method; can 
            be <c>null</c>.</param>
            <param name="n">Indicates a new object.</param>
            <param name="d">Indicates a deleted object.</param>
            <returns>New ObjectMergeInfo object for <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAll(System.Collections.ArrayList)">
            <summary>
            Callback to merge all objects, performing MergeAllRootClosures
            per default.
            </summary>
            <remarks>
            This method can be overridden to request a different order during
            the traversal of all objects of this ObjectContainer. Several
            methods are predefined and can be used here:
            <list type="bullet">
            <item>MergeAllNoOrder</item>
            <item>MergeAllNewChangedDeletedCleanHollow</item>
            <item>MergeAllRootDescending</item>
            <item>MergeAllRootClosures</item>
            </list>
            The default method is <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAllNewChangedDeletedCleanHollow(System.Boolean,System.Collections.ArrayList)"/>.
            <seealso cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeObject(Telerik.OpenAccess.RT.ObjectMergeInfo)"/>
            <seealso cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeConflict(Telerik.OpenAccess.RT.ObjectMergeInfo)"/>
            </remarks>
            <param name="changes">Internal list with all changes.</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAllNoOrder">
            <summary>
            Will traverse the whole ObjectContainer in no specific
            order and will call MergeObject for each element.
            </summary>
            <remarks>
            <para>
            This method can be called from <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAll(System.Collections.ArrayList)"/> to
            perform a fast merge algorithm if no specific order of the
            objects is required for merging.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAllNewChangedDeletedCleanHollow(System.Boolean,System.Collections.ArrayList)">
            <summary>
            Will traverse the whole source ObjectContainer by iterating
            all objects based on their state.
            Will call MergeObject for every object.
            </summary>
            <remarks>
            <para>
            This method can be called from <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAll(System.Collections.ArrayList)"/> to
            perform a merge algorithm where the object state should decide
            about the order of the objects being merged.
            </para>
            <para>
            The objects will be merged by state in the following order:
            <list type="number">
            <item>NEW</item>
            <item>DIRTY</item>
            <item>DELETED</item>
            <item>CLEAN</item>
            <item>DETACHED</item>
            </list>
            </para>
            <para>
            Using the <paramref name="forceResolve"/> parameter with value
            <c>false</c>
            will prevent objects of
            <c>CLEAN</c> and <c>DETACHED</c> state being resolved in the
            target IObjectScope. This can increase performance depending on
            the usage pattern. This applies only to conflict free objects.
            </para>
            <seealso cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeObject(Telerik.OpenAccess.RT.ObjectMergeInfo)"/>
            <seealso cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeConflict(Telerik.OpenAccess.RT.ObjectMergeInfo)"/>
            </remarks>
            <param name="forceResolve">Value indicating whether objects of
            CLEAN and DETACHED state must be resolved in the target scope.
            </param>
            <param name="changes">Internal list with all changes</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeConflict(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Callback to handle objects with a conflict. 
            </summary>
            <remarks>
            Called during <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeObject(Telerik.OpenAccess.RT.ObjectMergeInfo)"/> this callback must
            be overridden when conflict resolution can be done. The base
            implementation will re-throw the 
            <see cref="F:Telerik.OpenAccess.RT.ObjectMergeInfo.conflict"/> exception.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <returns><c>true</c> if conflict is merged, <c>false</c> 
            otherwise</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.DecideConflict(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.ContainerMerger.Conflict)">
            <summary>
            Callback to decide if and how a given conflict
            can be resolved. Default is to abort the merge operation. Can
            be overridden by user.
            </summary>
            <param name="info">Information for the object causing the 
            conflict.</param>
            <param name="conflict">Conflict description.</param>
            <returns>Conflict resolution description.</returns>
            <remarks>
            The default behavior is to abort the merge operation.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeNewDeletedObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Callback to handle objects of the ObjectContainer which
            have been added to the container using a temporary object ID and
            removed later from the container. 
            </summary>
            <param name="info">Information for the object to be handled.
            </param>
            <returns><c>true</c></returns>
            <remarks>
            Default is to allow new->deleted objects and treat them as merged.
            They will not appear in the database.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.MergeObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Callback to handle to merge operation for one object of the
            source ObjectContainer. 
            </summary>
            <remarks>
            <para>
            Will first call <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeConflict(Telerik.OpenAccess.RT.ObjectMergeInfo)"/> for objects 
            with a conflict.
            </para>
            <para>
            Will then call the appropriate method of the 
            <see cref="F:Telerik.OpenAccess.RT.ContainerMerger.objectMerger"/> object depending on the 
            source context state of the object to be merged.
            </para>
            <para>
            This method needs to be called for every object of 
            the ObjectContainer. The predefined methods called from
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.MergeAll(System.Collections.ArrayList)"/> will do so.
            </para>
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>		
            <returns><c>true</c> if the object was merged, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.SourceContext">
            <summary>
            Returns the source context of a merge operation.
            </summary>
            <returns>The source context object.</returns>
            <remarks>The returned instance contains the modified
            container objects.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.DestinationContext">
            <summary>
            Returns the destination context of a merge operation.
            </summary>
            <returns>The destination context object.</returns>
            <remarks>The returned instance is the merge target scope.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.NewDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Creates a new persistent object in the destination
            context for the corresponding source context object.
            </summary>
            <remarks>
            Creates a new instance of the class of the info.from object.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.ResolveDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Resolves the object in the destination context for the
            corresponding source context object.
            </summary>
            <remarks>
            Resolves the target scope object reference using the database
            object ID of the info.from object.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            Object not found or already deleted.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            Object not found lockable.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            Object not accessible.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.UpdateDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Updates the object in the destination context with the 
            values from the corresponding source context object.
            </summary>
            <remarks>
            The values of the source object will be copied to the target
            object. Referenced objects will be created/resolved as necessary.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            Object not found or already deleted.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            Object not found lockable.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            Object not accessible.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.DeleteDestinationObject(Telerik.OpenAccess.RT.ObjectMergeInfo)">
            <summary>
            Deletes the destination context object from the database
            for the corresponding source context object.
            </summary>
            <remarks>
            Marks the target scope object as to be removed.
            </remarks>
            <param name="info">Information for the object to be handled.
            </param>
            <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            Object not found or already deleted.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            Object not found lockable.</exception>
            <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            Object not accessible.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ContainerMerger.ResolveDestinationObject(System.Object,System.Object,System.Object,System.Int32)">
            <summary>
            Callback to resolve the reference in the destination context
            for a given reference in the source context. Might create a 
            new object in the destination context.
            </summary>
            <remarks>
            Usually this method does not need to be overridden. 
            </remarks>
            <param name="srcObj">The object to be resolved of the 
            source context.</param>
            <param name="srcObjParent">The object referencing 
            <paramref name="srcObj"/> in the source context.</param>
            <param name="destObjParent">The object corresponding to
            <paramref name="srcObjParent"/> in the destination context.</param>
            <param name="slot">The field number of the parent object where
            the parent holds a reference to the object to be resolved.</param>
            <returns>The resolved object in the destination context.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ContainerMerger.Conflict">
            <summary>
            Description of an object merge conflict.
            </summary>
            <remarks>
            Values of this type are used by the 
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.DecideConflict(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.ContainerMerger.Conflict)"/> method.
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.DELETED_Deleted">
            <summary>
            Object was deleted in the ObjectContainer and also deleted in
            the database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.DELETED_Modified">
            <summary>
            Object was deleted in the ObjectContainer and modified in the
            database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.DIRTY_Deleted">
            <summary>
            Object was modified in the ObjectContainer and deleted in the
            database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.DIRTY_Modified">
            <summary>
            Object was modified in the ObjectContainer and also modified 
            in the database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.CLEAN_Deleted">
            <summary>
            Object is unchanged in the ObjectContainer and deleted in the
            database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.CLEAN_Modified">
            <summary>
            Object is unchanged in the ObjectContainer and modified in the
            database.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.Conflict.NONE">
            <summary>
            No conflict.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ContainerMerger.MergeResult">
            <summary>
            Description of the resolution for a given object conflict.
            </summary>
            <remarks>
            Values of this type are used by the 
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.DecideConflict(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.ContainerMerger.Conflict)"/> method.
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.MergeResult.AbortMergeOperation">
            <summary>
            Abort the merge operation with an exception.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.MergeResult.UseContainerState">
            <summary>
            Transfer the state of the ObjectContainer object 
            into the target IObjectScope; might delete the 
            persistent object of the target IObjectScope.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ContainerMerger.MergeResult.KeepScopeState">
            <summary>
            Leave the target IObjectScope unchanged for this 
            conflicting object; does not overwrite the target
            object.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ObjectRepositoryMerger">
            <summary>
            hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepositoryMerger.getAssociatedObject(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepositoryMerger.getSlotNums(Telerik.OpenAccess.SPI.IClassMetaData,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ObjectRepositoryMerger.copyBackElement(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.MergerAdapter.Telerik#OpenAccess#SPI#ObjectRepositoryMerger#getSlotNums(Telerik.OpenAccess.SPI.IClassMetaData,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>
            Callback to determine the slot numbers which should be used to copy
            the fields of the offline object to the target object. Defaulting 
            to all fields if this ObjectMerger has been created to copy
            all fields; otherwise only fields not marked with 
            [ObjectMergerProtectOverwrite]. Called for every
            object to be copied. Can be overridden to perform custom merge 
            algorithms based on class structures.
            </summary>
            <param name="cmd">The database meta data of the object pc.</param>
            <param name="pc">The persistent object to be copied.</param>
            <returns>int array with slot numbers</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.DecimalHelper">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.DecimalHelper.invar">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.getInstance">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.setInstance(Telerik.OpenAccess.RT.DecimalHelper)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.IntToUnsigned(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.ShortToUnsigned(System.Int16)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.ByteToUnsigned(System.Int16)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.UByteToUnsigned(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.ULongToString(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.Box(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DecimalHelper.BoxWrappedValue(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ReferenceHelper">
            <summary> Helper interface for handling object references.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ReferenceHelper.getReferencingFieldNums">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ReferenceHelper.getDependingFieldNums">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ReferenceHelper.canContainReferences(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ReferenceHelper.extractReferences(System.Object,System.Int32,Telerik.OpenAccess.SPI.ReferenceCollector,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.DisconnectedOID">
            <summary>
            Database object identity to be used with ObjectContainer.
            </summary>
            <remarks>
            This class is only used in conjunction with 
            <see cref="T:Telerik.OpenAccess.ObjectContainer"/> instances.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.#ctor(System.Object)">
            <summary>hidden</summary>
            <param name="x"></param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.#ctor">
            <summary>Required by serialization</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required by serialization</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required by serialization</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.#ctor(System.Int32,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.GetHashCode">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.Equals(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.ToString">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.isTemporary">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedOID.appId">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.DisconnectedOID.Identifier">
            <summary>
            Gets or sets the database identity.
            </summary>
            <remarks>
            This property is intended for Xml serialization purposes only.
            </remarks>
            <value>
            String representation of database identity.
            </value>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.OfflineStateManager">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ExtendedStateManager">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.dataobjects.StateManager">
            <summary>This interface is the point of contact between managed instances of
            PersistenceCapable classes and the JDO implementation.  It contains
            the methods used by PersistenceCapable instances to delegate behavior to 
            the JDO implementation.
            </summary>
            <remarks>
            Each managed <code>PersistenceCapable</code> instance contains a reference to a
            <code>StateManager</code>.  A <code>StateManager</code> might manage one or multiple instances of
            <code>PersistenceCapable</code> instances, at the choice of the implementation.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingFlags(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>The owning <code>StateManager</code> uses this method to supply the 
            value of the flags to the <code>PersistenceCapable</code> instance.
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> the value of <code>jdoFlags</code> to be stored in the <code>PersistenceCapable</code> instance
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingStateManager(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>Replace the current value of <code>jdoStateManager</code>.
            This method is called by the <code>PersistenceCapable</code> whenever
            <code>jdoReplaceStateManager</code> is called and there is already
            an owning <code>StateManager</code>.  This is a security precaution
            to ensure that the owning <code>StateManager</code> is the only
            source of any change to its reference in the <code>PersistenceCapable</code>.
            </summary>
            <returns> the new value for the <code>jdoStateManager</code>
            </returns>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="sm">the proposed new value for the <code>jdoStateManager</code>
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsDirty(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            <summary>Tests whether this object is dirty.</summary>
            <remarks>
            Instances that have been modified, deleted, or newly 
            made persistent in the current transaction return <code>true</code>.
            
            <P/>Transient nontransactional instances return <code>false</code>.
            </remarks>
            <seealso cref="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedMakeDirty(System.String)">
            </seealso>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="fieldName">The name of a field that should be check or null for complete object.</param>
            <returns> <code>true</code> if this instance has been modified in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsTransactional(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Tests whether this object is transactional.
            
            Instances that respect transaction boundaries return <code>true</code>.  These instances
            include transient instances made transactional as a result of being the
            target of a <code>makeTransactional</code> method call; newly made persistent or deleted
            persistent instances; persistent instances read in data store
            transactions; and persistent instances modified in optimistic transactions.
            
            <P/>Transient nontransactional instances return <code>false</code>.
            <P/>
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> <code>true</code> if this instance is transactional.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsPersistent(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Tests whether this object is persistent.
            
            Instances whose state is stored in the data store return <code>true</code>.
            
            <P/>Transient instances return <code>false</code>.
            <P/>
            </summary>
            <seealso cref="M:Telerik.OpenAccess.SPI.IPersistenceManager.makePersistent(System.Object)">
            </seealso>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> <code>true</code> if this instance is persistent.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsNew(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Tests whether this object has been newly made persistent.
            
            Instances that have been made persistent in the current transaction 
            return <code>true</code>.
            
            <P/>Transient instances return <code>false</code>.
            <P/>
            </summary>
            <seealso cref="M:Telerik.OpenAccess.SPI.IPersistenceManager.makePersistent(System.Object)">
            </seealso>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> <code>true</code> if this instance was made persistent
            in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsDeleted(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Tests whether this object has been deleted.
            
            Instances that have been deleted in the current transaction return <code>true</code>.
            
            <P/>Transient instances return <code>false</code>.
            <P/>
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> <code>true</code> if this instance was deleted
            in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetPersistenceManager(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Return the <code>PersistenceManager</code> that owns this instance.</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> the <code>PersistenceManager</code> that owns this instance
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.MakeDirty(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            <summary>Mark the associated <code>PersistenceCapable</code> field dirty.
            <P/>The <code>StateManager</code> will make a copy of the field
            so it can be restored if needed later, and then mark
            the field as modified in the current transaction.
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="fieldName">the name of the field
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetObjectId(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Return the object representing the JDO identity 
            of the calling instance.  If the JDO identity is being changed in
            the current transaction, this method returns the identity as of
            the beginning of the transaction.
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <returns> the object representing the JDO identity of the calling instance
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.IsLoaded(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32)">
            <summary>Return <code>true</code> if the field is cached in the calling
            instance.
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number
            </param>
            <returns> whether the field is cached in the calling instance
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.PreSerialize(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>Guarantee that the serializable transactional and persistent fields
            are loaded into the instance.  This method is called by the generated
            <code>jdoPreSerialize</code> method prior to serialization of the
            instance.
            </summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,``0)">
            <summary> Return the value for the field.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetNullableField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Nullable{``0})">
            <summary> Return the value for the field.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetStringField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.String)">
            <summary>Return the value for the field.</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <param name="currentValue">the current value of the field
            </param>
            <returns> the new value for the field
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.GetObjectField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Object)">
            <summary>Return the value for the field.</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <param name="currentValue">the current value of the field
            </param>
            <returns> the new value for the field
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.SetField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,``0,``0)">
            <summary> Set the value of the field.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.SetNullableField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Nullable{``0},System.Nullable{``0})">
            <summary> Set the value of the field.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.SetStringField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.String,System.String)">
            <summary>Mark the field as modified by the user.</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number
            </param>
            <param name="currentValue">the current value of the field
            </param>
            <param name="newValue">the proposed new value of the field 
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.SetObjectField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Object,System.Object)">
            <summary>Mark the field as modified by the user.</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number
            </param>
            <param name="currentValue">the current value of the field
            </param>
            <param name="newValue">the proposed new value of the field 
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ProvidedField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,``0)">
            <summary>The value of the field requested to be provided to the <code>StateManager</code></summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ProvidedNullableField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Nullable{``0})">
            <summary>The value of the field requested to be provided to the <code>StateManager</code></summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ProvidedStringField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.String)">
            <summary>The value of the field requested to be provided to the <code>StateManager</code></summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <param name="currentValue">the current value of the field
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ProvidedObjectField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32,System.Object)">
            <summary>The value of the field requested to be provided to the <code>StateManager</code></summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <param name="currentValue">the current value of the field
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32)">
            <summary>The replacing value of the field in the calling instance</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingNullableField``1(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32)">
            <summary>The replacing value of the field in the calling instance</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingStringField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32)">
            <summary>The replacing value of the field in the calling instance</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <returns> the new value for the field
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.StateManager.ReplacingObjectField(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Int32)">
            <summary>The replacing value of the field in the calling instance</summary>
            <param name="pc">the calling <code>PersistenceCapable</code> instance
            </param>
            <param name="field">the field number 
            </param>
            <returns> the new value for the field
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ExtendedStateManager.GetPersistenceCapable">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ExtendedStateManager.GetObjectId">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.SetObjectId(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.IsProxy">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.MarkDeleted">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.MarkAdded">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.MarkPersistentDeleted">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.IsClean">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.SetClean">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.SetDirty">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.IsLoaded(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.GetOptLockInfo">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.SetOptLockInfo(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.GetReferencedObjects(Telerik.OpenAccess.SPI.ReferenceCollector,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.GetData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.FillNewObject(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.ObjectRepositoryMerger,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.BeginFillFields(Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.ObjectRepositoryMerger)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.EndFillFields(Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.CreateCopy(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.SPI.IPersistenceManager,System.Int32[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.GetPCNoCreate">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.SetRepository(Telerik.OpenAccess.SPI.ObjectRepository)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.GetRepository">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.OfflineStateManager.CopyPrimaryKeys(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.SPI.IPersistenceManager,System.Int32[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.#ctor(Telerik.OpenAccess.ObjectContainer,System.Type,Telerik.OpenAccess.RT.DisconnectedOID)">
            Used to create a SM from offline usage.
            @param rep
            @param c
            @param id
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.#ctor(System.Type,Telerik.OpenAccess.SPI.OfflineStateManager,System.Int32,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            Used to create a SM for an embedded object.
            @param c
            @param fco     state manager of fco
            @param fcoSlot slot number of sco within fco
            @param sco     user object if available
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.#ctor(Telerik.OpenAccess.ObjectContainer,Telerik.OpenAccess.RT.DisconnectedOID,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Boolean)">
            Used to create a new SM while adding a new object offline.
            @param op
            @param id
            @param pc
            @param newlyInserted (true when called by objectContainer.Add)
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.GetData">
            Used when the object is filled with data from an online database.
            @return array with field data in enhancer order
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#ExtendedStateManager#GetObjectId">
            Gives the oid of the object back. 
            @return Database object ID. Can be single field ID, multiple field ID or internal ID.
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#OfflineStateManager#SetDirty">
            Called during objectContainer.Rename : not taking a snapshot
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#OfflineStateManager#MarkAdded">
            Called when existing object is reached by a newly added object.
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.takeSnapshot">
            Called when the object is modified the first time. Currently a dummy.
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#ExtendedStateManager#GetPersistenceCapable">
            Gives the managed user object. If it is not there yet, it will
            be created dynamically.
            @return User object.
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager._makeDirty(System.Int32)">
            Throws an exception for proxy objects or unwanted write access.
            @param field Slot number which is to be modified.
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#dataobjects#StateManager#MakeDirty(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            Throws an exception for proxy objects or unwanted write access.
            @param fieldName Slot name which is to be modified.
            @param pc 
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.ToString">
                        .NET-SCO means: embedded (user-defined) pers class, i.e. a struct (i.e. a System.ValueType) in C# syntax
                        Collections are not value types, so treated elsewhere (as special SCOs)
                        System.DateTime is also treated specially, because it can not be enhanced.
            		
                    object providedDotNetSCO(object sco)
                    {
                        if (sco == null)
                            return null;
            
                        //object is wrapped, replacements must take place immediately in wrapped object
                        //because the state is immediately copied to the original
                        //temp - start  //single references to SCOs; not collection of SCOs
                        PersistenceCapable oldOwner = owner;
                        try
                        {
                            PersistenceCapable original = (PersistenceCapable) sco;
                            owner = original.OpenAccessEnhancedNewInstance(this);
            				
                            int[] slotNums = ((ExtendedStateManager)this).getPersistenceManager().getSlotNumsForOwner(owner);
            
                            original.OpenAccessEnhancedReplaceStateManager(this);
                            original.OpenAccessEnhancedProvideFields( slotNums );
                            //TK			original. jdoReplaceStateManager(_tempStateManager);  //necessary? it just a copy, TODO: clarify
            
                            state = DisconnectedStates.CLEAN; //verify this if once ReplacingFlags works differently for different states (except proxy)
                            //perhaps set to clean before and don't set it here
                            owner.OpenAccessEnhancedReplaceFlags();
                            sco = owner;		//just to save a new variable
            
                            //When using "pc != owner", then the above code does not work; triggers endless recursion; 
                            //Reason: the PersistenceCapable passed up on each call is a new wrapped one; 
                            //temp - end    	
                            //temp: only works for SCOs without references to pers objects
                            return sco;	
                        }
                        finally
                        {
                            owner = oldOwner;
                        }
                    }
                
                    object replacingDotNetSCO(object offlineSCO)
                    {
                        if (offlineSCO == null)
                            return null;
            
                        //object is wrapped, replacements must take place immediately in wrapped object
                        //because the state is immediately copied to the original
                        //single references to SCOs; not collection of SCOs
                        PersistenceCapable oldOwner  = owner;
                        PersistenceCapable onlineSCO = null;
                        try
                        {
                            owner = (PersistenceCapable) offlineSCO;
                            // I dont know how this might happen that a SCO does not have a valid
                            // state manager, but this fixes a following crash.
                            owner.OpenAccessEnhancedReplaceStateManager(this);
            
                            onlineSCO = owner.OpenAccessEnhancedNewInstance(this);
            
                            //TK			int[] slotNums = _tempStateManager.getPersistenceManager().getSlotNumsForOwner(onlineSCO);								
            			
                            //TK			onlineSCO.OpenAccessEnhancedReplaceFields( slotNums );
                            //TODO: flags for retval (needed at all?)
                            //temp: only works for SCOs without references to pers objects
                            return onlineSCO;	   	
                        }
                        finally
                        {
                            //TK			onlineSCO.OpenAccessEnhancedReplaceStateManager(_tempStateManager);
                            owner = oldOwner;
                        }
                    }
        </member>
        <member name="M:Telerik.OpenAccess.RT.DisconnectedStateManager.Telerik#OpenAccess#SPI#OfflineStateManager#SetRepository(Telerik.OpenAccess.SPI.ObjectRepository)">
            Intended to be used during deserialization.
            @param repos
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ICollectionManager">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ICollectionManager.ManagedAdd(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ICollectionManager.ManagedRemove(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.EnhancedExAttribute">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.EnhancedExAttribute.#ctor(System.String,System.Int64,System.Int32,System.Int16,System.Type)">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.EnhancedExAttribute.Get(System.Reflection.Assembly)">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedExAttribute.Info">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedExAttribute.BuildDate">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedExAttribute.Hash">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedExAttribute.ApiVersion">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedExAttribute.PersistentType">
            <summary>
             hidden
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.EnhancedAttribute">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.EnhancedAttribute.#ctor(System.String,System.Int16)">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.EnhancedAttribute.#ctor(System.String)">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedAttribute.Info">
            <summary>
             hidden
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.EnhancedAttribute.ApiVersion">
            <summary>
             hidden
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.Helpers.EnumerationHelper">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.GetEnumValue``1(System.String,``0)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.GetEnumValue``1(System.Object,``0)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.GetEnumValue``1(System.Object,``0,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.ConvertEnumValue``2(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.IsEnumValueDefined(System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.Helpers.EnumerationHelper.IsEnumValueDefined``1(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.Helpers.EnumerationHelper.IsValueDefinedDelegate">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.dataobjects.ExtendedPersistenceCapable">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.ExtendedPersistenceCapable.GetSeal">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.ExtendedPersistenceCapable.SetSeal(System.Int64)">
            <summary>hidden</summary>
        </member>
        <member name="T:OpenAccessRuntime.IIteratorWrapper">
            <summary>hidden</summary>
        </member>
        <member name="P:OpenAccessRuntime.IIteratorWrapper.CurrentNoCheck">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.IModifiable">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.IModifiable.Modifiable">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.IModifiable.GenerateIEditableObjectWrapperForNewObjects">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Modifiable">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ObjectListWrapper">
            <summary>
            ObjectListWrapper is a wrapper class for a single persistent object or a
            collection of persistent objects.
            </summary>
            <remarks>
            This class also supports access on readonly source collections (delimited).
            Optionally an IObjectContext can be set, so that an Add/Remove will add it
            to the context and a Remove will delete it from the context.
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ObjectMergeInfo">
            <summary>
            Object specific merge information.
            </summary>
            <remarks>
            <para>
            Instances of this class are used to transport object specific
            information during the merge process performed by
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>. 
            </para>
            <para>
            Instances of this class are only created from the
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.CreateObjectMergeInfo(System.Object,System.Exception,System.Boolean,System.Boolean)"/>
            method. User derived classes can be used during application specific 
            merge algorithms.
            </para>
            <para>
            This class works in close cooperation with the
            <see cref="T:Telerik.OpenAccess.RT.ObjectMerger"/> and 
            <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> classes.
            </para>
            <seealso cref="T:Telerik.OpenAccess.RT.ObjectMerger"/>
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.from">
            <summary>
            The persistent object from the source context. Cannot be null.
            </summary>
            <remarks>
            When used by a <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>, this field
            will hold the object from the source container.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.to">
            <summary>
            The persistent object from the destination context. Can be null.
            This object should be the corresponding counterpart of the
            from object. Usually this means, their database
            object ID will be equal.
            </summary>
            <remarks>
            When used by a <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>, this field
            will hold the object of the target scope.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.conflict">
            <summary>
            The merge conflict that has been detected (if any). Can be null.
            </summary>
            <remarks>
            The conflict field will be set if the database backend has
            detected a conflict. If a conflict is detected, the merge operation 
            will fail if no application-specific handling occures.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.merged">
            <summary>
            Indicates if the object has been merged.
            </summary>
            <remarks>
            This field will be initialized with <c>false</c> and must be set to
            <c>true</c> to indicate that the object merge was successful.
            <para>
            If this field is not set to <c>true</c> at the end of the entire
            merge process, the whole merge step will be regarded as failed.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.isNew">
            <summary>
            Indicates whether an object is new.
            </summary>
            <remarks>
            This field will be set to <c>true</c> when an object is new in
            the target scope.
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMergeInfo.isDeleted">
            <summary>
            Indicates whether an object is deleted.
            </summary>
            <remarks>
            This field will be set to <c>true</c> when an object is deleted in
            the target scope.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMergeInfo.#ctor(System.Object,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Contructs a new ObjectMergeInfo instance with initial values.
            </summary>
            <remarks>
            <para>
            Instances of this type are only created from the
            <see cref="M:Telerik.OpenAccess.RT.ContainerMerger.CreateObjectMergeInfo(System.Object,System.Exception,System.Boolean,System.Boolean)"/> method. You
            need to override this method when application specific merge
            information needs to be managed using derived classes.
            </para>
            Initially, the source context's object is marked as 
            not merged.
            </remarks>
            <param name="fromObj">The source context's object.</param>
            <param name="conflictExc">The merge conflict (if any).</param>
            <param name="n">Indicates if object is new.</param>
            <param name="d">Indicates if object is deleted.</param>
        </member>
        <member name="P:Telerik.OpenAccess.RT.ObjectMergeInfo.show">
            <summary>
            Gets debugging information. Format might change any time.
            </summary>
            <remarks>
            The meaning of the different characters is as follows:
            <list type="bullet">
            <item>R Object is marked as root object.</item>
            <item>S Object snapshot of previous state is known.</item>
            <item>+ Object is resolved in target context.</item>
            <item>C A conflict with the values of the database was detected.
                  </item>
            <item>TODO This object is not merged yet.</item>
            <item>OK This object is marked as merged.</item>
            </list>
            This property should be used for debugging only.
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            </remarks>
            <value>String value showing the state of the conflict.</value>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ObjectMerger">
            <summary>
            Implements a merge algorithm for a pair of objects.
            </summary>
            <remarks>
            <para>
            This class is to be used in close cooperation with
            <see cref="T:Telerik.OpenAccess.RT.ContainerMerger"/> and provides callback methods
            to handle one specific source/target object pair during 
            <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/>.
            </para>
            <para>
            The attribute <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            can be used to mark fields of persistent classes. If such a mark
            exists, the marked field can be protected from loosing its 
            value during <see cref="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)"/> if
            the value of <see cref="F:Telerik.OpenAccess.RT.ObjectMerger.protectOverwrite"/> is <c>true</c>.
            </para>
            <para>
            Specific merge algorithms for application types can be
            performed by using derived implementations of this class.
            </para>
            <seealso cref="T:Telerik.OpenAccess.RT.ContainerMerger"/>
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer"/>
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.RT.ObjectMerger.protectOverwrite">
            <summary>
            Controls if fields of persistent classes marked with
            [ObjectMergerProtectOverwrite] will be protected from
            overwriting during the merge.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.#ctor(System.Boolean)">
            <summary>
            Constructs a new ObjectMerger instance.
            </summary>
            <param name="allFields">If set to <c>true</c>, all fields
            of the persistent classes can be overwritten regardless of
            the <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            attribute usage.
            </param>
            <remarks>
            The <see cref="F:Telerik.OpenAccess.RT.ObjectMerger.protectOverwrite"/> field will be computed by
            the <paramref name="allFields"/> parameter value.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.ProtectOverwrite(System.Object)">
            <summary>
            Callback determining if the [ObjectMergerProtectOverwrite]
            attribute should be obeyed for the given object.
            </summary>
            <param name="srcObj">The object of the source context to check.
            </param>
            <returns>Default implementation returns 
            the value of the field <see cref="F:Telerik.OpenAccess.RT.ObjectMerger.protectOverwrite"/>.</returns>
            <remarks>
            This callback is used by the merge process to determine is 
            overwrite protection needs to be done for the 
            <paramref name="srcObj"/>.
            <seealso cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite"/>
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.CleanObject(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for merging an object of the source context with
            the state 'CLEAN'.
            </summary>
            <remarks>
            Default implementation will resolve the object in the target
            context.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> if successful, <c>false</c> 
            otherwise</returns>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Corresponding 
            destination context object could not be accessed 
            (already deleted, locked, ...)</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.NewObject(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for merging an object of the source context with
            the state 'NEW'.
            </summary>
            <remarks>
            Default implementation will create a new instance in the
            target context and NOT perform <see cref="M:Telerik.OpenAccess.RT.ObjectMerger.CopyObjectContent(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)"/>
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> if successful, <c>false</c> 
            otherwise</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.UpdateObject(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for merging an object of the source context with
            the state 'DIRTY'.
            </summary>
            <remarks>
            Default implementation will resolve the target object and
            perform <see cref="M:Telerik.OpenAccess.RT.ObjectMerger.CopyObjectContent(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)"/>.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> if successful, <c>false</c> 
            otherwise</returns>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Corresponding 
            destination context object could not be accessed 
            (already deleted, locked, ...)</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.CopyObjectContent(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for copying the values of an object of the source
            context into the corresponding destination context's object.
            </summary>
            <remarks>
            Default implementation will overwrite the target context's
            object with the values from the source context, obeying
            the <see cref="F:Telerik.OpenAccess.RT.ObjectMerger.protectOverwrite"/> setting.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> if successful, <c>false</c> 
            otherwise</returns>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Transitively 
            required object in the destination context could not be accessed 
            (already deleted, locked, ...)</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.DeleteObject(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for merging an object of the source context with
            the state 'DELETED'.
            </summary>
            <remarks>
            Default implementation will delete the corresponding target
            context object.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> if successful, <c>false</c> 
            otherwise</returns>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">Corresponding 
            destination context object could not be accessed 
            (already deleted, locked, ...)</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ObjectMerger.HollowObject(Telerik.OpenAccess.RT.ObjectMergeInfo,Telerik.OpenAccess.RT.IObjectMergerContext)">
            <summary>
            Callback for merging an object of the source context with
            the state 'DETACHED' (hollow and not disconnected).
            </summary>
            <remarks>
            Default implementation will simply return <c>true</c> as
            this nothing needs to be done.
            </remarks>
            <param name="info">Information for the object to be 
            handled.</param>
            <param name="ctx">The merge context information.</param>
            <returns><c>true</c> as </returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Offline.OfflineBlob">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.BlobAdapter">
            <summary> Fundamental abstraction of a blob.
            
            </summary>
            <author>  Frank Felix Debatin
            </author>
            <author>  Markus Meier
            </author>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.check">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.getSize">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.setSize(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.setReadAhead(System.Int16)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.getReadAhead">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.flush">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.read(System.Int32,System.Byte[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.write(System.Int32,System.Byte[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.getFlag">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.delete">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.duplicate(Telerik.OpenAccess.SPI.dataobjects.StateManager,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.getBlobHdl">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.BlobAdapter.toByteArray">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Offline.Tracking">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.Tracking.GetOwner">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.Tracking.SetOwner(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.Tracking.MakeDirty">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.check">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.getSize">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.setReadAhead(System.Int16)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.getReadAhead">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.setSize(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.flush">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.read(System.Int32,System.Byte[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.write(System.Int32,System.Byte[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.getFlag">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.delete">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.duplicate(Telerik.OpenAccess.SPI.dataobjects.StateManager,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.getBlobHdl">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.#ctor">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.FillFrom(Telerik.OpenAccess.AbstractBlob)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.FillTo(Telerik.OpenAccess.AbstractBlob)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.OfflineBlob.toByteArray">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.GetOwner">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.MakeDirty">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.#ctor(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.#ctor(`0[],`1[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Add(`0,`1)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.ContainsKey(`0)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Remove(`0)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.TryGetValue(`0,`1@)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Clear">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{K@V}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Item(`0)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Keys">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Values">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.Count">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.IsReadOnly">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.SyncRoot">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.Offline.TrackedGenericIDictionary`2.IsSynchronized">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.SingleFieldIdentity">
            <summary>
            Abstract base class for all single field identity implementations.
            </summary>
            <remarks>
            A common case of single field identity uses exactly one persistent field
            from the class to represent identity. In such cases a prefactured single field 
            identity can be used instead of creating a new user-defined class for
            identity purposes. To enable single field identity for a persistent class
            only the name of the identifying field must be specified, see example.
            <para>
            An instance of this class can be obtained with 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)"/> from a persistent instance or parsed
            by <see cref="M:Telerik.OpenAccess.Database.ParseObjectId(System.Type,System.String)"/> from the key
            string representation.
            </para>
            <para>
            An instance of this class can be used with 
            <see cref="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)"/> to obtain the persistent
            object this instance is refering to.
            </para>
            <para>
            All implementations of the single field identity class are serializable,
            Xml serializable, return the key value in string representation as the
            result of ToString() and behave correctly wrt. Equals()/GetHashCode().
            </para>
            <para>
            The name given to the <see cref="P:Telerik.OpenAccess.PersistentAttribute.IdentityField"/>
            parameter is checked during enhancement. The concrete type used for identity
            is derived from the type of the single identity field. 
            </para>
            <para>
            Currently only certain field types are supported: System.String, System.Guid,
            System.Char, System.Byte, System.Int16, System.Int32, System.Int64. If a
            non-supported type is used, the enhancer will issue an error.
            </para>
            </remarks>
            <example>
            The single field identity must be marked with the 
            <see cref="T:Telerik.OpenAccess.PersistentAttribute"/>. One single field of the persistent class
            must be named with the <c>IdentityField</c> parameter as the 
            holder of the identity. The field must be declared on this class.
            <code>
            [Persistent(IdentityField="name")]
            class Country
            {
                private string name; // There should be no country with the same name.
            
                public string Name	// The value can be accessed in normal fashion.
                {
                    get { return name; } set { name = value; }
                }
            
                long population;     // We should take further increases in population into account.
            	   string code;         // ...
            }
            </code>
            </example>
        </member>
        <member name="F:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.format">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.targetClassName">
            The name of the class of the target object.
        </member>
        <member name="F:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.hashCode">
            The hashCode.
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.#ctor(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.#ctor">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.assertKeyNotNull(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.setTargetClassName(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.getTargetClassName">
            <summary>
            Returns the name of the target class.
            </summary>
            <remarks>
            The target class name can also be the name of the base class which declares 
            the [Persistent] attribute.
            </remarks>
            <returns>
            Name of the target class.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.hashClassName">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.GetHashCode">
            <summary>
            Serves as a hash function for the identity type.
            </summary>
            <remarks>
            The precomputed hash code value is cached in the current instance.
            </remarks>
            <returns>
            A hash code for the current <see cref="T:Telerik.OpenAccess.RT.OID.SingleFieldIdentity"/>.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.Equals(System.Object)">
            <summary>
            Compares two instances of type SingleFieldIdentity.
            </summary>
            <remarks>
            This method will take the key and the target class name into account.
            </remarks>
            <returns>
            <c>True</c> when both instances refer to the same persistent object.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.ToString">
            <summary>
            Returns a string representation of the key.
            </summary>
            <remarks>
            The string representation of the key is not sufficient to
            resolve an identified object as the actual type information is
            not known.
            </remarks>
            <returns>
            String representation of the key.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity._Equals(Telerik.OpenAccess.RT.OID.SingleFieldIdentity)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.CheckString(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.MapFieldType(System.String,System.String)">
            <summary>
            Helper method to map the field type to the concrete type of the single field identity.
            </summary>
            <remarks>
            This method is not intended for customer use.
            </remarks>
            <returns>
            The type of the single field identity.
            </returns>
            <param name="fieldType">The CLR name of the field type.</param>
            <param name="fieldFullName">The full qualified name of the field (is used for error reproting only).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Field type is not supported.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.IsSupportedType(System.String)">
            <summary>
            Helper method to check whether specified type is supported single field identity type.
            </summary>
            <remarks>
            This method is not intended for customer use.
            </remarks>
            <returns>
            true if specified type is supported
            </returns>
            <param name="fieldType">The CLR name of the field type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Field type is not supported.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.GetSupportedTypes">
            <summary>
            Helper method to get an aray of supported single field identity types.
            </summary>
            <remarks>
            This method is not intended for customer use.
            </remarks>
            <returns>
            string[] - array of supported types
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.Create(System.Type,System.Type,System.Object)">
            <summary>
            Helper method to create a single field identity instance.
            </summary>
            <remarks>
            This method is not intended for customer use.
            </remarks>
            <returns>
            Single field identity
            </returns>
            <param name="idType">The type of the single field instance to create.</param>
            <param name="pcType">The type of the referenced instance.</param>
            <param name="val">The key value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">idType is unknown</exception>
            <exception cref="T:System.ArgumentNullException">idType is null</exception>
            <exception cref="T:System.ArgumentNullException">pcType is null</exception>
            <exception cref="T:System.ArgumentNullException">val is null</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.Initialize(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.getWrappedKey">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.Id">
            <summary>
            Gets or sets the identity value of this instance in string representation.
            </summary>
            <remarks>
            This property should not be used to set the identity; use 
            <see cref="M:Telerik.OpenAccess.OIDHelper.FromString(System.String)"/> for this purpose.
            <para>
            This property is used during Xml serialization.
            </para>
            <para>
            Setting this property will reinitialize the object and its hash code can change.
            </para>
            </remarks>
            <value>
            String representation of the identity of a database object including type information.
            </value>
        </member>
        <member name="P:Telerik.OpenAccess.RT.OID.SingleFieldIdentity.IsValid">
            <summary>
            Indicates whether the oid instance is valid, having a non-default value key and a type.
            </summary>
            <value>True if valid</value>
        </member>
        <member name="F:Telerik.OpenAccess.RT.OID.SingleFieldIdentityBase`1.keyValue">
            <summary>
            The identifying key value.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentityBase`1.#ctor(System.Type)">
            <summary>
            Ctor for given class
            </summary>
            <param name="pcClass">PC type</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.SingleFieldIdentityBase`1.getKey">
            <summary>
            Returns the key
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.IntIdentity">
            This class is for identity with a single int field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.LongIdentity">
            This class is for identity with a single long field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.ByteIdentity">
            This class is for identity with a single byte field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.CharIdentity">
            This class is for identity with a single character field.
        </member>
        <member name="M:Telerik.OpenAccess.RT.OID.CharIdentity.Initialize(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.ShortIdentity">
            This class is for identity with a single short field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.StringIdentity">
            This class is for identity with a single string field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.OID.GuidIdentity">
            This class is for identity with a single guid field.
        </member>
        <member name="T:Telerik.OpenAccess.RT.PCHelper">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PCHelper.PreRead(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            <summary>hidden</summary>
            fieldName is currently ignored but may be used for field
            wise loading in the future.
        </member>
        <member name="M:Telerik.OpenAccess.RT.PCHelper.PreWrite(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PerformanceCounterHelper">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PerformanceCounterHelper.ExistsCategory(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PerformanceCounterHelper.AdministerCategory(System.String,System.Diagnostics.CounterCreationDataCollection)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesProvider">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.Find(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.GetClassesSorted">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.IsSorted(System.Collections.ICollection)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.Key(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.Value(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesProvider.IndexOf(System.String,System.Collections.ICollection)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.getInstance">
            <summary>Get the singleton instance.</summary>
            <returns>Singleton</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetFields(System.Type)">
            <summary>Get the field names for a <code>PersistenceCapable</code> class.  The order 
            of fields is the natural ordering of the <code>String</code> class (without
            considering localization).
            </summary>
            <param name="pcClass">the <code>PersistenceCapable</code> class.
            </param>
            <returns> the field names for the class.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetAllFields(System.Type)">
            <summary>Gets all persistent fields for a PersistenceCapableclass without rolling out the struct fields.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetAllFieldsAsMemberInfo(System.Type)">
            <summary>Gets all persistent fields for a PersistenceCapableclass without rolling out the struct fields.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetAllFieldsRolledout(System.Type)">
            <summary>Gets all persistent fields for a PersistenceCapableclass including the struct fields.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetPropertyName(System.Type,System.String)">
            <summary>
            Tries to get the registered property name for a field.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.newObjectIdInstance(System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetCreatorInstance(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.IsPersistenceCapable(System.Type)">
            <summary>
            Indicates whether a type is persistence capable.
            </summary>
            <param name="ty">The type to check</param>
            <returns>True if the respective type is persistence capable.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetPersistenceCapableBaseType(System.Type)">
            <summary>Get the persistence-capable superclass for a <code>PersistenceCapable</code> class.</summary>
            <param name="pcClass">the <code>PersistenceCapable</code> class.
            </param>
            <returns> The <code>PersistenceCapable</code> superclass for this class,
            or <code>null</code> if there isn't one.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.newInstance(System.Type,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>Create a new instance of the class and assign its <code>jdoStateManager</code>.
            The new instance has its <code>jdoFlags</code> set to <code>LOAD_REQUIRED</code>.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewInstance(Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            </seealso>
            <param name="pcClass">the <code>PersistenceCapable</code> class.
            </param>
            <param name="sm">the <code>StateManager</code> which will own the new instance.
            </param>
            <returns> the new instance, or <code>null</code> if the class is not registered.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.newInstance(System.Type,Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.IObjectId)">
            <summary>Create a new instance of the class and assign its <code>jdoStateManager</code> and 
            key values from the ObjectId.  If the oid parameter is <code>null</code>,
            no key values are copied.
            The new instance has its <code>jdoFlags</code> set to <code>LOAD_REQUIRED</code>.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewInstance(Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.IObjectId)">
            </seealso>
            <param name="pcClass">the <code>PersistenceCapable</code> class.
            </param>
            <param name="sm">the <code>StateManager</code> which will own the new instance.
            </param>
            <returns> the new instance, or <code>null</code> if the class is not registered.
            </returns>
            <param name="oid">the ObjectId instance from which to copy key field values.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegisterType(System.Type,System.Type,Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo[],System.Type,Telerik.OpenAccess.RT.PersistentClassesRegistry.CreateInstance)">
            <summary>
            Registers a type as a persistence capable class with all its fields.
            </summary>
            <remarks>
            Calls to this method will be generated by the enhancer and be made during runtime
            when the static constructor for a persistence capable class is executed.
            </remarks>
            <param name="_pcClass">PersistenceCapable type</param>
            <param name="idType">ID class type</param>
            <param name="_fields">Array of field  information</param>
            <param name="_persistenceCapableSuperType">PersistenceCapable base type</param>
            <param name="createDelegate">Creator delegate</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetModelVersion(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.ResolveAlias(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetPersistenceCapableType(System.String)">
            <summary>Look up the type for a PersistenceCapableclass.</summary>
            <param name="name">the class name.
            </param>
            <returns> the <code>Meta</code> for the class name.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetMeta(System.Type)">
            <summary>Look up the metadata for a PersistenceCapable type.</summary>
            <param name="pcClass">Type instance</param>
            <returns>Meta information associated with the type</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.IsPersistentRegistered(System.Type,System.Boolean)">
            <summary>Look up the metadata for a PersistenceCapable type and see if it is there</summary>
            <param name="pcClass">Type instance</param>
            <param name="complain">No exception thrown when false</param>
            <returns>True if meta information is available</returns>
            <exception cref="T:Telerik.OpenAccess.OpenAccessException">When the type is not registered.</exception>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.registerAuthorizedStateManagerClass(System.Object)">
            <summary>Register a class authorized to replaceStateManager.  The caller of
            this method must be authorized for JDOPermission("setStateManager").
            During replaceStateManager, a persistence-capable class will call
            the corresponding checkAuthorizedStateManager and the class of the
            instance of the parameter must have been registered.
            </summary>
            <param name="smClass">a Class that is authorized for JDOPermission("setStateManager").
            </param>
            <throws>  SecurityException if the caller is not authorized for JDOPermission("setStateManager"). </throws>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.checkAuthorizedStateManager(Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>Check that the parameter instance is of a class that is authorized for
            JDOPermission("setStateManager").  This method is called by the
            replaceStateManager method in persistence-capable classes.
            A class that is passed as the parameter to replaceStateManager must be
            authorized for JDOPermission("setStateManager").  To improve performance,
            first the set of authorized classes is checked, and if not present, a
            regular permission check is made.  The regular permission check requires
            that all callers on the stack, including the persistence-capable class
            itself, must be authorized for JDOPermission("setStateManager").
            </summary>
            <param name="sm">an instance of StateManager whose class is to be checked.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.CheckLicense(System.Collections.Generic.Dictionary{System.Reflection.Assembly,System.Int32})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegisterAssembly(System.Type[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.HasCompositeKeys(System.Type)">
            <summary>
            Indicates if the passed type uses composite keys.
            </summary>
            <param name="t">Type to test</param>
            <returns><c>true</c> is type uses composite keys</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.IsPersistentField(System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.GetInfo(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PersistentClassesRegistry.Version">
            <summary>
            Returns a version number for compatibility checks between the enhanced user assembly and the API assembly.
            </summary>
            <remarks>
            The current value at the time of enhancement is written into the enhanced assembly and will be
            checked when the assembly is processed for persistence capable types at runtime.
            </remarks>
            <value>Current interface version number</value>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry.CreateInstance">
            <summary>
            Generates a new persistence capable instance.
            </summary>
            <returns>The create instance.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo">
            <summary>
            Information about one persistent field
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.#ctor(System.Reflection.FieldInfo,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Ctor for RegistryFieldInfo
            </summary>
            <param name="fieldInfo">Field handle</param>
            <param name="primaryKey">Is primary key part?</param>
            <param name="defaultFetchGroup">Is in default fetch group?</param>
            <param name="versionField">Is version field?</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.fieldInfo">
            <summary>
            The field handle of the persistent field.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.primaryKey">
            <summary>
            True if field is part of the primary key.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.defaultFetchGroup">
            <summary>
            True if field is part of the default fetch group.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.versionField">
            <summary>
            True if field is the version field.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo.propertyName">
            <summary>
            The name of the property bound to the persistent field.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry.Meta">
            <summary>This is a helper class to manage metadata per persistence-capable
            class.  The information is used at runtime to provide field names and
            field types to the JDO Model.
            
            This is the value of the <code>HashMap</code> which
            relates the <code>PersistenceCapable Class</code>
            as a key to the metadata.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry.IEnhancedClassInfo">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PersistentClassesRegistry.IEnhancedClassInfo.PersistenceCapableBaseType">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.Meta.#ctor(System.Type,System.Type,Telerik.OpenAccess.RT.PersistentClassesRegistry.CreateInstance,System.Type,Telerik.OpenAccess.PersistentAttribute,Telerik.OpenAccess.RT.PersistentClassesRegistry.RegistryFieldInfo[],System.Int32)">
            <summary>Construct an instance of <code>Meta</code>.</summary>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PersistentClassesRegistry.Meta.pc">
            <summary>This is an instance of <code>PersistenceCapable</code>,
            used at runtime to create new instances.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.Meta.ToString">
            <summary>Return the string form of the metadata.</summary>
            <returns> the string form
            </returns>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PersistentClassesRegistry.Meta.PC">
            <summary>Get an instance of the <code>PersistenceCapable</code> class.</summary>
            <returns> an instance of the <code>PersistenceCapable Class</code>.
            </returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentClassesRegistry.ModelVersionAttribute">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PersistentClassesRegistry.ModelVersionAttribute.#ctor(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PersistentClassesRegistry.ModelVersionAttribute.Version">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PersistentPropertyDescriptor">
            <summary>
            PropertyDescriptor for persistent objects.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PointerHashtable">
            <summary>
            Hashtable using pointer reference equals and hash values.
            Usable when hashing over user application defined objects
            where hash and equals might be overwritten.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PrimitivePropertyDescriptor">
            <summary>
            The Primitve Property Descriptor is used for collections 
            of primitive types
            used during runtime as well as in design-mode
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PropertyDescriptorHelper">
            <summary>
            Helper class for custom properties.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.#ctor(System.Type,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <remarks>
            Helper class for custom properties.
            </remarks>
            <param name="rootType">If <c>null</c>, System.Object is used.</param>
            <param name="type2Properties">-</param>
            <param name="designMode">-</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.GetItemProperties(System.ComponentModel.PropertyDescriptor[],Telerik.OpenAccess.RT.IModifiable,System.Boolean)">
            <summary>
            Returns the PropertyDescriptorCollection that represents 
            the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">
             An array of System.ComponentModel.PropertyDescriptor objects 
             to find in the collection as bindable. This can be null .
            </param>
            <param name="txnAllowsModification">
             An object indicating whether modifications are allowed.
            </param>
            <param name="generateReferenceWrapper">
            A bool indicating if an wrapper for references should be generated
            </param>
            <returns>
            The System.ComponentModel.PropertyDescriptorCollection 
            that represents the properties on each item used to bind data.
            </returns>
            <remarks>
            This method uses database schema information.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.GetItemProperties(System.ComponentModel.PropertyDescriptor[],System.Type,System.Collections.Hashtable,System.Boolean,Telerik.OpenAccess.RT.IModifiable,System.Boolean)">
            <summary>
            Returns the PropertyDescriptorCollection that represents 
            the properties on each item used to bind data.
            </summary>
            <!--
            <param name="listAccessors">
             An array of System.ComponentModel.PropertyDescriptor objects 
             to find in the collection as bindable. This can be null .
            </param>
            <param name="DesignMode"></param>
            <param name="rootType"></param>
            <param name="type2Properties"></param>
            -->
            <returns>
            The System.ComponentModel.PropertyDescriptorCollection 
            that represents the properties on each item used to bind data.
            </returns>
            <remarks>
            This method uses database schema information.
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">
            An array of System.ComponentModel.PropertyDescriptor objects, 
            the list name for which is returned. This can be null .
            </param>
            <returns>Name of the list.</returns>
            <remarks>The name is composed by concatenating the names of the
            properties.</remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.IsReference(System.Type)">
            <summary>
            Check if the Type is a Reference Type.
            </summary>
            <param name="t">
            The Type to be checked.
            </param>
            <returns>The result.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.GetAliasedField(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the field when a FieldAlias is specified.
            </summary>
            <param name="pi">The property which carries the FieldAlias</param>
            <param name="throwOnError">Throw exception on missing field</param>
            <returns>Field Info</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PropertyDescriptorHelper.DeductItemTypeFromGeneric(System.Type)">
            <summary>
            Calculates the item type attribute from a generic type if applicable
            </summary>
            <param name="t">Generic type</param>
            <returns>Item type if applicable</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PureSet`1">
            <summary>
            Typed set implementation with provisions for optimizing small sets
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Telerik.OpenAccess.RT.PureSet`1.EMPTY_SET">
            <summary>
            An empty, unmodifiable set.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by the serialization framework to obtain the content of this instance
            </summary>
            <param name="sInfo">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance during deserialization
            </summary>
            <param name="sInfo">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs an instance
            </summary>
            <param name="read_only">Controls if read-only or not</param>
            <param name="eq">Controls is object identity is to be compared</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Boolean)">
            <summary>
            Constructs an instance
            </summary>
            <param name="read_only">Controls if read-only or not</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor">
            <summary>
            Constructs an instance
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Int32)">
            <summary>
            Constructs an instance
            </summary>
            <param name="initialSize">Initial space allocation</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Constructs an instance
            </summary>
            <param name="coll">Initial content</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Constructs an instance
            </summary>
            <param name="dict">Initial content provider</param>
            <param name="keys">Indiciates if Keys from the dictionary should be used or Values</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Add(`0)">
            <summary>
            Adds a new entry in the set
            </summary>
            <param name="name">The instance to add</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Added(`0)">
            <summary>
            Adds a new entry in the set when not already present
            </summary>
            <param name="name">The instance to add</param>
            <returns>True when set was modified</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all instances of the collection
            </summary>
            <param name="coll">The collection to add</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remnoves all instances of the collection
            </summary>
            <param name="coll">The collection to remove</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Contains(`0)">
            <summary>
            Indicates if the set contains the passed instance
            </summary>
            <param name="name">The instance to check</param>
            <returns>True when the instance is contained in the set</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Remove(`0)">
            <summary>
            Removes the instance from the set
            </summary>
            <param name="name">The instance to remove</param>
            <returns>True when found, False otherwise</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Clear">
            <summary>
            Clears the set
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.ToArray">
            <summary>
            Returns an array with the contents.
            </summary>
            <returns>Array with contents</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the set to the passed array
            </summary>
            <param name="array">Target array</param>
            <param name="index">Target array index</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.ContentString">
            <summary>
            Returns a comma separated representation string representation of the content.
            </summary>
            <returns>Stringified content values</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.GetEnumerator">
            <summary>
            Returns an enumerator through the set
            </summary>
            <returns>Enumerator instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator through the set
            </summary>
            <returns>Enumerator instance</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the set to the passed array
            </summary>
            <param name="array">Target array</param>
            <param name="index">Target array index</param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Equals(System.Object)">
            <summary>
            Tests for equality with another instance
            </summary>
            <param name="obj">The other instance</param>
            <returns>True if the other instance contains the same content</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.GetHashCode">
            <summary>
            Returns a hash code
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.GetOrderInvariantHashCode">
            <summary>
            Returns an order invariant hash code.
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.GetSingle">
            <summary>
            Returns the only element in the collection.
            </summary>
            <returns>The one element</returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.Callback(Telerik.OpenAccess.RT.PureSet{`0}.ICallback)">
            <summary>
            Calls an instance back with all values, optionally returning the count and stoppping
            </summary>
            <param name="callback">Instance to call back</param>
            <returns>Integer value</returns>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PureSet`1.Count">
            <summary>
            Gets the number of entries in the set
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PureSet`1.IsSynchronized">
            <summary>
            Indicates whether the set is synchronized
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PureSet`1.SyncRoot">
            <summary>
            Returns the synchronization instance
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.RT.PureSet`1.IsReadOnly">
            <summary>
            Indicates whether the instance is modifiable
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.PureSet`1.ICallback">
            <summary>
            Callback for set
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.PureSet`1.ICallback.Callback(`0)">
            <summary>
            Callback method
            </summary>
            <param name="s">Set</param>
            <returns>less than 0 to abort iteration, grater than 0 to count</returns>
        </member>
        <member name="T:Telerik.OpenAccess.RT.ResultContainer">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ResultContainer.HandBack">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ResultContainer.#ctor">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ResultContainer.#ctor(System.Collections.ArrayList,System.String,System.String)">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.ResultContainer.GetDelegate">
            <summary>
             hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TraceImpl.ResetLevel(System.String)">
            <summary>
            Sets the level value to the specified one. 
            Allows you to set value lower than the current one (for example switching from "verbose" to "none" level).
            </summary>
            <remarks>
            Allowed friendly names include:
            <para>0 = none, off, false</para>
            <para>1 = error, critical</para>
            <para>2 = normal, warning</para>
            <para>3 = information</para>
            <para>4 = verbose</para>
            <para>5 = all</para>
            </remarks>
            <param name="newValue">The new value. Accept raw numeric values as well as their friendly names ("none", "error", "normal", "information", "verbose", "all" and etc.)</param>
        </member>
        <member name="T:Telerik.OpenAccess.RT.Transaction">
            <summary>The JDO <code>Transaction</code> interface provides for initiation and completion 
            of transactions under user control.
            It is a sub-interface of the {@link PersistenceManager}
            that deals with options and transaction demarcation. 
            <P/>Transaction options include whether optimistic concurrency
            control should be used for the current transaction, whether instances
            may hold values in the cache outside transactions, and whether
            values should be retained in the cache after transaction completion.  These
            options are valid for both managed and non-managed transactions.
            
            <P/>Transaction initiation and completion methods have similar semantics to
            <code>javax.transaction.UserTransaction</code> when used outside a managed
            environment. When used in a managed environment, transaction initiation 
            and completion methods may only be used with bean-managed transaction semantics.
            </summary>
            <version>  2.0
            </version>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.isActive">
            <summary>Returns whether there is a transaction currently active.</summary>
            <returns> <code>true</code> if the transaction is active.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getNontransactionalRead">
            <summary>If <code>true</code>, allows persistent instances to be read without
            a transaction active.
            </summary>
            <returns> the value of the nontransactionalRead property
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setNontransactionalRead(System.Boolean)">
            <summary>If <code>true</code>, allow persistent instances to be read without
            a transaction active.
            If an implementation does not support this option, a 
            <code>JDOUnsupportedOptionException</code> is thrown.
            </summary>
            <param name="nontransactionalRead">the value of the nontransactionalRead property
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getNontransactionalWrite">
            <summary>If <code>true</code>, allows persistent instances to be written without
            a transaction active.
            </summary>
            <returns> the value of the nontransactionalWrite property
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setNontransactionalWrite(System.Boolean)">
            <summary>If <code>true</code>, allow persistent instances to be written without
            a transaction active.
            If an implementation does not support this option, a 
            <code>JDOUnsupportedOptionException</code> is thrown.
            </summary>
            <param name="nontransactionalWrite">the value of the nontransactionalRead property
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getRetainValues">
            <summary>If <code>true</code>, at commit time instances retain their field values.</summary>
            <returns> the value of the retainValues property
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setRetainValues(System.Boolean)">
            <summary>If <code>true</code>, at commit instances retain their values and the instances
            transition to persistent-nontransactional.
            If an implementation does not support this option, a 
            <code>JDOUnsupportedOptionException</code> is thrown.
            </summary>
            <param name="retainValues">the value of the retainValues property
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getRestoreValues">
            <summary>Return the current value of the restoreValues property.</summary>
            <returns> the value of the restoreValues property
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setRestoreValues(System.Boolean)">
            <summary>If <code>true</code>, at rollback, fields of newly persistent instances 
            are restored to 
            their values as of the beginning of the transaction, and the instances
            revert to transient.  Additionally, fields of modified
            instances of primitive types and immutable reference types
            are restored to their values as of the beginning of the 
            transaction.
            <P/>If <code>false</code>, at rollback, the values of fields of 
            newly persistent instances are unchanged and the instances revert to
            transient.  Additionally, dirty instances transition to hollow.
            If an implementation does not support this option, a 
            <code>JDOUnsupportedOptionException</code> is thrown.
            </summary>
            <param name="restoreValues">the value of the restoreValues property
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getOptimistic">
            <summary>Optimistic transactions do not hold data store locks until commit time.</summary>
            <returns> the value of the Optimistic property.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setOptimistic(System.Boolean)">
            <summary>Optimistic transactions do not hold data store locks until commit time.
            If an implementation does not support this option, a 
            <code>JDOUnsupportedOptionException</code> is thrown.
            </summary>
            <param name="optimistic">the value of the Optimistic flag.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.begin">
            <summary>Begin a transaction.  The type of transaction is determined by the
            setting of the Optimistic flag.
            </summary>
            <seealso cref="M:Telerik.OpenAccess.RT.Transaction.setOptimistic(System.Boolean)">
            </seealso>
            <seealso cref="M:Telerik.OpenAccess.RT.Transaction.getOptimistic">
            </seealso>
            <throws>  JDOUserException if transactions are managed by a container </throws>
            <summary> in the managed environment, or if the transaction is already active.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.commit">
            <summary>Commit the current transaction.</summary>
            <throws>  JDOUserException if transactions are managed by a container </throws>
            <summary> in the managed environment, or if the transaction is not active.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.rollback">
            <summary>Roll back the current transaction.</summary>
            <throws>  JDOUserException if transactions are managed by a container </throws>
            <summary> in the managed environment, or if the transaction is not active.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.getRollbackOnly">
            <summary> Returns the rollback-only status of the transaction. When
            begun, the rollback-only status is false. Either the 
            application or the JDO implementation may set this flag
            using setRollbackOnly.
            </summary>
            <returns> <code>true</code> if the transaction has been
            marked for rollback.
            </returns>
            <since> 2.0
            </since>
        </member>
        <member name="M:Telerik.OpenAccess.RT.Transaction.setRollbackOnly">
            <summary> Sets the rollback-only status of the transaction to <code>true</code>.
            After this flag is set to <code>true</code>, the transaction 
            can no longer be committed, and any attempt to commit the 
            transaction will throw <code>JDOUserException</code>.
            </summary>
            <since> 2.0
            </since>
        </member>
        <member name="T:Telerik.OpenAccess.RT.TypeConverterImpl">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.#ctor">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeConverterImpl.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.TypeMapper">
            <summary>
            hidden
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeMapper.GetJavaTypeName(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.RT.TypeResolver">
            <summary>
            Resolves .net type names to types and allows to associate information on that type
            </summary>
            <remarks>
            The internally held object array with three elements holds the
            type at position 0, class information at position 1, disconnected
            class information at 2, indication whether it is PC type on 3;
            </remarks>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.ResolvePersistenceCapableTypeName(System.String,System.Boolean@)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.ResolveTypeName(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.ResolveTypeNameArtificial(System.String,System.Boolean,System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.AssociateTypeName(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.AssociateArtificial(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.Associate(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.AddAssembly(System.Reflection.Assembly)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.FindUncachedType(System.String)">
            <summary>Tries to find the type name in all loaded assemblies.</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.Reset">
            <summary>
            call if the compiled and enhanced assembly is changed, should only be necessary during designtime
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.FindIEnumerable(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.RT.TypeResolver.GetElementType(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.AssemblyNotFoundException">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.AssemblyNotFoundException.#ctor(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.AssemblyProvider">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IAssemblyProvider">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IAssemblyProvider.Load(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.AssemblyProvider.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.AssemblyProvider.StartResolveHandler">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.AssemblyProvider.StopResolveHandler">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.AssemblyProvider.Load(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.AssemblyProvider.CheckVersion">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Backends">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.GetGenieBackend">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.HasBackend(Telerik.OpenAccess.Config.ConfigDefs.BackendType)">
            <summary>
            Determine if a backend is available
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.CreateRuntimeConfigManager(System.String,System.Xml.XmlElement,System.Reflection.Assembly[],System.Reflection.Assembly,Telerik.OpenAccess.BackendConfiguration)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.FilterAssemblies(System.Reflection.Assembly[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.ThrowException(System.Exception)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Backends.CallbackDuringDatabaseAddRemove(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ClassConfig">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetBaseClass(Telerik.OpenAccess.SPI.ClassConfig)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetInterfaces(Telerik.OpenAccess.SPI.ClassConfig[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetFields(Telerik.OpenAccess.SPI.FieldConfig[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetEmbedded(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetInterface(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetAlias(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetHasExtent(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetPkFields(System.String[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ClassConfig.SetVersionField(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ConfigCollector">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.#ctor(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.IsEnhanced(System.Reflection.Assembly)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.CheckLicense(System.Reflection.Assembly)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.Collect(Telerik.OpenAccess.SPI.IConfigBuilder,Telerik.OpenAccess.SPI.IAssemblyProvider,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.Collect(Telerik.OpenAccess.SPI.IConfigBuilder,Telerik.OpenAccess.SPI.IAssemblyProvider,System.Collections.Hashtable,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.GetPropertyAlias(System.Reflection.PropertyInfo)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.IsTransient(System.Reflection.FieldInfo)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ConfigCollector.IsRegisteredCollection(System.Type)">
            <summary>internal</summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ConfigCollector.DFG">
            <summary>SPI</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ConfigCollector.DFG.Default">
            <summary>SPI</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ConfigCollector.DFG.Included">
            <summary>SPI</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.ConfigCollector.DFG.Excluded">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields">
            <summary> A class that can be managed by a JDO implementation must implement this interface.
            
            <P/>Every class whose instances can be managed by a JDO PersistenceManager must
            implement the PersistenceCapable interface.
            
            <P/>This interface defines methods that allow the implementation to manage
            the instances.  It also defines methods that allow a JDO aware
            application to examine the runtime state of instances.  For example,
            an application can discover whether the instance is persistent, transactional,
            dirty, new, or deleted; and to get its associated
            PersistenceManager if it has one.
            
            <P/>In the Reference Implementation, the JDO Enhancer modifies the class
            to implement PersistenceCapable prior to loading the class into the runtime
            environment.  The Reference Enhancer also adds code to implement the
            methods defined by PersistenceCapable.
            
            <P/>The extra methods in the PersistenceCapable interface might be generated
            by pre-processing a .java file, or might be generated from a tool directly.
            The exact technique for generating the extra methods is not specified by
            JDO.
            
            <P/>The PersistenceCapable interface is designed to avoid name conflicts
            in the scope of user-defined classes.  All of its declared method
            names are prefixed with 'jdo'.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.READ_WRITE_OK">
            <summary>If jdoFlags is set to READ_WRITE_OK, then the fields in the default fetch group
            can be accessed for read or write without notifying the StateManager.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.LOAD_REQUIRED">
            <summary>If jdoFlags is set to LOAD_REQUIRED, then the fields in the default fetch group
            cannot be accessed for read or write without notifying the StateManager.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.DETACHED">
            <summary>If jdoFlags is set to DETACHED, then fields identified as loadedFields
            can be read and written without having a StateManager. Fields modified
            while detached are kept track of as modifiedFields.
            </summary>
            <since> 2.0
            </since>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.READ_OK">
            <summary>If jdoFlags is set to READ_OK, then the fields in the default fetch group
            can be accessed for read without notifying the StateManager.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.CHECK_READ">
            <summary>If jdoFieldFlags for a field includes CHECK_READ, then
            the field has been enhanced to call the jdoStateManager on read
            if the jdoFlags setting is not READ_OK or READ_WRITE_OK.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.MEDIATE_READ">
            <summary>If jdoFieldFlags for a field includes MEDIATE_READ, then
            the field has been enhanced to always call the jdoStateManager
            on all reads.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.CHECK_WRITE">
            <summary>If jdoFieldFlags for a field includes CHECK_WRITE,
            then the field has been enhanced to call the
            jdoStateManager on write if the jdoFlags setting is not
            READ_WRITE_OK;.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.MEDIATE_WRITE">
            <summary>If jdoFieldFlags for a field includes MEDIATE_WRITE, then
            the field has been enhanced to always call the jdoStateManager
            on all writes.
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable_Fields.SERIALIZABLE">
            <summary>If jdoFieldFlags for a field includes SERIALIZABLE,
            then the field is not declared as TRANSIENT.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedGetPersistenceManager">
            <summary>Return the associated PersistenceManager if there is one.
            Transactional and persistent instances return the associated
            PersistenceManager.
            
            <P/>Transient non-transactional instances return null.
            <P/>This method always delegates to the StateManager if it is non-null.
            </summary>
            <returns> the PersistenceManager associated with this instance.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedReplaceStateManager(Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>This method sets the StateManager instance that manages the state
            of this instance. This method is normally used by the StateManager
            during the process of making an instance persistent, transient,
            or transactional.
            
            The caller of this method must have JDOPermission for the instance,
            if the instance is not already owned by a StateManager.
            If the parameter is null, and the StateManager approves the change,
            then the jdoFlags field will be reset to READ_WRITE_OK.
            If the parameter is not null, and the security manager approves
            the change, then the jdoFlags field will be reset to LOAD_REQUIRED.
            </summary>
            <param name="sm">The StateManager which will own this instance, or null
            to reset the instance to transient state
            </param>
            <throws>  SecurityException if the caller does not have JDOPermission </throws>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedProvideField(System.Int32)">
            <summary>The owning StateManager uses this method to ask the instance to
            provide the value of the single field identified by fieldNumber.
            </summary>
            <param name="fieldNumber">the field whose value is to be provided by
            a callback to the StateManager's
            providedXXXField method
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedProvideFields(System.Int32[])">
            <summary>The owning StateManager uses this method to ask the instance to
            provide the values of the multiple fields identified by fieldNumbers.
            </summary>
            <param name="fieldNumbers">the fields whose values are to be provided by
            multiple callbacks to the StateManager's
            providedXXXField method
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedReplaceField(System.Int32)">
            <summary>The owning StateManager uses this method to ask the instance to
            replace the value of the single field identified by number.
            </summary>
            <param name="fieldNumber">the field whose value is to be replaced by
            a callback to the StateManager's
            replacingXXXField method
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedReplaceFields(System.Int32[])">
            <summary>The owning StateManager uses this method to ask the instance to
            replace the values of the multiple fields identified by number.
            </summary>
            <param name="fieldNumbers">the fields whose values are to be replaced by
            multiple callbacks to the StateManager's
            replacingXXXField method
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedReplaceFlags">
            <summary>The owning StateManager uses this method to ask the instance to
            replace the value of the flags by calling back the StateManager
            ReplacingFlags method.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedMakeDirty(System.String)">
            <summary>Explicitly mark this instance and this field dirty.
            Normally, PersistenceCapable classes are able to detect changes made
            to their fields.  However, if a reference to an array is given to a
            method outside the class, and the array is modified, then the
            persistent instance is not aware of the change.  This API allows the
            application to notify the instance that a change was made to a field.
            
            <P/>The field name should be the fully qualified name, including package
            name and class name of the class declaring the field.  This allows
            unambiguous identification of the field to be marked dirty.
            If multiple classes declare the same field, and
            if the package and class name are not provided by the parameter in
            this API, then the field marked
            dirty is the field declared by the most derived class.
            <P/>Transient instances ignore this method.
            <P/>
            </summary>
            <param name="fieldName">the name of the field to be marked dirty.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedPreSerialize">
            <summary> Ensure that object is loaded. fieldNo is currently ignored</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedGetObjectId">
            <summary>Return a copy of the JDO identity associated with this instance.
            
            <P/>Persistent instances of PersistenceCapable classes have a JDO identity
            managed by the PersistenceManager.  This method returns a copy of the
            ObjectId that represents the JDO identity.
            
            <P/>Transient instances return null.
            
            <P/>The ObjectId may be serialized
            and later restored, and used with a PersistenceManager from the same JDO
            implementation to locate a persistent instance with the same data store
            identity.
            
            <P/>If the JDO identity is managed by the application, then the ObjectId may
            be used with a PersistenceManager from any JDO implementation that supports
            the PersistenceCapable class.
            
            <P/>If the JDO identity is not managed by the application or the data store,
            then the ObjectId returned is only valid within the current transaction.
            <P/>If the JDO identity is being changed in the transaction, this method
            returns the object id as of the beginning of the current transaction.
            
            </summary>
            <seealso cref="M:Telerik.OpenAccess.SPI.IPersistenceManager.getObjectId(System.Object)">
            </seealso>
            <returns> a copy of the ObjectId of this instance as of the beginning of the transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedIsDirty(System.String)">
            <summary>Tests whether this object is dirty.
            
            Instances that have been modified, deleted, or newly
            made persistent in the current transaction return true.
            
            <P/>Transient instances return false.
            <P/>
            </summary>
            <returns> true if this instance has been modified in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedIsTransactional">
            <summary>Tests whether this object is transactional.
            
            Instances whose state is associated with the current transaction
            return true.
            
            <P/>Transient instances return false.
            <P/>
            </summary>
            <returns> true if this instance is transactional.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedIsPersistent">
            <summary>Tests whether this object is persistent.
            Instances that represent persistent objects in the data store
            return true.
            </summary>
            <returns> true if this instance is persistent.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedIsNew">
            <summary>Tests whether this object has been newly made persistent.
            
            Instances that have been made persistent in the current transaction
            return true.
            
            <P/>Transient instances return false.
            <P/>
            </summary>
            <returns> true if this instance was made persistent
            in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedIsDeleted">
            <summary>Tests whether this object has been deleted.
            
            Instances that have been deleted in the current transaction return true.
            
            <P/>Transient instances return false.
            <P/>
            </summary>
            <returns> true if this instance was deleted
            in the current transaction.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewInstance(Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>Return a new instance of this class, with the jdoStateManager set to the
            parameter, and jdoFlags set to LOAD_REQUIRED.
            <P/>This method is used as a performance optimization as an alternative to
            using reflection to construct a new instance.  It is used by the
            Telerik.OpenAccess.RT.PersistentClassesRegistry class method newInstance.
            </summary>
            <returns> a new instance of this class.
            </returns>
            <param name="sm">the StateManager that will own the new instance.
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewInstance(Telerik.OpenAccess.SPI.dataobjects.StateManager,Telerik.OpenAccess.IObjectId)">
            <summary>Return a new instance of this class, with the jdoStateManager set to the
            parameter, key fields initialized to the values in the oid, and jdoFlags
            set to LOAD_REQUIRED.
            <P/>This method is used as a performance optimization as an alternative to
            using reflection to construct a new instance of a class that uses
            application identity.  It is used by the
            Telerik.OpenAccess.RT.PersistentClassesRegistry class method newInstance.
            </summary>
            <returns> a new instance of this class.
            </returns>
            <param name="sm">the StateManager that will own the new instance.
            </param>
            <param name="oid">an instance of the object id class (application identity).
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewObjectIdInstance">
            <summary>Create a new instance of the ObjectId class for this PersistenceCapable class.
            The fields will have their Java default values.
            </summary>
            <returns> the new instance created.
            </returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedNewObjectIdInstance(System.String)">
            <summary>Create a new instance of the class used for JDO identity, using the
            key constructor of the object id class. It is intended only for single
            field identity. The identity
            instance returned has no relationship with the values of the primary key
            fields of the persistence-capable instance on which the method is called.
            If the key is the wrong class for the object id class, null is returned.
            </summary>
            <returns> the new instance created.
            </returns>
            <param name="str">the String form of the object identity
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedCopyKeyFieldsToObjectId(Telerik.OpenAccess.IObjectId)">
            <summary>Copy fields from this PersistenceCapable instance to the Object Id instance.</summary>
            <param name="oid">the ObjectId target of the key fields
            </param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable.OpenAccessEnhancedCopyKeyFieldsFromObjectId(Telerik.OpenAccess.IObjectId)">
            <summary>Copy fields from the ObjectId instance to this PersistenceCapable.</summary>
            <param name="oid">the ObjectId source of the key fields
            </param>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.DataReaderTypeConverter">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.DataReaderTypeConverter.Clear">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.DataReaderTypeConverter.Convert(System.Type,System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.FetchPlanFragment">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.FetchPlanFragment.SeparatorPath">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.FetchPlanFragment.SeparatorAssociative">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FetchPlanFragment.#ctor(System.Type,System.String[],System.Boolean,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FetchPlanFragment.#ctor(System.String,System.String[],System.Boolean,System.String)">
            <summary>
            hidden
            </summary>        
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FetchPlanFragment.Equals(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FetchPlanFragment.GetHashCode">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FetchPlanFragment.ToString">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.FetchPlanFragment.IsAssociative">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.FetchPlanFragment.TypeName">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.FetchPlanFragment.Path">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.FetchPlanFragment.PathExtension">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.FieldConfig">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetDepend(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetItemType(Telerik.OpenAccess.SPI.TypeConfig)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetKeyType(Telerik.OpenAccess.SPI.TypeConfig)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetValueType(Telerik.OpenAccess.SPI.TypeConfig)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetSerialized(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetPersistenceModifier(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetEmbedded(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetDefaultFetchGroup(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetAutoValue(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.FieldConfig.SetAlias(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IAdministration">
            <summary>spi</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IAdministration.CreateDatabase(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IADOWrapper`1">
            <summary>
            SPI
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IADOWrapper`1.StoreObject">
             <summary>
            SPI 
             </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ADOWrapperExtensions">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ADOWrapperExtensions.UnWrap``1(``0)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IArtificialType">
            <summary>
            hidden
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IBackend">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.GetDatabase(System.String,System.String,Telerik.OpenAccess.Config.ConfigManager,Telerik.OpenAccess.Metadata.MetadataContainer)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.GetConfigBuilder">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.GetSchemaAdapter">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.ObjectId(System.String,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.ObjectId(System.Type,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.MakeObjectId(System.Object)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.Cast2IObjectId(System.Object)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.IsExtent(System.Object)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.WriteTo(System.IO.BinaryWriter,Telerik.OpenAccess.Diagnostics.ITraceEvent[])">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IBackend.ReadFrom(System.IO.Stream)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IClassMetaData">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ITypeMetaData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ITypeMetaData.GetName">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IClassMetaData.GetFieldMetaData(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IClassMetaData.GetFieldTypeMetaData(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IClassMetaData.GetSlotNums">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IClassMetaData.NewInstance">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IClassMetaData.GetAlias">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IConfigBackendAdapter">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBackendAdapter.SetConfigSection(System.String[],System.String[],System.String[])">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IConfigBuilder">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.Init(System.Reflection.Assembly)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.GetEmbeddedDefault(System.Reflection.Assembly)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.IsNonEmbedded(System.Attribute)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.PropagateValues">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.GetOrCreateClassConfig(System.String,System.Boolean,System.Boolean,System.Type,System.String[],System.String,Telerik.OpenAccess.Metadata.CascadeDeleteOption)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.GetOrCreateTypeConfig(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.GetArrayTypeConfig(Telerik.OpenAccess.SPI.TypeConfig)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.CreateFieldConfig(Telerik.OpenAccess.SPI.ClassConfig,System.String,Telerik.OpenAccess.SPI.TypeConfig,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.CreateIndexConfig(Telerik.OpenAccess.SPI.ClassConfig,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.CreateFetchGroup(Telerik.OpenAccess.SPI.ClassConfig,Telerik.OpenAccess.FetchGroupAttribute)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IConfigBuilder.CreateFetchGroup(Telerik.OpenAccess.SPI.ClassConfig,System.String,Telerik.OpenAccess.FetchFieldAttribute)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IDatabaseAdapter">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetObjectScope">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetObjectScope(Telerik.OpenAccess.TransactionProvider)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetObjectScope(System.String,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetObjectScope(System.String,System.String,Telerik.OpenAccess.TransactionProvider)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.DisposeScope(Telerik.OpenAccess.IObjectScope,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.MakeBlob(Telerik.OpenAccess.IObjectScope,System.Int16)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.Close(System.Boolean,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetClassId(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetSchemaAdapter(System.Object)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetMetaData">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.ResetMetaData">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.EvictAll">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.EvictAll(System.Type,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.Evict(Telerik.OpenAccess.IObjectId)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.IObjectId})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.IsCached(Telerik.OpenAccess.IObjectId)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.Evict(Telerik.OpenAccess.ObjectKey)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.IsCached(Telerik.OpenAccess.ObjectKey)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetConfiguration(Telerik.OpenAccess.SPI.PropertySet@)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetEffectiveConnectionString">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.OpenScopesCount">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetBackendInformation">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.CalculateFetchPlan(System.Collections.Generic.ICollection{Telerik.OpenAccess.SPI.FetchPlanFragment})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetEvents(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.GetEvents(System.Int32,System.Nullable{System.Int32})">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IDatabaseAdapter.ReplaceMetadata(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.SchemaUpdateCallback)">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.ConnectionURL">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.ConnectionId">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.ConnectionTimeout">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.CommandTimeout">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.TransactionProvider">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.IsOpened">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.DefaultTransactionProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IDatabaseAdapter.AvoidQueryParameters">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IExtendedObjectScope">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.makeFilteringClosure(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetQueryBuilder(System.Type,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.CheckPersistentType(System.Type)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.CreateObjectKeyBuilder(System.Type)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.CommitChanges">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.ClearChanges">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.FlushChanges(System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Object[])">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Object[])">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetLastConflicts">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetMetrics(System.Boolean)">
            <summary>
            Returns the metric counters for this instance and optionally resets the internal values.
            </summary>
            <remarks>
            The metric counters can be used to obtain runtime behavior statistics in order to aid 
            application monitoring. The counters returned by <see cref="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetMetrics(System.Boolean)"/> are affected by
            the actions that this object context performs. 
            <para>
            To obtain aggregated metric counter values for the used database instance, please refer to
            the <see cref="M:Telerik.OpenAccess.Diagnostics.History.GetDatabaseMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})"/> method.
            </para>
            </remarks>
            <param name="reset">When <c>True</c>, the internal counter values are reset.</param>
            <returns>New metric instance that holds the context specific values</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetObjectKey(System.Object,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetObjectByKey(Telerik.OpenAccess.ObjectKey)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetObjectsByKeys``1(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.ObjectKey})">
            <summary>
            Gets the objects as specified in the <c>keys</c> in a lazy loading yet optimized manner.
            </summary>
            <typeparam name="T">The expected target type</typeparam>
            <param name="keys">Enumerable of ObjectKey, keys should be of the same persistent type and should not contain version information.</param>
            <returns>Lazy evaluated enumerable with the corresponding objects and extra information about missing objects</returns>
            <exception cref="T:System.ArgumentNullException">When keys is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">When keys contain version information or keys contain different persistent types</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When value in keys refers to more than one persistent type</exception>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.LookupObjectByKey(Telerik.OpenAccess.ObjectKey)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.Correlate(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.MaterializeAttached``1(System.Data.Common.DbDataReader)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.MaterializeAttached(System.String,System.Data.Common.DbDataReader)">
            <summary>
            SPI
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.SetupDataReader(Telerik.OpenAccess.Data.Common.OADataReader)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetConnection(System.Boolean@)">
             <summary>
             Returns an OAConnection instance that represents the low-level connection used by the context
             </summary>
             <remarks>
             If the underlying system does not use a ADO.NET 2.0 implementation null is returned.
             </remarks>
            <para name="IsNew">True if a new OAConnection is returned, false if the connection has been given our previously</para>
             <returns>OAConnection that wraps the underlying store connection</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.DatastoreConnectionDisposed">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.UnpoolDatastoreConnection">
            <summary>
            SPI
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.LogExpressions(System.String,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.MakeReadOnly(System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.GetMetaData">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.CreateDetachedCopies(System.Collections.ArrayList,Telerik.OpenAccess.FetchPlan)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IExtendedObjectScope.AttachCopies(System.Collections.ArrayList)">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtendedObjectScope.ExtendedPersistenceManager">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtendedObjectScope.UserContext">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtendedObjectScope.ShouldLogExpressions">
            <summary>
            SPI
            </summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtendedObjectScope.MaintainOriginalValues">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtendedObjectScope.IsolationLevel">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IExtentEnumerator">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IExtentEnumerator.Count">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IFieldMetaData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFieldMetaData.GetItemsEmbedded">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFieldMetaData.GetKeysEmbedded">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFieldMetaData.GetValuesEmbedded">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFieldMetaData.GetEmbedded">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IFieldMetaData.GetItemType">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IObjectKeyBuilder">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IObjectKeyBuilder.IsValid">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IObjectKeyBuilder.IsValidKey(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IObjectKeyBuilder.AddKeyValue(System.String,System.Object)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IObjectKeyBuilder.CheckAllKeysPresent">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IObjectKeyBuilder.GetObjectKey">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IndexConfig">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexConfig.AppendMember(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexConfig.SetFulltext(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexConfig.SetUnique(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexConfig.Done">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IndexMemberConfig">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexMemberConfig.SetSignificance(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IndexMemberConfig.SetDescending(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IPersistenceManager">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.makePersistent(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.getObjectId(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.getUserObject">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.setUserObject(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.retrieve(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.retrieve(System.Object,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.isReadAfterDelete">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.createCopyFor(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.ObjectRepository,System.Object,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.fillCopy(Telerik.OpenAccess.SPI.OfflineStateManager,Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.updateFromCopy(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,Telerik.OpenAccess.SPI.OfflineStateManager,Telerik.OpenAccess.SPI.ObjectRepositoryMerger,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.evictAll(System.Collections.IEnumerator)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.refreshAll(System.Collections.IEnumerator)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.makePersistentAll(System.Collections.IEnumerator)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.deletePersistentAll(System.Collections.IEnumerator)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.retrieveAll(System.Collections.IEnumerator)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.makeBlob(System.Int16)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.disconnectedOID(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.resolveDisconnectedOID(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.verifySeals(System.Collections.IList,System.Collections.IList,System.Collections.IDictionary,System.Boolean,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.cast2persistent(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.setTracking(System.Int32)">
            * J# only */
             <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.setTracking(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.getOptimisticLockingValue(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.GetFieldValue(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.SetFieldValue(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable,System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.GetState(System.Object)">
            <summary>
            Returns the state of the persistent object.
            </summary>
            <param name="entity">The object the state should be returned for.</param>
            <returns>An state enum representing the state of the persistent object.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.GetState(System.Object,System.String)">
            <summary>
            Returns the state of the named field of the persistent object.
            </summary>
            <param name="entity">The object holding the field or property with the respective name.</param>
            <param name="fieldName">The name of the field or property the state should be returned for.</param>
            <returns>An state enum representing the state of the data hold by the named field or property.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.GetOriginalValue``1(System.Object,System.String)">
             <summary>
             Returns the original value of the named property of the persistent object.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IPersistenceManager.CheckProperty(System.String,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.IPersistenceManager.UserVisibleMetaData">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.QueryOptionsImp">
            <summary>spi</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.QueryOptionsImp.Options">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.QueryOptionsImp.Debug">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.QueryOptionsImp.FetchPlan">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.QueryOptionsImp.NoSecondLevelCaching">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.QueryOptionsImp.NoCompiledQueryCaching">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IQueryBuilder">
            <summary>spi</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateQuery(Telerik.OpenAccess.IObjectScope,System.Type,System.String,Telerik.OpenAccess.SPI.QueryOptionsImp)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Compile(Telerik.OpenAccess.IQuery,Telerik.OpenAccess.SPI.Build)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Dump(Telerik.OpenAccess.IQuery)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.IsPersistent(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetClassMeta(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetFieldMeta(System.Reflection.MemberInfo)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetFieldType(System.Object,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateParamNode(System.String,System.Type,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateParamUsage(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateVarNode(System.String,System.Type,System.Boolean,System.Object,System.Collections.Generic.List{System.Object})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateVarNodeUsage(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.BindVarNode(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateOrderNode(System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateGroupingNode(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AddHavingToGrouping(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendChild(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendChildListOf(System.Object,System.Object,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Copy(System.Object,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.HasChildren(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateUnaryNode">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateResultNode(System.Boolean,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateSubQueryNode(System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetProjection">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateLiteralNode(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateReservedFieldNode(System.Object,System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.ConvertFieldNode(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateFieldNode(System.Object,System.Type,System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateFieldNode(System.Object,System.Type,System.String,System.Boolean,System.Object@,System.Boolean)">
            <summary>hidden</summary> 
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateCompareOpNode(System.Object,System.Object,System.Object,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateBooleanOpNode(System.Object,System.Object,System.Object,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateMethodNode(System.Reflection.MethodInfo,System.String,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateAggregateNode(System.Object,System.String,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateBinaryOpNode(System.Char)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateCastNode(System.Object,System.Type,System.Boolean,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateUnaryOperationNode(System.Object,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateUpperCaseNode(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendMethodParameters(System.Object,System.Object[],System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.DeepestField(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.RequiresParameterWashing(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetFilter(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetProjection(System.Object,System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetParameters(System.Object[],System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetOrdering(System.Object[],System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetGrouping(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetBackendQuery(Telerik.OpenAccess.IQuery,System.Object[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.NotSupported(System.Reflection.MethodBase,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetCompiledParameterNames(Telerik.OpenAccess.IQuery)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetGroupResolutionInformation(Telerik.OpenAccess.IQuery,System.Object@)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetGroupResolutionInformation(System.Object,System.Object[],System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetGroupingInformation(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetGroupingInformation(Telerik.OpenAccess.IQuery)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendJoin(System.Type,System.Type,System.Object,System.Object,System.Boolean,System.Boolean[],System.Object@,System.Collections.Generic.List{System.Object})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendCollectionJoin(System.Type,System.Object,System.Type,System.Object,System.String,System.Object@,System.Collections.Generic.List{System.Object})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendNext(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.HasProjection">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CorrectProjectionType(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.WrapConversion(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CorrectReservedFieldNode(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetResultConverter(Telerik.OpenAccess.IQuery)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.ResetParent(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CorrectPureBoolean(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Map(System.Reflection.ConstructorInfo,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Convert(System.Type,System.Type,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CollectionTest(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetTypeInformation(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetCategory(System.Object,System.Type,System.Type@)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.DefaultIfEmpty(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.Combine(System.Object,System.String,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetPaging(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetSubQueryExtent(System.Object,System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AddSubQuery(System.Object,System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetVariables(System.Collections.Generic.List{System.Object},System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetCandidate(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateSubQueryUsage(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.ResolveAlias(System.Reflection.MemberInfo)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetSource(System.Object,System.Type,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetParameterTransformation(System.Object,Telerik.OpenAccess.SPI.ParameterTransformation)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.GetChildListCopy(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.FixProjection(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateClientSideExecution(System.Int32)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreatePullParamNode(System.String,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.CreateUserDefinedMethod(System.Type,System.String,System.Object[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.IsKnownBaseType(System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.AppendProperty(System.Object,System.Reflection.MemberInfo)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetResolveMethod(Telerik.OpenAccess.SPI.ResolveMethod)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.ReverseOrderings(System.Collections.Generic.List{System.Object})">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.RestrictToType(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.ForModification">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IQueryBuilder.SetUpdate(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Build">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ParameterTransformation">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ResolveMethod">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ISchemaAdapter">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.Create(System.Reflection.Assembly,System.Collections.Generic.List{System.String},Telerik.OpenAccess.SPI.SchemaProperties,Telerik.OpenAccess.SPI.SchemaCreateProperties,Telerik.OpenAccess.SPI.IOutputAdapter)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.Update(System.Reflection.Assembly,System.Collections.Generic.List{System.String},Telerik.OpenAccess.SPI.SchemaProperties,Telerik.OpenAccess.SchemaUpdateProperties,Telerik.OpenAccess.SPI.IOutputAdapter)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.CreateDatabase(System.Reflection.Assembly,System.Collections.Generic.List{System.String},Telerik.OpenAccess.SPI.SchemaProperties,Telerik.OpenAccess.SPI.DatabaseCreationProperties,Telerik.OpenAccess.SPI.IOutputAdapter)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.ExecuteScript(System.Reflection.Assembly,System.Collections.Generic.List{System.String},Telerik.OpenAccess.SPI.SchemaProperties,Telerik.OpenAccess.SPI.SQLExecutionProperties,Telerik.OpenAccess.SPI.IOutputAdapter)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.DumpSchema(System.Reflection.Assembly,System.Collections.Generic.List{System.String},Telerik.OpenAccess.SPI.SchemaProperties,Telerik.OpenAccess.SPI.DumpSchemaProperties,Telerik.OpenAccess.SPI.IOutputAdapter)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.CreateUpdateInfo(Telerik.OpenAccess.SchemaUpdateProperties)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.CreateDDLScript">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.ExecuteDDLScript(System.String,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.ExecuteDDLScript(Telerik.OpenAccess.SchemaUpdateInfo,System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ISchemaAdapter.CreateDatabase(System.Boolean)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.IOutputAdapter">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IOutputAdapter.LogInfo(System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IOutputAdapter.LogWarning(System.String,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.IOutputAdapter.LogError(System.String,System.String)">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.SchemaProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.Url">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.Config">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.ConnectionId">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.Out">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.OutputDir">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaProperties.Direct">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.SchemaCreateProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaCreateProperties.DropTables">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaCreateProperties.CreateTables">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaCreateProperties.Validate">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaCreateProperties.LogEvents">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SchemaCreateProperties.Comments">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.DatabaseCreationProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.CheckOnly">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.DatabaseExisted">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.DatabaseName">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.Server">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.Backend">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.Driver">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.Params">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.User">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.Pass">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DatabaseCreationProperties.IntegratedSecurity">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.SQLExecutionProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.SQLExecutionProperties.SQLScriptFile">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.DumpSchemaProperties">
            <summary>SPI</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DumpSchemaProperties.File">
            <summary>SPI</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Tracking">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Tracking.owner">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Tracking.ownerField">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Tracking.originalData">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Tracking.beenReset">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Tracking.mngr">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.Track(System.Object,System.String,System.Object,Telerik.OpenAccess.SPI.ICollectionManager,Telerik.OpenAccess.SPI.dataobjects.StateManager)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.GetOwner">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.GetFieldName">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.NoTrack">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.OriginalData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.SetOriginalData(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.InvalidateOriginalData">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.HasBeenReset">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.Reset(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.BeforeRead">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.MakeDirty">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Tracking.PostLoad">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ITrackedObject">
            <summary>
            Interface for tracked collection classes that implements persistent capable.
            </summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.DataWrapper">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DataWrapper.Names">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DataWrapper.Types">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.DataWrapper.Values">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.LinqPadHelper">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.LinqPadHelper.GetFilledPropertyNames(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.listener.InstanceLifecycleListener">
            <summary> All lifecycle listeners extend from this base interface.
            In order to minimize the impact on domain classes, instance callbacks 
            can be defined to use a life-cycle listener pattern instead of 
            having the domain class implement the callback interface(s).
            
            </summary>
            <version>  2.0
            </version>
            <since> 2.0
            </since>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl">
            <summary>
            Web service implementation to be used by the Telerik Data Access profiler. The class contains the client and server functionality
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetVersion">
            <summary>Returns the version of the web service definition.</summary>
            <remarks>The version number will be incremented whenever the service contract changes.</remarks>
            <returns>A version number to detect if client and server can work together.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetOpenAccessVersion">
            <summary>Returns the OpenAccess version number.</summary>
            <returns>OpenAccess version number of the server side used OpenAccess version.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetDatabaseNames">
            <summary>
            Returns all alias names for all opened databases in the process.
            </summary>
            <returns>Alias names for all opened databases in the process.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetMetrics(System.String,System.DateTime,System.Int32)">
            <summary>Returns a list of Telerik Data Access metrics.</summary>
            <param name="databaseName">The name of the database instance generating these metrics</param>
            <param name="from">Timestamp to restrict the history of metrics.</param>
            <param name="maxMetrics">Maximal amount of data transported.</param>
            <returns>List of Telerik Data Access metrics.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetEventsById(System.String,System.Int32,System.Int32)">
            <summary>Returns a list of Telerik Data Access log events.</summary>
            <param name="databaseName">The name of the database instance generating these metrics</param>
            <param name="fromId">Integer value to restrict the history of the log events.</param>
            <param name="maxEvents">Maximal amount of data transported.</param>
            <returns>List of Telerik Data Access log events.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetEventsByDate(System.String,System.DateTime,System.Int32)">
            <summary>Returns a list of Telerik Data Access log events.</summary>
            <param name="databaseName">The name of the database instance generating these metrics</param>
            <param name="from">Timestamp to restrict the history of log events.</param>
            <param name="maxEvents">Maximal amount of data transported.</param>
            <returns>List of Telerik Data Access log events.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetMetrics(System.Byte[])">
            <summary>Converts the serialized metrics into real objects.</summary>
            <param name="bytes">The serialized data.</param>
            <returns>A metrics collection.</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.ProfilerWebServiceImpl.GetEvents(System.Byte[])">
            <summary>Converts the serialized events into real objects.</summary>
            <param name="bytes">The serialized data.</param>
            <returns>An events collection.</returns>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.PropertySet">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.QueryNodeHelper">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.QueryNodeHelper.OUTERMOST_THIS">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.TrackingImpl">
            <summary>
            Provides the default implementation of the ITracking interface.
            </summary>
            <remarks>
            Not intended for application use. 
            </remarks>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnChanging">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnChanged">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.MaskChange">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnAdding">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnAdded">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.MaskAdd">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnRemoving">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnRemoved">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.MaskRemove">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnRefreshing">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnRefreshed">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.MaskRefresh">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.OnObjectConstructed">
            <summary>hidden</summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.TrackingImpl.MaskObjectConstructed">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireChanging(Telerik.OpenAccess.ChangeEventArgs)">
            <summary>
            Raises the Changing event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireChanged(Telerik.OpenAccess.ChangeEventArgs)">
            <summary>
            Raises the Changed event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireAdding(Telerik.OpenAccess.AddEventArgs)">
            <summary>
            Raises the Adding event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireAdded(Telerik.OpenAccess.AddEventArgs)">
            <summary>
            Raises the Added event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireRemoving(Telerik.OpenAccess.RemoveEventArgs)">
            <summary>
            Raises the Removing event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireRemoved(Telerik.OpenAccess.RemoveEventArgs)">
            <summary>
            Raises the Removed event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireRefreshing(Telerik.OpenAccess.RefreshEventArgs)">
            <summary>
            Raises the Refreshing event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireRefreshed(Telerik.OpenAccess.RefreshEventArgs)">
            <summary>
            Raises the Refreshed event.
            </summary>
             <remarks>Not intended for application use.</remarks>
            <param name="ev">The event to raise.</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.FireObjectConstructed(Telerik.OpenAccess.SPI.dataobjects.PersistenceCapable)">
            <summary>
            Raises ObjectConstructed event for the provided persistent instance
            </summary>
            <remarks>
            Although the method does not force it, the persistenceCapable parameter should not null.
            </remarks>
            <param name="persistenceCapable">Persistent instance event argument</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.TrackingImpl.#ctor(System.Object,Telerik.OpenAccess.SPI.TrackingImpl.TrackChanges)">
            <summary>hidden</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Changing">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Changed">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Adding">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Added">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Removing">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Removed">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Refreshing">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.Refreshed">
            <summary>Event handler</summary>
        </member>
        <member name="E:Telerik.OpenAccess.SPI.TrackingImpl.ObjectConstructed">
            <summary>
            Occurs after an object has been constructed by Telerik Data Access runtime.
            </summary>
            <remarks>
            The events is fired after Telerik Data Access has materialized an entity instance.
            This can happen if an object has been loaded using GetObjectByKey() method, 
            as results of a LINQ query or after a navigation property is loaded (either lazily or eagerly).
            </remarks>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.TrackingImpl.TrackChanges">
            <summary>
            Notifier declaration using the bit masks defined.
            </summary>
            <param name="x">Bit mask for the events to raise.</param>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.TypeConfig">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Util.ArgumentAttribute">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.#ctor(System.String,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.#ctor(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.#ctor(System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.ValueDescription">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.HelpString">
            <summary>hidden</summary>
        </member>
        <member name="P:Telerik.OpenAccess.SPI.Util.ArgumentAttribute.Hidden">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Util.ArgumentParser">
            <summary>
            Provides argument parsing and controlling together with 
            help functionality.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentParser.AddArguments(System.String,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentParser.GetUsageText">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentParser.Parse(System.String[],System.Object[])">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.ArgumentParser.UnparseProperties(System.Object,System.Text.StringBuilder)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Util.AssemblyHelper">
            <summary>
            Helper class for assembly loading
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.LoadWithVersionFromType(System.String,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.Load(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.Load(System.Reflection.AssemblyName)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.LoadFrom(System.String)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.GetResourceStream(System.String,System.String,System.Boolean)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.RestOfName">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.AssemblyHelper.GetEnvironmentVariableNoException(System.String,System.String)">
            <summary>hidden</summary>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Util.Primitives">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.boxArrayElements(System.Object)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.unboxArrayElements(System.Object[],System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.convertUnsignedType(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.convert(System.Object,System.Type)">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.HashString(System.String)">
            <summary>
            Produces a hash string that is stable wrt. 32/64 bit runtimes.
            </summary>
            <param name="s">String to hash</param>
            <returns>Hash value</returns>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.CheckClosed(System.Data.Common.DbDataReader)">
            <summary>
            Checks the passed reader if it is closed and throws an exception.
            </summary>
            <param name="reader">Data Reader to check</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.TryParseGuid(System.String)">
            <summary>
            Tries to parse a Guid from a string, avoiding exceptions.
            </summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.GenerateTempTableName(System.String,System.String)">
            <summary>
            Generates temporary name based on the class and property name. The name contains special symbols that indicate the Telerik Data Access Runtime to re-calculate the name at later stage. 
            </summary>
            <param name="classFullName">The full name of the class</param>
            <param name="propertyName">The property name</param>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.Primitives.IsValidTableName(System.String)">
            <summary>
            Checks if the name is marked as temporary name and it should be recalculated by the Telerik Data Access Runtime.
            </summary>
            <param name="tableName">The name of the table</param>
        </member>
        <member name="T:Telerik.OpenAccess.SPI.Util.QueryExceptionHelper">
            <summary>
            Helper class to pass more information to binding support
            </summary>
        </member>
        <member name="F:Telerik.OpenAccess.SPI.Util.QueryExceptionHelper.exceptions">
            <summary>hidden</summary>
        </member>
        <member name="M:Telerik.OpenAccess.SPI.Util.QueryExceptionHelper.#ctor(System.Exception[])">
            <summary>hidden</summary>
        </member>
    </members>
</doc>
